clang-4.0: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
*** IR Dump After Force set function attributes ***; ModuleID = '../../testcasesupport/io.c'
source_filename = "../../testcasesupport/io.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [5 x i32] [i32 37, i32 108, i32 115, i32 10, i32 0], align 4, !effectiveSan !0
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [5 x i8] c"%hd\0A\00", align 1, !effectiveSan !0
@.str.4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1, !effectiveSan !0
@.str.5 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1, !effectiveSan !0
@.str.6 = private unnamed_addr constant [5 x i8] c"%zu\0A\00", align 1, !effectiveSan !0
@.str.7 = private unnamed_addr constant [6 x i8] c"%02x\0A\00", align 1, !effectiveSan !0
@.str.8 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1, !effectiveSan !0
@.str.9 = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1, !effectiveSan !0
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1, !effectiveSan !0
@.str.11 = private unnamed_addr constant [10 x i8] c"%d -- %d\0A\00", align 1, !effectiveSan !0
@.str.12 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1, !effectiveSan !0
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1, !effectiveSan !0
@.str.14 = private unnamed_addr constant [5 x i32] [i32 37, i32 48, i32 50, i32 120, i32 0], align 4, !effectiveSan !0
@GLOBAL_CONST_TRUE = constant i32 1, align 4, !dbg !1, !effectiveSan !60
@GLOBAL_CONST_FALSE = constant i32 0, align 4, !dbg !65, !effectiveSan !60
@GLOBAL_CONST_FIVE = constant i32 5, align 4, !dbg !67, !effectiveSan !60
@globalTrue = global i32 1, align 4, !dbg !69, !effectiveSan !17
@globalFalse = global i32 0, align 4, !dbg !71, !effectiveSan !17
@globalFive = global i32 5, align 4, !dbg !73, !effectiveSan !17
@globalArgc = global i32 0, align 4, !dbg !75, !effectiveSan !17
@globalArgv = global i8** null, align 8, !dbg !77, !effectiveSan !62

; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}

declare i32 @wprintf(i32*, ...) #2

; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}

; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}

; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}

; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}

; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}

; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}

; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}

; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}

; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}

; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}

; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}

; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}

; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}

declare i32 @puts(i8*) #2

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32) #4

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #7, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #7, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #7, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}

; Function Attrs: nounwind
declare i32 @iswxdigit(i32) #5

; Function Attrs: nounwind
declare i32 @swscanf(i32*, i32*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #7, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}

; Function Attrs: nounwind
declare i32 @rand() #5

; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!3}
!llvm.module.flags = !{!304, !305}
!llvm.ident = !{!306}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIGlobalVariableExpression(var: !2)
!2 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_TRUE", scope: !3, file: !4, line: 166, type: !61, isLocal: false, isDefinition: true)
!3 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !4, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5, retainedTypes: !6, globals: !64, imports: !79)
!4 = !DIFile(filename: "../../testcasesupport/io.c", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!5 = !{}
!6 = !{!7, !8, !9, !0, !12, !13, !14, !17, !18, !19, !20, !21, !22, !23, !24, !25, !29, !30, !33, !34, !11, !35, !36, !16, !40, !41, !42, !43, !44, !45, !54, !46, !56, !57, !58, !59, !10, !15, !60, !62}
!7 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!16 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!23 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !26, line: 27, baseType: !27)
!26 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !28, line: 43, baseType: !23)
!28 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !31, line: 62, baseType: !32)
!31 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!32 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!34 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 64, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 2)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!41 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !48)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !49, line: 100, baseType: !50)
!49 = !DIFile(filename: "../../testcasesupport/std_testcase.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !49, line: 96, size: 64, elements: !51, identifier: "_ZTS14_twoIntsStruct")
!51 = !{!52, !53}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !50, file: !49, line: 98, baseType: !12, size: 32)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !50, file: !49, line: 99, baseType: !12, size: 32, offset: 32)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64)
!55 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !50)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!64 = !{!1, !65, !67, !69, !71, !73, !75, !77}
!65 = !DIGlobalVariableExpression(var: !66)
!66 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FALSE", scope: !3, file: !4, line: 167, type: !61, isLocal: false, isDefinition: true)
!67 = !DIGlobalVariableExpression(var: !68)
!68 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FIVE", scope: !3, file: !4, line: 168, type: !61, isLocal: false, isDefinition: true)
!69 = !DIGlobalVariableExpression(var: !70)
!70 = distinct !DIGlobalVariable(name: "globalTrue", scope: !3, file: !4, line: 173, type: !12, isLocal: false, isDefinition: true)
!71 = !DIGlobalVariableExpression(var: !72)
!72 = distinct !DIGlobalVariable(name: "globalFalse", scope: !3, file: !4, line: 174, type: !12, isLocal: false, isDefinition: true)
!73 = !DIGlobalVariableExpression(var: !74)
!74 = distinct !DIGlobalVariable(name: "globalFive", scope: !3, file: !4, line: 175, type: !12, isLocal: false, isDefinition: true)
!75 = !DIGlobalVariableExpression(var: !76)
!76 = distinct !DIGlobalVariable(name: "globalArgc", scope: !3, file: !4, line: 206, type: !12, isLocal: false, isDefinition: true)
!77 = !DIGlobalVariableExpression(var: !78)
!78 = distinct !DIGlobalVariable(name: "globalArgv", scope: !3, file: !4, line: 207, type: !63, isLocal: false, isDefinition: true)
!79 = !{!80, !87, !93, !99, !103, !108, !112, !116, !120, !130, !134, !138, !142, !146, !150, !154, !158, !162, !166, !172, !176, !180, !184, !188, !192, !197, !201, !205, !207, !213, !217, !225, !227, !231, !235, !239, !243, !248, !252, !257, !258, !259, !260, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303}
!80 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !83, line: 52)
!81 = !DINamespace(name: "std", scope: null, file: !82, line: 236)
!82 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!83 = !DISubprogram(name: "abs", scope: !84, file: !84, line: 837, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!84 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!85 = !DISubroutineType(types: !86)
!86 = !{!12, !12}
!87 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !88, line: 127)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !84, line: 62, baseType: !89)
!89 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 58, size: 64, elements: !90, identifier: "_ZTS5div_t")
!90 = !{!91, !92}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !89, file: !84, line: 60, baseType: !12, size: 32)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !89, file: !84, line: 61, baseType: !12, size: 32, offset: 32)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !94, line: 128)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !84, line: 70, baseType: !95)
!95 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 66, size: 128, elements: !96, identifier: "_ZTS6ldiv_t")
!96 = !{!97, !98}
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !95, file: !84, line: 68, baseType: !23, size: 64)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !95, file: !84, line: 69, baseType: !23, size: 64, offset: 64)
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !100, line: 130)
!100 = !DISubprogram(name: "abort", scope: !84, file: !84, line: 588, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !104, line: 134)
!104 = !DISubprogram(name: "atexit", scope: !84, file: !84, line: 592, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!12, !107}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64)
!108 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !109, line: 140)
!109 = !DISubprogram(name: "atof", scope: !84, file: !84, line: 101, type: !110, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!110 = !DISubroutineType(types: !111)
!111 = !{!44, !9}
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !84, file: !84, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!12, !9}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !84, file: !84, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!23, !9}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !84, file: !84, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !124, !124, !30, !30, !126}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !84, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!12, !124, !124}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !131, line: 144)
!131 = !DISubprogram(name: "calloc", scope: !84, file: !84, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!0, !30, !30}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !135, line: 145)
!135 = !DISubprogram(name: "div", scope: !84, file: !84, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!88, !12, !12}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !139, line: 146)
!139 = !DISubprogram(name: "exit", scope: !84, file: !84, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !12}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !143, line: 147)
!143 = !DISubprogram(name: "free", scope: !84, file: !84, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !0}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !147, line: 148)
!147 = !DISubprogram(name: "getenv", scope: !84, file: !84, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!33, !9}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !151, line: 149)
!151 = !DISubprogram(name: "labs", scope: !84, file: !84, line: 838, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{!23, !23}
!154 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !155, line: 150)
!155 = !DISubprogram(name: "ldiv", scope: !84, file: !84, line: 851, type: !156, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!156 = !DISubroutineType(types: !157)
!157 = !{!94, !23, !23}
!158 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !159, line: 151)
!159 = !DISubprogram(name: "malloc", scope: !84, file: !84, line: 539, type: !160, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!160 = !DISubroutineType(types: !161)
!161 = !{!0, !30}
!162 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !163, line: 153)
!163 = !DISubprogram(name: "mblen", scope: !84, file: !84, line: 919, type: !164, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!164 = !DISubroutineType(types: !165)
!165 = !{!12, !9, !30}
!166 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !167, line: 154)
!167 = !DISubprogram(name: "mbstowcs", scope: !84, file: !84, line: 930, type: !168, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!168 = !DISubroutineType(types: !169)
!169 = !{!30, !170, !171, !30}
!170 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !35)
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !9)
!172 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !173, line: 155)
!173 = !DISubprogram(name: "mbtowc", scope: !84, file: !84, line: 922, type: !174, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!174 = !DISubroutineType(types: !175)
!175 = !{!12, !170, !171, !30}
!176 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !177, line: 157)
!177 = !DISubprogram(name: "qsort", scope: !84, file: !84, line: 827, type: !178, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !0, !30, !30, !126}
!180 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !181, line: 163)
!181 = !DISubprogram(name: "rand", scope: !84, file: !84, line: 453, type: !182, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!182 = !DISubroutineType(types: !183)
!183 = !{!12}
!184 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !185, line: 164)
!185 = !DISubprogram(name: "realloc", scope: !84, file: !84, line: 549, type: !186, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!186 = !DISubroutineType(types: !187)
!187 = !{!0, !0, !30}
!188 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !189, line: 165)
!189 = !DISubprogram(name: "srand", scope: !84, file: !84, line: 455, type: !190, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!190 = !DISubroutineType(types: !191)
!191 = !{null, !41}
!192 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !193, line: 166)
!193 = !DISubprogram(name: "strtod", scope: !84, file: !84, line: 117, type: !194, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!194 = !DISubroutineType(types: !195)
!195 = !{!44, !171, !196}
!196 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !63)
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !198, line: 167)
!198 = !DISubprogram(name: "strtol", scope: !84, file: !84, line: 176, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!23, !171, !196, !12}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !202, line: 168)
!202 = !DISubprogram(name: "strtoul", scope: !84, file: !84, line: 180, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!32, !171, !196, !12}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !206, line: 169)
!206 = !DISubprogram(name: "system", scope: !84, file: !84, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !208, line: 171)
!208 = !DISubprogram(name: "wcstombs", scope: !84, file: !84, line: 933, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!30, !211, !212, !30}
!211 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !33)
!212 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !14)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !214, line: 172)
!214 = !DISubprogram(name: "wctomb", scope: !84, file: !84, line: 926, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!12, !33, !16}
!217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !219, line: 200)
!218 = !DINamespace(name: "__gnu_cxx", scope: null, file: !82, line: 262)
!219 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !84, line: 80, baseType: !220)
!220 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 76, size: 128, elements: !221, identifier: "_ZTS7lldiv_t")
!221 = !{!222, !224}
!222 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !220, file: !84, line: 78, baseType: !223, size: 64)
!223 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !220, file: !84, line: 79, baseType: !223, size: 64, offset: 64)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !226, line: 206)
!226 = !DISubprogram(name: "_Exit", scope: !84, file: !84, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !228, line: 210)
!228 = !DISubprogram(name: "llabs", scope: !84, file: !84, line: 841, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!223, !223}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !232, line: 216)
!232 = !DISubprogram(name: "lldiv", scope: !84, file: !84, line: 855, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!219, !223, !223}
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !236, line: 227)
!236 = !DISubprogram(name: "atoll", scope: !84, file: !84, line: 112, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!223, !9}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !240, line: 228)
!240 = !DISubprogram(name: "strtoll", scope: !84, file: !84, line: 200, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!223, !171, !196, !12}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !244, line: 229)
!244 = !DISubprogram(name: "strtoull", scope: !84, file: !84, line: 205, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!247, !171, !196, !12}
!247 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !249, line: 231)
!249 = !DISubprogram(name: "strtof", scope: !84, file: !84, line: 123, type: !250, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!250 = !DISubroutineType(types: !251)
!251 = !{!21, !171, !196}
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !253, line: 232)
!253 = !DISubprogram(name: "strtold", scope: !84, file: !84, line: 126, type: !254, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!254 = !DISubroutineType(types: !255)
!255 = !{!256, !171, !196}
!256 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !219, line: 240)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !226, line: 242)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !228, line: 244)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !261, line: 245)
!261 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !218, file: !262, line: 213, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!262 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !232, line: 246)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !236, line: 248)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !249, line: 249)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !240, line: 250)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !244, line: 251)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !253, line: 252)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !100, line: 38)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !104, line: 39)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !139, line: 40)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !88, line: 51)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !94, line: 52)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !275, line: 54)
!275 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !81, file: !276, line: 102, type: !277, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!276 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!277 = !DISubroutineType(types: !278)
!278 = !{!279, !279}
!279 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !109, line: 55)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !113, line: 56)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !117, line: 57)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !121, line: 58)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !131, line: 59)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !261, line: 60)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !143, line: 61)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !147, line: 62)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !151, line: 63)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !155, line: 64)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !159, line: 65)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !163, line: 67)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !167, line: 68)
!293 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !173, line: 69)
!294 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !177, line: 71)
!295 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !181, line: 72)
!296 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !185, line: 73)
!297 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !189, line: 74)
!298 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !193, line: 75)
!299 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !198, line: 76)
!300 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !202, line: 77)
!301 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !206, line: 78)
!302 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !208, line: 80)
!303 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !214, line: 81)
!304 = !{i32 2, !"Dwarf Version", i32 4}
!305 = !{i32 2, !"Debug Info Version", i32 3}
!306 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!307 = distinct !DISubprogram(name: "printLine", scope: !4, file: !4, line: 11, type: !308, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!308 = !DISubroutineType(types: !309)
!309 = !{null, !9}
!310 = !{!9}
!311 = !DILocalVariable(name: "line", arg: 1, scope: !307, file: !4, line: 11, type: !9)
!312 = !DIExpression()
!313 = !DILocation(line: 11, column: 30, scope: !307)
!314 = !DILocation(line: 13, column: 8, scope: !315)
!315 = distinct !DILexicalBlock(scope: !307, file: !4, line: 13, column: 8)
!316 = !DILocation(line: 13, column: 13, scope: !315)
!317 = !DILocation(line: 13, column: 8, scope: !307)
!318 = !DILocation(line: 15, column: 24, scope: !319)
!319 = distinct !DILexicalBlock(scope: !315, file: !4, line: 14, column: 5)
!320 = !DILocation(line: 15, column: 9, scope: !319)
!321 = !DILocation(line: 16, column: 5, scope: !319)
!322 = !DILocation(line: 17, column: 1, scope: !307)
!323 = distinct !DISubprogram(name: "printWLine", scope: !4, file: !4, line: 19, type: !324, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!324 = !DISubroutineType(types: !325)
!325 = !{null, !14}
!326 = !{!14}
!327 = !DILocalVariable(name: "line", arg: 1, scope: !323, file: !4, line: 19, type: !14)
!328 = !DILocation(line: 19, column: 34, scope: !323)
!329 = !DILocation(line: 21, column: 8, scope: !330)
!330 = distinct !DILexicalBlock(scope: !323, file: !4, line: 21, column: 8)
!331 = !DILocation(line: 21, column: 13, scope: !330)
!332 = !DILocation(line: 21, column: 8, scope: !323)
!333 = !DILocation(line: 23, column: 27, scope: !334)
!334 = distinct !DILexicalBlock(scope: !330, file: !4, line: 22, column: 5)
!335 = !DILocation(line: 23, column: 9, scope: !334)
!336 = !DILocation(line: 24, column: 5, scope: !334)
!337 = !DILocation(line: 25, column: 1, scope: !323)
!338 = distinct !DISubprogram(name: "printIntLine", scope: !4, file: !4, line: 27, type: !140, isLocal: false, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!339 = !DILocalVariable(name: "intNumber", arg: 1, scope: !338, file: !4, line: 27, type: !12)
!340 = !DILocation(line: 27, column: 24, scope: !338)
!341 = !DILocation(line: 29, column: 20, scope: !338)
!342 = !DILocation(line: 29, column: 5, scope: !338)
!343 = !DILocation(line: 30, column: 1, scope: !338)
!344 = distinct !DISubprogram(name: "printShortLine", scope: !4, file: !4, line: 32, type: !345, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!345 = !DISubroutineType(types: !346)
!346 = !{null, !19}
!347 = !DILocalVariable(name: "shortNumber", arg: 1, scope: !344, file: !4, line: 32, type: !19)
!348 = !DILocation(line: 32, column: 28, scope: !344)
!349 = !DILocation(line: 34, column: 21, scope: !344)
!350 = !DILocation(line: 34, column: 5, scope: !344)
!351 = !DILocation(line: 35, column: 1, scope: !344)
!352 = distinct !DISubprogram(name: "printFloatLine", scope: !4, file: !4, line: 37, type: !353, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!353 = !DISubroutineType(types: !354)
!354 = !{null, !21}
!355 = !DILocalVariable(name: "floatNumber", arg: 1, scope: !352, file: !4, line: 37, type: !21)
!356 = !DILocation(line: 37, column: 28, scope: !352)
!357 = !DILocation(line: 39, column: 20, scope: !352)
!358 = !DILocation(line: 39, column: 5, scope: !352)
!359 = !DILocation(line: 40, column: 1, scope: !352)
!360 = distinct !DISubprogram(name: "printLongLine", scope: !4, file: !4, line: 42, type: !361, isLocal: false, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!361 = !DISubroutineType(types: !362)
!362 = !{null, !23}
!363 = !DILocalVariable(name: "longNumber", arg: 1, scope: !360, file: !4, line: 42, type: !23)
!364 = !DILocation(line: 42, column: 26, scope: !360)
!365 = !DILocation(line: 44, column: 21, scope: !360)
!366 = !DILocation(line: 44, column: 5, scope: !360)
!367 = !DILocation(line: 45, column: 1, scope: !360)
!368 = distinct !DISubprogram(name: "printLongLongLine", scope: !4, file: !4, line: 47, type: !369, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!369 = !DISubroutineType(types: !370)
!370 = !{null, !25}
!371 = !DILocalVariable(name: "longLongIntNumber", arg: 1, scope: !368, file: !4, line: 47, type: !25)
!372 = !DILocation(line: 47, column: 33, scope: !368)
!373 = !DILocation(line: 49, column: 29, scope: !368)
!374 = !DILocation(line: 49, column: 5, scope: !368)
!375 = !DILocation(line: 50, column: 1, scope: !368)
!376 = distinct !DISubprogram(name: "printSizeTLine", scope: !4, file: !4, line: 52, type: !377, isLocal: false, isDefinition: true, scopeLine: 53, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!377 = !DISubroutineType(types: !378)
!378 = !{null, !30}
!379 = !DILocalVariable(name: "sizeTNumber", arg: 1, scope: !376, file: !4, line: 52, type: !30)
!380 = !DILocation(line: 52, column: 29, scope: !376)
!381 = !DILocation(line: 54, column: 21, scope: !376)
!382 = !DILocation(line: 54, column: 5, scope: !376)
!383 = !DILocation(line: 55, column: 1, scope: !376)
!384 = distinct !DISubprogram(name: "printHexCharLine", scope: !4, file: !4, line: 57, type: !385, isLocal: false, isDefinition: true, scopeLine: 58, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!385 = !DISubroutineType(types: !386)
!386 = !{null, !11}
!387 = !DILocalVariable(name: "charHex", arg: 1, scope: !384, file: !4, line: 57, type: !11)
!388 = !DILocation(line: 57, column: 29, scope: !384)
!389 = !DILocation(line: 59, column: 22, scope: !384)
!390 = !DILocation(line: 59, column: 5, scope: !384)
!391 = !DILocation(line: 60, column: 1, scope: !384)
!392 = distinct !DISubprogram(name: "printWcharLine", scope: !4, file: !4, line: 62, type: !393, isLocal: false, isDefinition: true, scopeLine: 63, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!393 = !DISubroutineType(types: !394)
!394 = !{null, !16}
!395 = !DILocalVariable(name: "wideChar", arg: 1, scope: !392, file: !4, line: 62, type: !16)
!396 = !DILocation(line: 62, column: 29, scope: !392)
!397 = !DILocalVariable(name: "s", scope: !392, file: !4, line: 66, type: !37)
!398 = !DILocation(line: 66, column: 13, scope: !392)
!399 = !DILocation(line: 67, column: 16, scope: !392)
!400 = !DILocation(line: 67, column: 9, scope: !392)
!401 = !DILocation(line: 67, column: 14, scope: !392)
!402 = !DILocation(line: 68, column: 9, scope: !392)
!403 = !DILocation(line: 68, column: 14, scope: !392)
!404 = !DILocation(line: 69, column: 21, scope: !392)
!405 = !DILocation(line: 69, column: 5, scope: !392)
!406 = !DILocation(line: 70, column: 1, scope: !392)
!407 = distinct !DISubprogram(name: "printUnsignedLine", scope: !4, file: !4, line: 72, type: !190, isLocal: false, isDefinition: true, scopeLine: 73, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!408 = !DILocalVariable(name: "unsignedNumber", arg: 1, scope: !407, file: !4, line: 72, type: !41)
!409 = !DILocation(line: 72, column: 33, scope: !407)
!410 = !DILocation(line: 74, column: 20, scope: !407)
!411 = !DILocation(line: 74, column: 5, scope: !407)
!412 = !DILocation(line: 75, column: 1, scope: !407)
!413 = distinct !DISubprogram(name: "printHexUnsignedCharLine", scope: !4, file: !4, line: 77, type: !414, isLocal: false, isDefinition: true, scopeLine: 78, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!414 = !DISubroutineType(types: !415)
!415 = !{null, !7}
!416 = !DILocalVariable(name: "unsignedCharacter", arg: 1, scope: !413, file: !4, line: 77, type: !7)
!417 = !DILocation(line: 77, column: 45, scope: !413)
!418 = !DILocation(line: 79, column: 22, scope: !413)
!419 = !DILocation(line: 79, column: 5, scope: !413)
!420 = !DILocation(line: 80, column: 1, scope: !413)
!421 = distinct !DISubprogram(name: "printDoubleLine", scope: !4, file: !4, line: 82, type: !422, isLocal: false, isDefinition: true, scopeLine: 83, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!422 = !DISubroutineType(types: !423)
!423 = !{null, !44}
!424 = !DILocalVariable(name: "doubleNumber", arg: 1, scope: !421, file: !4, line: 82, type: !44)
!425 = !DILocation(line: 82, column: 29, scope: !421)
!426 = !DILocation(line: 84, column: 20, scope: !421)
!427 = !DILocation(line: 84, column: 5, scope: !421)
!428 = !DILocation(line: 85, column: 1, scope: !421)
!429 = distinct !DISubprogram(name: "printStructLine", scope: !4, file: !4, line: 87, type: !430, isLocal: false, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!430 = !DISubroutineType(types: !431)
!431 = !{null, !46}
!432 = !{!54}
!433 = !DILocalVariable(name: "structTwoIntsStruct", arg: 1, scope: !429, file: !4, line: 87, type: !46)
!434 = !DILocation(line: 87, column: 45, scope: !429)
!435 = !DILocation(line: 89, column: 26, scope: !429)
!436 = !DILocation(line: 89, column: 47, scope: !429)
!437 = !DILocation(line: 89, column: 55, scope: !429)
!438 = !DILocation(line: 89, column: 76, scope: !429)
!439 = !DILocation(line: 89, column: 5, scope: !429)
!440 = !DILocation(line: 90, column: 1, scope: !429)
!441 = distinct !DISubprogram(name: "printBytesLine", scope: !4, file: !4, line: 92, type: !442, isLocal: false, isDefinition: true, scopeLine: 93, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!442 = !DISubroutineType(types: !443)
!443 = !{null, !57, !30}
!444 = !{!9, null}
!445 = !DILocalVariable(name: "bytes", arg: 1, scope: !441, file: !4, line: 92, type: !57)
!446 = !DILocation(line: 92, column: 43, scope: !441)
!447 = !DILocalVariable(name: "numBytes", arg: 2, scope: !441, file: !4, line: 92, type: !30)
!448 = !DILocation(line: 92, column: 57, scope: !441)
!449 = !DILocalVariable(name: "i", scope: !441, file: !4, line: 94, type: !30)
!450 = !DILocation(line: 94, column: 12, scope: !441)
!451 = !DILocation(line: 95, column: 12, scope: !452)
!452 = distinct !DILexicalBlock(scope: !441, file: !4, line: 95, column: 5)
!453 = !DILocation(line: 95, column: 10, scope: !452)
!454 = !DILocation(line: 95, column: 17, scope: !455)
!455 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 1)
!456 = distinct !DILexicalBlock(scope: !452, file: !4, line: 95, column: 5)
!457 = !DILocation(line: 95, column: 21, scope: !455)
!458 = !DILocation(line: 95, column: 19, scope: !455)
!459 = !DILocation(line: 95, column: 5, scope: !460)
!460 = !DILexicalBlockFile(scope: !452, file: !4, discriminator: 1)
!461 = !DILocation(line: 97, column: 24, scope: !462)
!462 = distinct !DILexicalBlock(scope: !456, file: !4, line: 96, column: 5)
!463 = !DILocation(line: 97, column: 30, scope: !462)
!464 = !DILocation(line: 97, column: 9, scope: !462)
!465 = !DILocation(line: 98, column: 5, scope: !462)
!466 = !DILocation(line: 95, column: 31, scope: !467)
!467 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 2)
!468 = !DILocation(line: 95, column: 5, scope: !467)
!469 = distinct !{!469, !470, !471}
!470 = !DILocation(line: 95, column: 5, scope: !452)
!471 = !DILocation(line: 98, column: 5, scope: !452)
!472 = !DILocation(line: 99, column: 5, scope: !441)
!473 = !DILocation(line: 100, column: 1, scope: !441)
!474 = distinct !DISubprogram(name: "decodeHexChars", scope: !4, file: !4, line: 105, type: !475, isLocal: false, isDefinition: true, scopeLine: 106, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!475 = !DISubroutineType(types: !476)
!476 = !{!30, !42, !30, !9}
!477 = !{!9, null, !9}
!478 = !DILocalVariable(name: "bytes", arg: 1, scope: !474, file: !4, line: 105, type: !42)
!479 = !DILocation(line: 105, column: 39, scope: !474)
!480 = !DILocalVariable(name: "numBytes", arg: 2, scope: !474, file: !4, line: 105, type: !30)
!481 = !DILocation(line: 105, column: 53, scope: !474)
!482 = !DILocalVariable(name: "hex", arg: 3, scope: !474, file: !4, line: 105, type: !9)
!483 = !DILocation(line: 105, column: 76, scope: !474)
!484 = !DILocalVariable(name: "numWritten", scope: !474, file: !4, line: 107, type: !30)
!485 = !DILocation(line: 107, column: 12, scope: !474)
!486 = !DILocation(line: 113, column: 5, scope: !474)
!487 = !DILocation(line: 113, column: 12, scope: !488)
!488 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 1)
!489 = !DILocation(line: 113, column: 25, scope: !488)
!490 = !DILocation(line: 113, column: 23, scope: !488)
!491 = !DILocation(line: 113, column: 34, scope: !488)
!492 = !DILocation(line: 113, column: 46, scope: !493)
!493 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 2)
!494 = !DILocation(line: 113, column: 54, scope: !493)
!495 = !DILocation(line: 113, column: 52, scope: !493)
!496 = !DILocation(line: 113, column: 37, scope: !493)
!497 = !DILocation(line: 113, column: 67, scope: !493)
!498 = !DILocation(line: 113, column: 79, scope: !499)
!499 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 3)
!500 = !DILocation(line: 113, column: 87, scope: !499)
!501 = !DILocation(line: 113, column: 85, scope: !499)
!502 = !DILocation(line: 113, column: 98, scope: !499)
!503 = !DILocation(line: 113, column: 70, scope: !499)
!504 = !DILocation(line: 113, column: 5, scope: !505)
!505 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 4)
!506 = !DILocalVariable(name: "byte", scope: !507, file: !4, line: 115, type: !12)
!507 = distinct !DILexicalBlock(scope: !474, file: !4, line: 114, column: 5)
!508 = !DILocation(line: 115, column: 13, scope: !507)
!509 = !DILocation(line: 116, column: 17, scope: !507)
!510 = !DILocation(line: 116, column: 25, scope: !507)
!511 = !DILocation(line: 116, column: 23, scope: !507)
!512 = !DILocation(line: 116, column: 9, scope: !507)
!513 = !DILocation(line: 117, column: 45, scope: !507)
!514 = !DILocation(line: 117, column: 9, scope: !507)
!515 = !DILocation(line: 117, column: 15, scope: !507)
!516 = !DILocation(line: 117, column: 27, scope: !507)
!517 = !DILocation(line: 118, column: 9, scope: !507)
!518 = !DILocation(line: 113, column: 5, scope: !519)
!519 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 5)
!520 = distinct !{!520, !486, !521}
!521 = !DILocation(line: 119, column: 5, scope: !474)
!522 = !DILocation(line: 121, column: 12, scope: !474)
!523 = !DILocation(line: 121, column: 5, scope: !474)
!524 = distinct !DISubprogram(name: "decodeHexWChars", scope: !4, file: !4, line: 127, type: !525, isLocal: false, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!525 = !DISubroutineType(types: !526)
!526 = !{!30, !42, !30, !14}
!527 = !{!9, null, !14}
!528 = !DILocalVariable(name: "bytes", arg: 1, scope: !524, file: !4, line: 127, type: !42)
!529 = !DILocation(line: 127, column: 41, scope: !524)
!530 = !DILocalVariable(name: "numBytes", arg: 2, scope: !524, file: !4, line: 127, type: !30)
!531 = !DILocation(line: 127, column: 55, scope: !524)
!532 = !DILocalVariable(name: "hex", arg: 3, scope: !524, file: !4, line: 127, type: !14)
!533 = !DILocation(line: 127, column: 81, scope: !524)
!534 = !DILocalVariable(name: "numWritten", scope: !524, file: !4, line: 129, type: !30)
!535 = !DILocation(line: 129, column: 12, scope: !524)
!536 = !DILocation(line: 135, column: 5, scope: !524)
!537 = !DILocation(line: 135, column: 12, scope: !538)
!538 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 1)
!539 = !DILocation(line: 135, column: 25, scope: !538)
!540 = !DILocation(line: 135, column: 23, scope: !538)
!541 = !DILocation(line: 135, column: 34, scope: !538)
!542 = !DILocation(line: 135, column: 47, scope: !543)
!543 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 2)
!544 = !DILocation(line: 135, column: 55, scope: !543)
!545 = !DILocation(line: 135, column: 53, scope: !543)
!546 = !DILocation(line: 135, column: 37, scope: !543)
!547 = !DILocation(line: 135, column: 68, scope: !543)
!548 = !DILocation(line: 135, column: 81, scope: !549)
!549 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 3)
!550 = !DILocation(line: 135, column: 89, scope: !549)
!551 = !DILocation(line: 135, column: 87, scope: !549)
!552 = !DILocation(line: 135, column: 100, scope: !549)
!553 = !DILocation(line: 135, column: 71, scope: !549)
!554 = !DILocation(line: 135, column: 5, scope: !555)
!555 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 4)
!556 = !DILocalVariable(name: "byte", scope: !557, file: !4, line: 137, type: !12)
!557 = distinct !DILexicalBlock(scope: !524, file: !4, line: 136, column: 5)
!558 = !DILocation(line: 137, column: 13, scope: !557)
!559 = !DILocation(line: 138, column: 18, scope: !557)
!560 = !DILocation(line: 138, column: 26, scope: !557)
!561 = !DILocation(line: 138, column: 24, scope: !557)
!562 = !DILocation(line: 138, column: 9, scope: !557)
!563 = !DILocation(line: 139, column: 45, scope: !557)
!564 = !DILocation(line: 139, column: 9, scope: !557)
!565 = !DILocation(line: 139, column: 15, scope: !557)
!566 = !DILocation(line: 139, column: 27, scope: !557)
!567 = !DILocation(line: 140, column: 9, scope: !557)
!568 = !DILocation(line: 135, column: 5, scope: !569)
!569 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 5)
!570 = distinct !{!570, !536, !571}
!571 = !DILocation(line: 141, column: 5, scope: !524)
!572 = !DILocation(line: 143, column: 12, scope: !524)
!573 = !DILocation(line: 143, column: 5, scope: !524)
!574 = distinct !DISubprogram(name: "globalReturnsTrue", scope: !4, file: !4, line: 148, type: !182, isLocal: false, isDefinition: true, scopeLine: 149, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!575 = !DILocation(line: 150, column: 5, scope: !574)
!576 = distinct !DISubprogram(name: "globalReturnsFalse", scope: !4, file: !4, line: 153, type: !182, isLocal: false, isDefinition: true, scopeLine: 154, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!577 = !DILocation(line: 155, column: 5, scope: !576)
!578 = distinct !DISubprogram(name: "globalReturnsTrueOrFalse", scope: !4, file: !4, line: 158, type: !182, isLocal: false, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!579 = !DILocation(line: 160, column: 13, scope: !578)
!580 = !DILocation(line: 160, column: 20, scope: !578)
!581 = !DILocation(line: 160, column: 5, scope: !578)
!582 = distinct !DISubprogram(name: "good1", linkageName: "_Z5good1v", scope: !4, file: !4, line: 179, type: !101, isLocal: false, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!583 = !DILocation(line: 179, column: 16, scope: !582)
!584 = distinct !DISubprogram(name: "good2", linkageName: "_Z5good2v", scope: !4, file: !4, line: 180, type: !101, isLocal: false, isDefinition: true, scopeLine: 180, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!585 = !DILocation(line: 180, column: 16, scope: !584)
!586 = distinct !DISubprogram(name: "good3", linkageName: "_Z5good3v", scope: !4, file: !4, line: 181, type: !101, isLocal: false, isDefinition: true, scopeLine: 181, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!587 = !DILocation(line: 181, column: 16, scope: !586)
!588 = distinct !DISubprogram(name: "good4", linkageName: "_Z5good4v", scope: !4, file: !4, line: 182, type: !101, isLocal: false, isDefinition: true, scopeLine: 182, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!589 = !DILocation(line: 182, column: 16, scope: !588)
!590 = distinct !DISubprogram(name: "good5", linkageName: "_Z5good5v", scope: !4, file: !4, line: 183, type: !101, isLocal: false, isDefinition: true, scopeLine: 183, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!591 = !DILocation(line: 183, column: 16, scope: !590)
!592 = distinct !DISubprogram(name: "good6", linkageName: "_Z5good6v", scope: !4, file: !4, line: 184, type: !101, isLocal: false, isDefinition: true, scopeLine: 184, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!593 = !DILocation(line: 184, column: 16, scope: !592)
!594 = distinct !DISubprogram(name: "good7", linkageName: "_Z5good7v", scope: !4, file: !4, line: 185, type: !101, isLocal: false, isDefinition: true, scopeLine: 185, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!595 = !DILocation(line: 185, column: 16, scope: !594)
!596 = distinct !DISubprogram(name: "good8", linkageName: "_Z5good8v", scope: !4, file: !4, line: 186, type: !101, isLocal: false, isDefinition: true, scopeLine: 186, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!597 = !DILocation(line: 186, column: 16, scope: !596)
!598 = distinct !DISubprogram(name: "good9", linkageName: "_Z5good9v", scope: !4, file: !4, line: 187, type: !101, isLocal: false, isDefinition: true, scopeLine: 187, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!599 = !DILocation(line: 187, column: 16, scope: !598)
!600 = distinct !DISubprogram(name: "bad1", linkageName: "_Z4bad1v", scope: !4, file: !4, line: 190, type: !101, isLocal: false, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!601 = !DILocation(line: 190, column: 15, scope: !600)
!602 = distinct !DISubprogram(name: "bad2", linkageName: "_Z4bad2v", scope: !4, file: !4, line: 191, type: !101, isLocal: false, isDefinition: true, scopeLine: 191, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!603 = !DILocation(line: 191, column: 15, scope: !602)
!604 = distinct !DISubprogram(name: "bad3", linkageName: "_Z4bad3v", scope: !4, file: !4, line: 192, type: !101, isLocal: false, isDefinition: true, scopeLine: 192, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!605 = !DILocation(line: 192, column: 15, scope: !604)
!606 = distinct !DISubprogram(name: "bad4", linkageName: "_Z4bad4v", scope: !4, file: !4, line: 193, type: !101, isLocal: false, isDefinition: true, scopeLine: 193, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!607 = !DILocation(line: 193, column: 15, scope: !606)
!608 = distinct !DISubprogram(name: "bad5", linkageName: "_Z4bad5v", scope: !4, file: !4, line: 194, type: !101, isLocal: false, isDefinition: true, scopeLine: 194, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!609 = !DILocation(line: 194, column: 15, scope: !608)
!610 = distinct !DISubprogram(name: "bad6", linkageName: "_Z4bad6v", scope: !4, file: !4, line: 195, type: !101, isLocal: false, isDefinition: true, scopeLine: 195, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!611 = !DILocation(line: 195, column: 15, scope: !610)
!612 = distinct !DISubprogram(name: "bad7", linkageName: "_Z4bad7v", scope: !4, file: !4, line: 196, type: !101, isLocal: false, isDefinition: true, scopeLine: 196, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!613 = !DILocation(line: 196, column: 15, scope: !612)
!614 = distinct !DISubprogram(name: "bad8", linkageName: "_Z4bad8v", scope: !4, file: !4, line: 197, type: !101, isLocal: false, isDefinition: true, scopeLine: 197, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!615 = !DILocation(line: 197, column: 15, scope: !614)
!616 = distinct !DISubprogram(name: "bad9", linkageName: "_Z4bad9v", scope: !4, file: !4, line: 198, type: !101, isLocal: false, isDefinition: true, scopeLine: 198, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!617 = !DILocation(line: 198, column: 15, scope: !616)
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
declare i32 @printf(i8*, ...) #2
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
*** IR Dump After Inliner for always_inline functions ***
declare i32 @wprintf(i32*, ...) #2
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i32*, i32** %2, align 8, !dbg !314, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !318, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !308, metadata !309), !dbg !310
  %3 = load i32, i32* %2, align 4, !dbg !311, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !312, !effectiveSan !12
  ret void, !dbg !313
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !310, metadata !311), !dbg !312
  %3 = load i16, i16* %2, align 2, !dbg !313, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !313
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !310, metadata !311), !dbg !312
  %3 = load float, float* %2, align 4, !dbg !313, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !313
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !310, metadata !311), !dbg !312
  %3 = load i64, i64* %2, align 8, !dbg !313, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !310, metadata !311), !dbg !312
  %3 = load i64, i64* %2, align 8, !dbg !313, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !310, metadata !311), !dbg !312
  %3 = load i64, i64* %2, align 8, !dbg !313, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !310, metadata !311), !dbg !312
  %3 = load i8, i8* %2, align 1, !dbg !313, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !313
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !310, metadata !311), !dbg !312
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !313, metadata !311), !dbg !314
  %4 = load i32, i32* %2, align 4, !dbg !315, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !316
  store i32 %4, i32* %5, align 4, !dbg !317
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !318
  store i32 0, i32* %6, align 4, !dbg !319
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !320, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !321, !effectiveSan !12
  ret void, !dbg !322
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !308, metadata !309), !dbg !310
  %3 = load i32, i32* %2, align 4, !dbg !311, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !312, !effectiveSan !12
  ret void, !dbg !313
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !310, metadata !311), !dbg !312
  %3 = load i8, i8* %2, align 1, !dbg !313, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !313
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !307 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !310, metadata !311), !dbg !312
  %3 = load double, double* %2, align 8, !dbg !313, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !314, !effectiveSan !12
  ret void, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !311, metadata !312), !dbg !313
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !314, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !315, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !315, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !316, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !317, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !317, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !318, !effectiveSan !12
  ret void, !dbg !319
}
*** IR Dump After Inliner for always_inline functions ***
declare i32 @puts(i8*) #2
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !307 !effectiveSanArgs !310 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !311, metadata !312), !dbg !313
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !314, metadata !312), !dbg !315
  call void @llvm.dbg.declare(metadata i64* %5, metadata !316, metadata !312), !dbg !317
  store i64 0, i64* %5, align 8, !dbg !318
  br label %6, !dbg !320

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !321, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !324, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !325
  br i1 %9, label %10, label %20, !dbg !326

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !328, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !330, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !328
  %14 = load i8, i8* %13, align 1, !dbg !328, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !328
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !331, !effectiveSan !12
  br label %17, !dbg !332

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !333, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !333
  store i64 %19, i64* %5, align 8, !dbg !333
  br label %6, !dbg !335, !llvm.loop !336

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !339, !effectiveSan !12
  ret void, !dbg !340
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32) #4
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #5
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !307 !effectiveSanArgs !310 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !311, metadata !312), !dbg !313
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !314, metadata !312), !dbg !315
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !316, metadata !312), !dbg !317
  call void @llvm.dbg.declare(metadata i64* %7, metadata !318, metadata !312), !dbg !319
  store i64 0, i64* %7, align 8, !dbg !319
  br label %9, !dbg !320

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !321, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !323, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !324
  br i1 %12, label %13, label %32, !dbg !325

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !326, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !328, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !329
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !326
  %18 = load i8, i8* %17, align 1, !dbg !326, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !326
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !330, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !330
  br i1 %21, label %22, label %32, !dbg !331

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !332, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !334, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !335
  %26 = add i64 %25, 1, !dbg !336
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !332
  %28 = load i8, i8* %27, align 1, !dbg !332, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !332
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !337, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !337
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !338

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !340, metadata !312), !dbg !342
  %35 = load i8*, i8** %6, align 8, !dbg !343, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !344, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !345
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !343
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !346, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !347, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !347
  %42 = load i8*, i8** %4, align 8, !dbg !348, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !349, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !348
  store i8 %41, i8* %44, align 1, !dbg !350
  %45 = load i64, i64* %7, align 8, !dbg !351, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !351
  store i64 %46, i64* %7, align 8, !dbg !351
  br label %9, !dbg !352, !llvm.loop !354

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !356, !effectiveSan !30
  ret i64 %48, !dbg !357
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
declare i32 @iswxdigit(i32) #5
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
declare i32 @swscanf(i32*, i32*, ...) #5
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !307 !effectiveSanArgs !310 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !311, metadata !312), !dbg !313
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !314, metadata !312), !dbg !315
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !316, metadata !312), !dbg !317
  call void @llvm.dbg.declare(metadata i64* %7, metadata !318, metadata !312), !dbg !319
  store i64 0, i64* %7, align 8, !dbg !319
  br label %9, !dbg !320

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !321, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !323, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !324
  br i1 %12, label %13, label %30, !dbg !325

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !326, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !328, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !329
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !326
  %18 = load i32, i32* %17, align 4, !dbg !326, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !330, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !330
  br i1 %20, label %21, label %30, !dbg !331

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !332, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !334, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !335
  %25 = add i64 %24, 1, !dbg !336
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !332
  %27 = load i32, i32* %26, align 4, !dbg !332, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !337, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !337
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !338

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !340, metadata !312), !dbg !342
  %33 = load i32*, i32** %6, align 8, !dbg !343, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !344, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !345
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !343
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !346, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !347, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !347
  %40 = load i8*, i8** %4, align 8, !dbg !348, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !349, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !348
  store i8 %39, i8* %42, align 1, !dbg !350
  %43 = load i64, i64* %7, align 8, !dbg !351, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !351
  store i64 %44, i64* %7, align 8, !dbg !351
  br label %9, !dbg !352, !llvm.loop !354

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !356, !effectiveSan !30
  ret i64 %46, !dbg !357
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !307 !effectiveSanArgs !5 {
  ret i32 1, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !307 !effectiveSanArgs !5 {
  ret i32 0, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
declare i32 @rand() #5
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !307 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !308, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !309
  ret i32 %2, !dbg !310
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !307 !effectiveSanArgs !5 {
  ret void, !dbg !308
}
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = '../../testcasesupport/io.c'
source_filename = "../../testcasesupport/io.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [5 x i32] [i32 37, i32 108, i32 115, i32 10, i32 0], align 4, !effectiveSan !0
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [5 x i8] c"%hd\0A\00", align 1, !effectiveSan !0
@.str.4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1, !effectiveSan !0
@.str.5 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1, !effectiveSan !0
@.str.6 = private unnamed_addr constant [5 x i8] c"%zu\0A\00", align 1, !effectiveSan !0
@.str.7 = private unnamed_addr constant [6 x i8] c"%02x\0A\00", align 1, !effectiveSan !0
@.str.8 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1, !effectiveSan !0
@.str.9 = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1, !effectiveSan !0
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1, !effectiveSan !0
@.str.11 = private unnamed_addr constant [10 x i8] c"%d -- %d\0A\00", align 1, !effectiveSan !0
@.str.12 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1, !effectiveSan !0
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1, !effectiveSan !0
@.str.14 = private unnamed_addr constant [5 x i32] [i32 37, i32 48, i32 50, i32 120, i32 0], align 4, !effectiveSan !0
@GLOBAL_CONST_TRUE = constant i32 1, align 4, !dbg !1, !effectiveSan !60
@GLOBAL_CONST_FALSE = constant i32 0, align 4, !dbg !65, !effectiveSan !60
@GLOBAL_CONST_FIVE = constant i32 5, align 4, !dbg !67, !effectiveSan !60
@globalTrue = global i32 1, align 4, !dbg !69, !effectiveSan !17
@globalFalse = global i32 0, align 4, !dbg !71, !effectiveSan !17
@globalFive = global i32 5, align 4, !dbg !73, !effectiveSan !17
@globalArgc = global i32 0, align 4, !dbg !75, !effectiveSan !17
@globalArgv = global i8** null, align 8, !dbg !77, !effectiveSan !62

; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}

declare i32 @wprintf(i32*, ...) #2

; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}

; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}

; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}

; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}

; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}

; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}

; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}

; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}

; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}

; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}

; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}

; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}

; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}

declare i32 @puts(i8*) #2

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32) #4

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #7, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #7, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #7, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}

; Function Attrs: nounwind
declare i32 @iswxdigit(i32) #5

; Function Attrs: nounwind
declare i32 @swscanf(i32*, i32*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #7, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}

; Function Attrs: nounwind
declare i32 @rand() #5

; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!3}
!llvm.module.flags = !{!304, !305}
!llvm.ident = !{!306}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIGlobalVariableExpression(var: !2)
!2 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_TRUE", scope: !3, file: !4, line: 166, type: !61, isLocal: false, isDefinition: true)
!3 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !4, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5, retainedTypes: !6, globals: !64, imports: !79)
!4 = !DIFile(filename: "../../testcasesupport/io.c", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!5 = !{}
!6 = !{!7, !8, !9, !0, !12, !13, !14, !17, !18, !19, !20, !21, !22, !23, !24, !25, !29, !30, !33, !34, !11, !35, !36, !16, !40, !41, !42, !43, !44, !45, !54, !46, !56, !57, !58, !59, !10, !15, !60, !62}
!7 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!16 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!23 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !26, line: 27, baseType: !27)
!26 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !28, line: 43, baseType: !23)
!28 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !31, line: 62, baseType: !32)
!31 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!32 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!34 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 64, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 2)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!41 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !48)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !49, line: 100, baseType: !50)
!49 = !DIFile(filename: "../../testcasesupport/std_testcase.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !49, line: 96, size: 64, elements: !51, identifier: "_ZTS14_twoIntsStruct")
!51 = !{!52, !53}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !50, file: !49, line: 98, baseType: !12, size: 32)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !50, file: !49, line: 99, baseType: !12, size: 32, offset: 32)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64)
!55 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !50)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!64 = !{!1, !65, !67, !69, !71, !73, !75, !77}
!65 = !DIGlobalVariableExpression(var: !66)
!66 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FALSE", scope: !3, file: !4, line: 167, type: !61, isLocal: false, isDefinition: true)
!67 = !DIGlobalVariableExpression(var: !68)
!68 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FIVE", scope: !3, file: !4, line: 168, type: !61, isLocal: false, isDefinition: true)
!69 = !DIGlobalVariableExpression(var: !70)
!70 = distinct !DIGlobalVariable(name: "globalTrue", scope: !3, file: !4, line: 173, type: !12, isLocal: false, isDefinition: true)
!71 = !DIGlobalVariableExpression(var: !72)
!72 = distinct !DIGlobalVariable(name: "globalFalse", scope: !3, file: !4, line: 174, type: !12, isLocal: false, isDefinition: true)
!73 = !DIGlobalVariableExpression(var: !74)
!74 = distinct !DIGlobalVariable(name: "globalFive", scope: !3, file: !4, line: 175, type: !12, isLocal: false, isDefinition: true)
!75 = !DIGlobalVariableExpression(var: !76)
!76 = distinct !DIGlobalVariable(name: "globalArgc", scope: !3, file: !4, line: 206, type: !12, isLocal: false, isDefinition: true)
!77 = !DIGlobalVariableExpression(var: !78)
!78 = distinct !DIGlobalVariable(name: "globalArgv", scope: !3, file: !4, line: 207, type: !63, isLocal: false, isDefinition: true)
!79 = !{!80, !87, !93, !99, !103, !108, !112, !116, !120, !130, !134, !138, !142, !146, !150, !154, !158, !162, !166, !172, !176, !180, !184, !188, !192, !197, !201, !205, !207, !213, !217, !225, !227, !231, !235, !239, !243, !248, !252, !257, !258, !259, !260, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303}
!80 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !83, line: 52)
!81 = !DINamespace(name: "std", scope: null, file: !82, line: 236)
!82 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!83 = !DISubprogram(name: "abs", scope: !84, file: !84, line: 837, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!84 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!85 = !DISubroutineType(types: !86)
!86 = !{!12, !12}
!87 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !88, line: 127)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !84, line: 62, baseType: !89)
!89 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 58, size: 64, elements: !90, identifier: "_ZTS5div_t")
!90 = !{!91, !92}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !89, file: !84, line: 60, baseType: !12, size: 32)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !89, file: !84, line: 61, baseType: !12, size: 32, offset: 32)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !94, line: 128)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !84, line: 70, baseType: !95)
!95 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 66, size: 128, elements: !96, identifier: "_ZTS6ldiv_t")
!96 = !{!97, !98}
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !95, file: !84, line: 68, baseType: !23, size: 64)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !95, file: !84, line: 69, baseType: !23, size: 64, offset: 64)
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !100, line: 130)
!100 = !DISubprogram(name: "abort", scope: !84, file: !84, line: 588, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !104, line: 134)
!104 = !DISubprogram(name: "atexit", scope: !84, file: !84, line: 592, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!12, !107}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64)
!108 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !109, line: 140)
!109 = !DISubprogram(name: "atof", scope: !84, file: !84, line: 101, type: !110, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!110 = !DISubroutineType(types: !111)
!111 = !{!44, !9}
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !84, file: !84, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!12, !9}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !84, file: !84, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!23, !9}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !84, file: !84, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !124, !124, !30, !30, !126}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !84, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!12, !124, !124}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !131, line: 144)
!131 = !DISubprogram(name: "calloc", scope: !84, file: !84, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!0, !30, !30}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !135, line: 145)
!135 = !DISubprogram(name: "div", scope: !84, file: !84, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!88, !12, !12}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !139, line: 146)
!139 = !DISubprogram(name: "exit", scope: !84, file: !84, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !12}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !143, line: 147)
!143 = !DISubprogram(name: "free", scope: !84, file: !84, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !0}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !147, line: 148)
!147 = !DISubprogram(name: "getenv", scope: !84, file: !84, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!33, !9}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !151, line: 149)
!151 = !DISubprogram(name: "labs", scope: !84, file: !84, line: 838, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{!23, !23}
!154 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !155, line: 150)
!155 = !DISubprogram(name: "ldiv", scope: !84, file: !84, line: 851, type: !156, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!156 = !DISubroutineType(types: !157)
!157 = !{!94, !23, !23}
!158 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !159, line: 151)
!159 = !DISubprogram(name: "malloc", scope: !84, file: !84, line: 539, type: !160, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!160 = !DISubroutineType(types: !161)
!161 = !{!0, !30}
!162 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !163, line: 153)
!163 = !DISubprogram(name: "mblen", scope: !84, file: !84, line: 919, type: !164, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!164 = !DISubroutineType(types: !165)
!165 = !{!12, !9, !30}
!166 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !167, line: 154)
!167 = !DISubprogram(name: "mbstowcs", scope: !84, file: !84, line: 930, type: !168, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!168 = !DISubroutineType(types: !169)
!169 = !{!30, !170, !171, !30}
!170 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !35)
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !9)
!172 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !173, line: 155)
!173 = !DISubprogram(name: "mbtowc", scope: !84, file: !84, line: 922, type: !174, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!174 = !DISubroutineType(types: !175)
!175 = !{!12, !170, !171, !30}
!176 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !177, line: 157)
!177 = !DISubprogram(name: "qsort", scope: !84, file: !84, line: 827, type: !178, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !0, !30, !30, !126}
!180 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !181, line: 163)
!181 = !DISubprogram(name: "rand", scope: !84, file: !84, line: 453, type: !182, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!182 = !DISubroutineType(types: !183)
!183 = !{!12}
!184 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !185, line: 164)
!185 = !DISubprogram(name: "realloc", scope: !84, file: !84, line: 549, type: !186, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!186 = !DISubroutineType(types: !187)
!187 = !{!0, !0, !30}
!188 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !189, line: 165)
!189 = !DISubprogram(name: "srand", scope: !84, file: !84, line: 455, type: !190, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!190 = !DISubroutineType(types: !191)
!191 = !{null, !41}
!192 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !193, line: 166)
!193 = !DISubprogram(name: "strtod", scope: !84, file: !84, line: 117, type: !194, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!194 = !DISubroutineType(types: !195)
!195 = !{!44, !171, !196}
!196 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !63)
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !198, line: 167)
!198 = !DISubprogram(name: "strtol", scope: !84, file: !84, line: 176, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!23, !171, !196, !12}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !202, line: 168)
!202 = !DISubprogram(name: "strtoul", scope: !84, file: !84, line: 180, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!32, !171, !196, !12}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !206, line: 169)
!206 = !DISubprogram(name: "system", scope: !84, file: !84, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !208, line: 171)
!208 = !DISubprogram(name: "wcstombs", scope: !84, file: !84, line: 933, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!30, !211, !212, !30}
!211 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !33)
!212 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !14)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !214, line: 172)
!214 = !DISubprogram(name: "wctomb", scope: !84, file: !84, line: 926, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!12, !33, !16}
!217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !219, line: 200)
!218 = !DINamespace(name: "__gnu_cxx", scope: null, file: !82, line: 262)
!219 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !84, line: 80, baseType: !220)
!220 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 76, size: 128, elements: !221, identifier: "_ZTS7lldiv_t")
!221 = !{!222, !224}
!222 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !220, file: !84, line: 78, baseType: !223, size: 64)
!223 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !220, file: !84, line: 79, baseType: !223, size: 64, offset: 64)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !226, line: 206)
!226 = !DISubprogram(name: "_Exit", scope: !84, file: !84, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !228, line: 210)
!228 = !DISubprogram(name: "llabs", scope: !84, file: !84, line: 841, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!223, !223}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !232, line: 216)
!232 = !DISubprogram(name: "lldiv", scope: !84, file: !84, line: 855, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!219, !223, !223}
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !236, line: 227)
!236 = !DISubprogram(name: "atoll", scope: !84, file: !84, line: 112, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!223, !9}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !240, line: 228)
!240 = !DISubprogram(name: "strtoll", scope: !84, file: !84, line: 200, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!223, !171, !196, !12}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !244, line: 229)
!244 = !DISubprogram(name: "strtoull", scope: !84, file: !84, line: 205, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!247, !171, !196, !12}
!247 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !249, line: 231)
!249 = !DISubprogram(name: "strtof", scope: !84, file: !84, line: 123, type: !250, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!250 = !DISubroutineType(types: !251)
!251 = !{!21, !171, !196}
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !253, line: 232)
!253 = !DISubprogram(name: "strtold", scope: !84, file: !84, line: 126, type: !254, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!254 = !DISubroutineType(types: !255)
!255 = !{!256, !171, !196}
!256 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !219, line: 240)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !226, line: 242)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !228, line: 244)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !261, line: 245)
!261 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !218, file: !262, line: 213, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!262 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !232, line: 246)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !236, line: 248)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !249, line: 249)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !240, line: 250)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !244, line: 251)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !253, line: 252)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !100, line: 38)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !104, line: 39)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !139, line: 40)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !88, line: 51)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !94, line: 52)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !275, line: 54)
!275 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !81, file: !276, line: 102, type: !277, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!276 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!277 = !DISubroutineType(types: !278)
!278 = !{!279, !279}
!279 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !109, line: 55)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !113, line: 56)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !117, line: 57)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !121, line: 58)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !131, line: 59)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !261, line: 60)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !143, line: 61)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !147, line: 62)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !151, line: 63)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !155, line: 64)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !159, line: 65)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !163, line: 67)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !167, line: 68)
!293 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !173, line: 69)
!294 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !177, line: 71)
!295 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !181, line: 72)
!296 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !185, line: 73)
!297 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !189, line: 74)
!298 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !193, line: 75)
!299 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !198, line: 76)
!300 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !202, line: 77)
!301 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !206, line: 78)
!302 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !208, line: 80)
!303 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !214, line: 81)
!304 = !{i32 2, !"Dwarf Version", i32 4}
!305 = !{i32 2, !"Debug Info Version", i32 3}
!306 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!307 = distinct !DISubprogram(name: "printLine", scope: !4, file: !4, line: 11, type: !308, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!308 = !DISubroutineType(types: !309)
!309 = !{null, !9}
!310 = !{!9}
!311 = !DILocalVariable(name: "line", arg: 1, scope: !307, file: !4, line: 11, type: !9)
!312 = !DIExpression()
!313 = !DILocation(line: 11, column: 30, scope: !307)
!314 = !DILocation(line: 13, column: 8, scope: !315)
!315 = distinct !DILexicalBlock(scope: !307, file: !4, line: 13, column: 8)
!316 = !DILocation(line: 13, column: 13, scope: !315)
!317 = !DILocation(line: 13, column: 8, scope: !307)
!318 = !DILocation(line: 15, column: 24, scope: !319)
!319 = distinct !DILexicalBlock(scope: !315, file: !4, line: 14, column: 5)
!320 = !DILocation(line: 15, column: 9, scope: !319)
!321 = !DILocation(line: 16, column: 5, scope: !319)
!322 = !DILocation(line: 17, column: 1, scope: !307)
!323 = distinct !DISubprogram(name: "printWLine", scope: !4, file: !4, line: 19, type: !324, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!324 = !DISubroutineType(types: !325)
!325 = !{null, !14}
!326 = !{!14}
!327 = !DILocalVariable(name: "line", arg: 1, scope: !323, file: !4, line: 19, type: !14)
!328 = !DILocation(line: 19, column: 34, scope: !323)
!329 = !DILocation(line: 21, column: 8, scope: !330)
!330 = distinct !DILexicalBlock(scope: !323, file: !4, line: 21, column: 8)
!331 = !DILocation(line: 21, column: 13, scope: !330)
!332 = !DILocation(line: 21, column: 8, scope: !323)
!333 = !DILocation(line: 23, column: 27, scope: !334)
!334 = distinct !DILexicalBlock(scope: !330, file: !4, line: 22, column: 5)
!335 = !DILocation(line: 23, column: 9, scope: !334)
!336 = !DILocation(line: 24, column: 5, scope: !334)
!337 = !DILocation(line: 25, column: 1, scope: !323)
!338 = distinct !DISubprogram(name: "printIntLine", scope: !4, file: !4, line: 27, type: !140, isLocal: false, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!339 = !DILocalVariable(name: "intNumber", arg: 1, scope: !338, file: !4, line: 27, type: !12)
!340 = !DILocation(line: 27, column: 24, scope: !338)
!341 = !DILocation(line: 29, column: 20, scope: !338)
!342 = !DILocation(line: 29, column: 5, scope: !338)
!343 = !DILocation(line: 30, column: 1, scope: !338)
!344 = distinct !DISubprogram(name: "printShortLine", scope: !4, file: !4, line: 32, type: !345, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!345 = !DISubroutineType(types: !346)
!346 = !{null, !19}
!347 = !DILocalVariable(name: "shortNumber", arg: 1, scope: !344, file: !4, line: 32, type: !19)
!348 = !DILocation(line: 32, column: 28, scope: !344)
!349 = !DILocation(line: 34, column: 21, scope: !344)
!350 = !DILocation(line: 34, column: 5, scope: !344)
!351 = !DILocation(line: 35, column: 1, scope: !344)
!352 = distinct !DISubprogram(name: "printFloatLine", scope: !4, file: !4, line: 37, type: !353, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!353 = !DISubroutineType(types: !354)
!354 = !{null, !21}
!355 = !DILocalVariable(name: "floatNumber", arg: 1, scope: !352, file: !4, line: 37, type: !21)
!356 = !DILocation(line: 37, column: 28, scope: !352)
!357 = !DILocation(line: 39, column: 20, scope: !352)
!358 = !DILocation(line: 39, column: 5, scope: !352)
!359 = !DILocation(line: 40, column: 1, scope: !352)
!360 = distinct !DISubprogram(name: "printLongLine", scope: !4, file: !4, line: 42, type: !361, isLocal: false, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!361 = !DISubroutineType(types: !362)
!362 = !{null, !23}
!363 = !DILocalVariable(name: "longNumber", arg: 1, scope: !360, file: !4, line: 42, type: !23)
!364 = !DILocation(line: 42, column: 26, scope: !360)
!365 = !DILocation(line: 44, column: 21, scope: !360)
!366 = !DILocation(line: 44, column: 5, scope: !360)
!367 = !DILocation(line: 45, column: 1, scope: !360)
!368 = distinct !DISubprogram(name: "printLongLongLine", scope: !4, file: !4, line: 47, type: !369, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!369 = !DISubroutineType(types: !370)
!370 = !{null, !25}
!371 = !DILocalVariable(name: "longLongIntNumber", arg: 1, scope: !368, file: !4, line: 47, type: !25)
!372 = !DILocation(line: 47, column: 33, scope: !368)
!373 = !DILocation(line: 49, column: 29, scope: !368)
!374 = !DILocation(line: 49, column: 5, scope: !368)
!375 = !DILocation(line: 50, column: 1, scope: !368)
!376 = distinct !DISubprogram(name: "printSizeTLine", scope: !4, file: !4, line: 52, type: !377, isLocal: false, isDefinition: true, scopeLine: 53, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!377 = !DISubroutineType(types: !378)
!378 = !{null, !30}
!379 = !DILocalVariable(name: "sizeTNumber", arg: 1, scope: !376, file: !4, line: 52, type: !30)
!380 = !DILocation(line: 52, column: 29, scope: !376)
!381 = !DILocation(line: 54, column: 21, scope: !376)
!382 = !DILocation(line: 54, column: 5, scope: !376)
!383 = !DILocation(line: 55, column: 1, scope: !376)
!384 = distinct !DISubprogram(name: "printHexCharLine", scope: !4, file: !4, line: 57, type: !385, isLocal: false, isDefinition: true, scopeLine: 58, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!385 = !DISubroutineType(types: !386)
!386 = !{null, !11}
!387 = !DILocalVariable(name: "charHex", arg: 1, scope: !384, file: !4, line: 57, type: !11)
!388 = !DILocation(line: 57, column: 29, scope: !384)
!389 = !DILocation(line: 59, column: 22, scope: !384)
!390 = !DILocation(line: 59, column: 5, scope: !384)
!391 = !DILocation(line: 60, column: 1, scope: !384)
!392 = distinct !DISubprogram(name: "printWcharLine", scope: !4, file: !4, line: 62, type: !393, isLocal: false, isDefinition: true, scopeLine: 63, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!393 = !DISubroutineType(types: !394)
!394 = !{null, !16}
!395 = !DILocalVariable(name: "wideChar", arg: 1, scope: !392, file: !4, line: 62, type: !16)
!396 = !DILocation(line: 62, column: 29, scope: !392)
!397 = !DILocalVariable(name: "s", scope: !392, file: !4, line: 66, type: !37)
!398 = !DILocation(line: 66, column: 13, scope: !392)
!399 = !DILocation(line: 67, column: 16, scope: !392)
!400 = !DILocation(line: 67, column: 9, scope: !392)
!401 = !DILocation(line: 67, column: 14, scope: !392)
!402 = !DILocation(line: 68, column: 9, scope: !392)
!403 = !DILocation(line: 68, column: 14, scope: !392)
!404 = !DILocation(line: 69, column: 21, scope: !392)
!405 = !DILocation(line: 69, column: 5, scope: !392)
!406 = !DILocation(line: 70, column: 1, scope: !392)
!407 = distinct !DISubprogram(name: "printUnsignedLine", scope: !4, file: !4, line: 72, type: !190, isLocal: false, isDefinition: true, scopeLine: 73, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!408 = !DILocalVariable(name: "unsignedNumber", arg: 1, scope: !407, file: !4, line: 72, type: !41)
!409 = !DILocation(line: 72, column: 33, scope: !407)
!410 = !DILocation(line: 74, column: 20, scope: !407)
!411 = !DILocation(line: 74, column: 5, scope: !407)
!412 = !DILocation(line: 75, column: 1, scope: !407)
!413 = distinct !DISubprogram(name: "printHexUnsignedCharLine", scope: !4, file: !4, line: 77, type: !414, isLocal: false, isDefinition: true, scopeLine: 78, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!414 = !DISubroutineType(types: !415)
!415 = !{null, !7}
!416 = !DILocalVariable(name: "unsignedCharacter", arg: 1, scope: !413, file: !4, line: 77, type: !7)
!417 = !DILocation(line: 77, column: 45, scope: !413)
!418 = !DILocation(line: 79, column: 22, scope: !413)
!419 = !DILocation(line: 79, column: 5, scope: !413)
!420 = !DILocation(line: 80, column: 1, scope: !413)
!421 = distinct !DISubprogram(name: "printDoubleLine", scope: !4, file: !4, line: 82, type: !422, isLocal: false, isDefinition: true, scopeLine: 83, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!422 = !DISubroutineType(types: !423)
!423 = !{null, !44}
!424 = !DILocalVariable(name: "doubleNumber", arg: 1, scope: !421, file: !4, line: 82, type: !44)
!425 = !DILocation(line: 82, column: 29, scope: !421)
!426 = !DILocation(line: 84, column: 20, scope: !421)
!427 = !DILocation(line: 84, column: 5, scope: !421)
!428 = !DILocation(line: 85, column: 1, scope: !421)
!429 = distinct !DISubprogram(name: "printStructLine", scope: !4, file: !4, line: 87, type: !430, isLocal: false, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!430 = !DISubroutineType(types: !431)
!431 = !{null, !46}
!432 = !{!54}
!433 = !DILocalVariable(name: "structTwoIntsStruct", arg: 1, scope: !429, file: !4, line: 87, type: !46)
!434 = !DILocation(line: 87, column: 45, scope: !429)
!435 = !DILocation(line: 89, column: 26, scope: !429)
!436 = !DILocation(line: 89, column: 47, scope: !429)
!437 = !DILocation(line: 89, column: 55, scope: !429)
!438 = !DILocation(line: 89, column: 76, scope: !429)
!439 = !DILocation(line: 89, column: 5, scope: !429)
!440 = !DILocation(line: 90, column: 1, scope: !429)
!441 = distinct !DISubprogram(name: "printBytesLine", scope: !4, file: !4, line: 92, type: !442, isLocal: false, isDefinition: true, scopeLine: 93, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!442 = !DISubroutineType(types: !443)
!443 = !{null, !57, !30}
!444 = !{!9, null}
!445 = !DILocalVariable(name: "bytes", arg: 1, scope: !441, file: !4, line: 92, type: !57)
!446 = !DILocation(line: 92, column: 43, scope: !441)
!447 = !DILocalVariable(name: "numBytes", arg: 2, scope: !441, file: !4, line: 92, type: !30)
!448 = !DILocation(line: 92, column: 57, scope: !441)
!449 = !DILocalVariable(name: "i", scope: !441, file: !4, line: 94, type: !30)
!450 = !DILocation(line: 94, column: 12, scope: !441)
!451 = !DILocation(line: 95, column: 12, scope: !452)
!452 = distinct !DILexicalBlock(scope: !441, file: !4, line: 95, column: 5)
!453 = !DILocation(line: 95, column: 10, scope: !452)
!454 = !DILocation(line: 95, column: 17, scope: !455)
!455 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 1)
!456 = distinct !DILexicalBlock(scope: !452, file: !4, line: 95, column: 5)
!457 = !DILocation(line: 95, column: 21, scope: !455)
!458 = !DILocation(line: 95, column: 19, scope: !455)
!459 = !DILocation(line: 95, column: 5, scope: !460)
!460 = !DILexicalBlockFile(scope: !452, file: !4, discriminator: 1)
!461 = !DILocation(line: 97, column: 24, scope: !462)
!462 = distinct !DILexicalBlock(scope: !456, file: !4, line: 96, column: 5)
!463 = !DILocation(line: 97, column: 30, scope: !462)
!464 = !DILocation(line: 97, column: 9, scope: !462)
!465 = !DILocation(line: 98, column: 5, scope: !462)
!466 = !DILocation(line: 95, column: 31, scope: !467)
!467 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 2)
!468 = !DILocation(line: 95, column: 5, scope: !467)
!469 = distinct !{!469, !470, !471}
!470 = !DILocation(line: 95, column: 5, scope: !452)
!471 = !DILocation(line: 98, column: 5, scope: !452)
!472 = !DILocation(line: 99, column: 5, scope: !441)
!473 = !DILocation(line: 100, column: 1, scope: !441)
!474 = distinct !DISubprogram(name: "decodeHexChars", scope: !4, file: !4, line: 105, type: !475, isLocal: false, isDefinition: true, scopeLine: 106, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!475 = !DISubroutineType(types: !476)
!476 = !{!30, !42, !30, !9}
!477 = !{!9, null, !9}
!478 = !DILocalVariable(name: "bytes", arg: 1, scope: !474, file: !4, line: 105, type: !42)
!479 = !DILocation(line: 105, column: 39, scope: !474)
!480 = !DILocalVariable(name: "numBytes", arg: 2, scope: !474, file: !4, line: 105, type: !30)
!481 = !DILocation(line: 105, column: 53, scope: !474)
!482 = !DILocalVariable(name: "hex", arg: 3, scope: !474, file: !4, line: 105, type: !9)
!483 = !DILocation(line: 105, column: 76, scope: !474)
!484 = !DILocalVariable(name: "numWritten", scope: !474, file: !4, line: 107, type: !30)
!485 = !DILocation(line: 107, column: 12, scope: !474)
!486 = !DILocation(line: 113, column: 5, scope: !474)
!487 = !DILocation(line: 113, column: 12, scope: !488)
!488 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 1)
!489 = !DILocation(line: 113, column: 25, scope: !488)
!490 = !DILocation(line: 113, column: 23, scope: !488)
!491 = !DILocation(line: 113, column: 34, scope: !488)
!492 = !DILocation(line: 113, column: 46, scope: !493)
!493 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 2)
!494 = !DILocation(line: 113, column: 54, scope: !493)
!495 = !DILocation(line: 113, column: 52, scope: !493)
!496 = !DILocation(line: 113, column: 37, scope: !493)
!497 = !DILocation(line: 113, column: 67, scope: !493)
!498 = !DILocation(line: 113, column: 79, scope: !499)
!499 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 3)
!500 = !DILocation(line: 113, column: 87, scope: !499)
!501 = !DILocation(line: 113, column: 85, scope: !499)
!502 = !DILocation(line: 113, column: 98, scope: !499)
!503 = !DILocation(line: 113, column: 70, scope: !499)
!504 = !DILocation(line: 113, column: 5, scope: !505)
!505 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 4)
!506 = !DILocalVariable(name: "byte", scope: !507, file: !4, line: 115, type: !12)
!507 = distinct !DILexicalBlock(scope: !474, file: !4, line: 114, column: 5)
!508 = !DILocation(line: 115, column: 13, scope: !507)
!509 = !DILocation(line: 116, column: 17, scope: !507)
!510 = !DILocation(line: 116, column: 25, scope: !507)
!511 = !DILocation(line: 116, column: 23, scope: !507)
!512 = !DILocation(line: 116, column: 9, scope: !507)
!513 = !DILocation(line: 117, column: 45, scope: !507)
!514 = !DILocation(line: 117, column: 9, scope: !507)
!515 = !DILocation(line: 117, column: 15, scope: !507)
!516 = !DILocation(line: 117, column: 27, scope: !507)
!517 = !DILocation(line: 118, column: 9, scope: !507)
!518 = !DILocation(line: 113, column: 5, scope: !519)
!519 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 5)
!520 = distinct !{!520, !486, !521}
!521 = !DILocation(line: 119, column: 5, scope: !474)
!522 = !DILocation(line: 121, column: 12, scope: !474)
!523 = !DILocation(line: 121, column: 5, scope: !474)
!524 = distinct !DISubprogram(name: "decodeHexWChars", scope: !4, file: !4, line: 127, type: !525, isLocal: false, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!525 = !DISubroutineType(types: !526)
!526 = !{!30, !42, !30, !14}
!527 = !{!9, null, !14}
!528 = !DILocalVariable(name: "bytes", arg: 1, scope: !524, file: !4, line: 127, type: !42)
!529 = !DILocation(line: 127, column: 41, scope: !524)
!530 = !DILocalVariable(name: "numBytes", arg: 2, scope: !524, file: !4, line: 127, type: !30)
!531 = !DILocation(line: 127, column: 55, scope: !524)
!532 = !DILocalVariable(name: "hex", arg: 3, scope: !524, file: !4, line: 127, type: !14)
!533 = !DILocation(line: 127, column: 81, scope: !524)
!534 = !DILocalVariable(name: "numWritten", scope: !524, file: !4, line: 129, type: !30)
!535 = !DILocation(line: 129, column: 12, scope: !524)
!536 = !DILocation(line: 135, column: 5, scope: !524)
!537 = !DILocation(line: 135, column: 12, scope: !538)
!538 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 1)
!539 = !DILocation(line: 135, column: 25, scope: !538)
!540 = !DILocation(line: 135, column: 23, scope: !538)
!541 = !DILocation(line: 135, column: 34, scope: !538)
!542 = !DILocation(line: 135, column: 47, scope: !543)
!543 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 2)
!544 = !DILocation(line: 135, column: 55, scope: !543)
!545 = !DILocation(line: 135, column: 53, scope: !543)
!546 = !DILocation(line: 135, column: 37, scope: !543)
!547 = !DILocation(line: 135, column: 68, scope: !543)
!548 = !DILocation(line: 135, column: 81, scope: !549)
!549 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 3)
!550 = !DILocation(line: 135, column: 89, scope: !549)
!551 = !DILocation(line: 135, column: 87, scope: !549)
!552 = !DILocation(line: 135, column: 100, scope: !549)
!553 = !DILocation(line: 135, column: 71, scope: !549)
!554 = !DILocation(line: 135, column: 5, scope: !555)
!555 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 4)
!556 = !DILocalVariable(name: "byte", scope: !557, file: !4, line: 137, type: !12)
!557 = distinct !DILexicalBlock(scope: !524, file: !4, line: 136, column: 5)
!558 = !DILocation(line: 137, column: 13, scope: !557)
!559 = !DILocation(line: 138, column: 18, scope: !557)
!560 = !DILocation(line: 138, column: 26, scope: !557)
!561 = !DILocation(line: 138, column: 24, scope: !557)
!562 = !DILocation(line: 138, column: 9, scope: !557)
!563 = !DILocation(line: 139, column: 45, scope: !557)
!564 = !DILocation(line: 139, column: 9, scope: !557)
!565 = !DILocation(line: 139, column: 15, scope: !557)
!566 = !DILocation(line: 139, column: 27, scope: !557)
!567 = !DILocation(line: 140, column: 9, scope: !557)
!568 = !DILocation(line: 135, column: 5, scope: !569)
!569 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 5)
!570 = distinct !{!570, !536, !571}
!571 = !DILocation(line: 141, column: 5, scope: !524)
!572 = !DILocation(line: 143, column: 12, scope: !524)
!573 = !DILocation(line: 143, column: 5, scope: !524)
!574 = distinct !DISubprogram(name: "globalReturnsTrue", scope: !4, file: !4, line: 148, type: !182, isLocal: false, isDefinition: true, scopeLine: 149, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!575 = !DILocation(line: 150, column: 5, scope: !574)
!576 = distinct !DISubprogram(name: "globalReturnsFalse", scope: !4, file: !4, line: 153, type: !182, isLocal: false, isDefinition: true, scopeLine: 154, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!577 = !DILocation(line: 155, column: 5, scope: !576)
!578 = distinct !DISubprogram(name: "globalReturnsTrueOrFalse", scope: !4, file: !4, line: 158, type: !182, isLocal: false, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!579 = !DILocation(line: 160, column: 13, scope: !578)
!580 = !DILocation(line: 160, column: 20, scope: !578)
!581 = !DILocation(line: 160, column: 5, scope: !578)
!582 = distinct !DISubprogram(name: "good1", linkageName: "_Z5good1v", scope: !4, file: !4, line: 179, type: !101, isLocal: false, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!583 = !DILocation(line: 179, column: 16, scope: !582)
!584 = distinct !DISubprogram(name: "good2", linkageName: "_Z5good2v", scope: !4, file: !4, line: 180, type: !101, isLocal: false, isDefinition: true, scopeLine: 180, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!585 = !DILocation(line: 180, column: 16, scope: !584)
!586 = distinct !DISubprogram(name: "good3", linkageName: "_Z5good3v", scope: !4, file: !4, line: 181, type: !101, isLocal: false, isDefinition: true, scopeLine: 181, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!587 = !DILocation(line: 181, column: 16, scope: !586)
!588 = distinct !DISubprogram(name: "good4", linkageName: "_Z5good4v", scope: !4, file: !4, line: 182, type: !101, isLocal: false, isDefinition: true, scopeLine: 182, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!589 = !DILocation(line: 182, column: 16, scope: !588)
!590 = distinct !DISubprogram(name: "good5", linkageName: "_Z5good5v", scope: !4, file: !4, line: 183, type: !101, isLocal: false, isDefinition: true, scopeLine: 183, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!591 = !DILocation(line: 183, column: 16, scope: !590)
!592 = distinct !DISubprogram(name: "good6", linkageName: "_Z5good6v", scope: !4, file: !4, line: 184, type: !101, isLocal: false, isDefinition: true, scopeLine: 184, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!593 = !DILocation(line: 184, column: 16, scope: !592)
!594 = distinct !DISubprogram(name: "good7", linkageName: "_Z5good7v", scope: !4, file: !4, line: 185, type: !101, isLocal: false, isDefinition: true, scopeLine: 185, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!595 = !DILocation(line: 185, column: 16, scope: !594)
!596 = distinct !DISubprogram(name: "good8", linkageName: "_Z5good8v", scope: !4, file: !4, line: 186, type: !101, isLocal: false, isDefinition: true, scopeLine: 186, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!597 = !DILocation(line: 186, column: 16, scope: !596)
!598 = distinct !DISubprogram(name: "good9", linkageName: "_Z5good9v", scope: !4, file: !4, line: 187, type: !101, isLocal: false, isDefinition: true, scopeLine: 187, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!599 = !DILocation(line: 187, column: 16, scope: !598)
!600 = distinct !DISubprogram(name: "bad1", linkageName: "_Z4bad1v", scope: !4, file: !4, line: 190, type: !101, isLocal: false, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!601 = !DILocation(line: 190, column: 15, scope: !600)
!602 = distinct !DISubprogram(name: "bad2", linkageName: "_Z4bad2v", scope: !4, file: !4, line: 191, type: !101, isLocal: false, isDefinition: true, scopeLine: 191, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!603 = !DILocation(line: 191, column: 15, scope: !602)
!604 = distinct !DISubprogram(name: "bad3", linkageName: "_Z4bad3v", scope: !4, file: !4, line: 192, type: !101, isLocal: false, isDefinition: true, scopeLine: 192, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!605 = !DILocation(line: 192, column: 15, scope: !604)
!606 = distinct !DISubprogram(name: "bad4", linkageName: "_Z4bad4v", scope: !4, file: !4, line: 193, type: !101, isLocal: false, isDefinition: true, scopeLine: 193, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!607 = !DILocation(line: 193, column: 15, scope: !606)
!608 = distinct !DISubprogram(name: "bad5", linkageName: "_Z4bad5v", scope: !4, file: !4, line: 194, type: !101, isLocal: false, isDefinition: true, scopeLine: 194, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!609 = !DILocation(line: 194, column: 15, scope: !608)
!610 = distinct !DISubprogram(name: "bad6", linkageName: "_Z4bad6v", scope: !4, file: !4, line: 195, type: !101, isLocal: false, isDefinition: true, scopeLine: 195, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!611 = !DILocation(line: 195, column: 15, scope: !610)
!612 = distinct !DISubprogram(name: "bad7", linkageName: "_Z4bad7v", scope: !4, file: !4, line: 196, type: !101, isLocal: false, isDefinition: true, scopeLine: 196, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!613 = !DILocation(line: 196, column: 15, scope: !612)
!614 = distinct !DISubprogram(name: "bad8", linkageName: "_Z4bad8v", scope: !4, file: !4, line: 197, type: !101, isLocal: false, isDefinition: true, scopeLine: 197, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!615 = !DILocation(line: 197, column: 15, scope: !614)
!616 = distinct !DISubprogram(name: "bad9", linkageName: "_Z4bad9v", scope: !4, file: !4, line: 198, type: !101, isLocal: false, isDefinition: true, scopeLine: 198, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!617 = !DILocation(line: 198, column: 15, scope: !616)
warning: EffectiveSan assumes -O2 optimization level; got -O0
       __  __           _   _           ____
  ___ / _|/ _| ___  ___| |_(_)_   _____/ ___|  __ _ _ __
 / _ \ |_| |_ / _ \/ __| __| \ \ / / _ \___ \ / _` | '_ \
|  __/  _|  _|  __/ (__| |_| |\ V /  __/___) | (_| | | | |
 \___|_| |_|  \___|\___|\__|_| \_/ \___|____/ \__,_|_| |_|

	int8_t [+0] (-17179869184..17179869184) <703EDF97BC60677D> {8088147823597479805} <0xdf20c8> = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
ADD(0x703EDF97BC60677D, 0x703EDF97BC60677D, 0) = 0x00000000B79F915E {3080687966} [-17179869184..17179869184] index=0 name: int8_t
1.000000 0 0 1
*** IR Dump After EffectiveSan pass ***; ModuleID = '../../testcasesupport/io.c'
source_filename = "../../testcasesupport/io.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [5 x i32] [i32 37, i32 108, i32 115, i32 10, i32 0], align 4, !effectiveSan !0
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [5 x i8] c"%hd\0A\00", align 1, !effectiveSan !0
@.str.4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1, !effectiveSan !0
@.str.5 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1, !effectiveSan !0
@.str.6 = private unnamed_addr constant [5 x i8] c"%zu\0A\00", align 1, !effectiveSan !0
@.str.7 = private unnamed_addr constant [6 x i8] c"%02x\0A\00", align 1, !effectiveSan !0
@.str.8 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1, !effectiveSan !0
@.str.9 = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1, !effectiveSan !0
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1, !effectiveSan !0
@.str.11 = private unnamed_addr constant [10 x i8] c"%d -- %d\0A\00", align 1, !effectiveSan !0
@.str.12 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1, !effectiveSan !0
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1, !effectiveSan !0
@.str.14 = private unnamed_addr constant [5 x i32] [i32 37, i32 48, i32 50, i32 120, i32 0], align 4, !effectiveSan !0
@GLOBAL_CONST_TRUE = constant i32 1, align 4, !dbg !1, !effectiveSan !60
@GLOBAL_CONST_FALSE = constant i32 0, align 4, !dbg !65, !effectiveSan !60
@GLOBAL_CONST_FIVE = constant i32 5, align 4, !dbg !67, !effectiveSan !60
@globalTrue = global i32 1, align 4, !dbg !69, !effectiveSan !17
@globalFalse = global i32 0, align 4, !dbg !71, !effectiveSan !17
@globalFive = global i32 5, align 4, !dbg !73, !effectiveSan !17
@globalArgc = global i32 0, align 4, !dbg !75, !effectiveSan !17
@globalArgv = global i8** null, align 8, !dbg !77, !effectiveSan !62
@"TYCHE_TYPE_ENTRY_NULL_FILE_../../testcasesupport/io.c" = private unnamed_addr constant [1 x i8] zeroinitializer
@"TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_../../testcasesupport/io.c" = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@"TYCHE_META_SECTION_TID_0_SEC_6_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@"TYCHE_META_SECTION_TID_0_SEC_5_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@"TYCHE_META_SECTION_TID_0_SEC_4_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@"TYCHE_META_SECTION_TID_0_SEC_3_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@"TYCHE_META_SECTION_TID_0_SEC_2_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@"TYCHE_META_SECTION_TID_0_SEC_1_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@"TYCHE_META_SECTION_TID_0_SEC_0_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @"TYCHE_META_SECTION_TID_0_SEC_0_FILE_../../testcasesupport/io.c", i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_../../testcasesupport/io.c", i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @"TYCHE_TYPE_ENTRY_NULL_FILE_../../testcasesupport/io.c", i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}

declare i32 @wprintf(i32*, ...) #2

; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}

; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}

; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}

; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}

; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}

; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}

; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}

; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}

; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}

; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}

; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}

; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}

; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}

declare i32 @puts(i8*) #2

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32) #4

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #7, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #7, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #7, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}

; Function Attrs: nounwind
declare i32 @iswxdigit(i32) #5

; Function Attrs: nounwind
declare i32 @swscanf(i32*, i32*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #7, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}

; Function Attrs: nounwind
declare i32 @rand() #5

; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!3}
!llvm.module.flags = !{!304, !305}
!llvm.ident = !{!306}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIGlobalVariableExpression(var: !2)
!2 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_TRUE", scope: !3, file: !4, line: 166, type: !61, isLocal: false, isDefinition: true)
!3 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !4, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5, retainedTypes: !6, globals: !64, imports: !79)
!4 = !DIFile(filename: "../../testcasesupport/io.c", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!5 = !{}
!6 = !{!7, !8, !9, !0, !12, !13, !14, !17, !18, !19, !20, !21, !22, !23, !24, !25, !29, !30, !33, !34, !11, !35, !36, !16, !40, !41, !42, !43, !44, !45, !54, !46, !56, !57, !58, !59, !10, !15, !60, !62}
!7 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!16 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!23 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !26, line: 27, baseType: !27)
!26 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !28, line: 43, baseType: !23)
!28 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !31, line: 62, baseType: !32)
!31 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!32 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!34 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 64, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 2)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!41 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !48)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !49, line: 100, baseType: !50)
!49 = !DIFile(filename: "../../testcasesupport/std_testcase.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !49, line: 96, size: 64, elements: !51, identifier: "_ZTS14_twoIntsStruct")
!51 = !{!52, !53}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !50, file: !49, line: 98, baseType: !12, size: 32)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !50, file: !49, line: 99, baseType: !12, size: 32, offset: 32)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64)
!55 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !50)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!64 = !{!1, !65, !67, !69, !71, !73, !75, !77}
!65 = !DIGlobalVariableExpression(var: !66)
!66 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FALSE", scope: !3, file: !4, line: 167, type: !61, isLocal: false, isDefinition: true)
!67 = !DIGlobalVariableExpression(var: !68)
!68 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FIVE", scope: !3, file: !4, line: 168, type: !61, isLocal: false, isDefinition: true)
!69 = !DIGlobalVariableExpression(var: !70)
!70 = distinct !DIGlobalVariable(name: "globalTrue", scope: !3, file: !4, line: 173, type: !12, isLocal: false, isDefinition: true)
!71 = !DIGlobalVariableExpression(var: !72)
!72 = distinct !DIGlobalVariable(name: "globalFalse", scope: !3, file: !4, line: 174, type: !12, isLocal: false, isDefinition: true)
!73 = !DIGlobalVariableExpression(var: !74)
!74 = distinct !DIGlobalVariable(name: "globalFive", scope: !3, file: !4, line: 175, type: !12, isLocal: false, isDefinition: true)
!75 = !DIGlobalVariableExpression(var: !76)
!76 = distinct !DIGlobalVariable(name: "globalArgc", scope: !3, file: !4, line: 206, type: !12, isLocal: false, isDefinition: true)
!77 = !DIGlobalVariableExpression(var: !78)
!78 = distinct !DIGlobalVariable(name: "globalArgv", scope: !3, file: !4, line: 207, type: !63, isLocal: false, isDefinition: true)
!79 = !{!80, !87, !93, !99, !103, !108, !112, !116, !120, !130, !134, !138, !142, !146, !150, !154, !158, !162, !166, !172, !176, !180, !184, !188, !192, !197, !201, !205, !207, !213, !217, !225, !227, !231, !235, !239, !243, !248, !252, !257, !258, !259, !260, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303}
!80 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !83, line: 52)
!81 = !DINamespace(name: "std", scope: null, file: !82, line: 236)
!82 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!83 = !DISubprogram(name: "abs", scope: !84, file: !84, line: 837, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!84 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!85 = !DISubroutineType(types: !86)
!86 = !{!12, !12}
!87 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !88, line: 127)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !84, line: 62, baseType: !89)
!89 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 58, size: 64, elements: !90, identifier: "_ZTS5div_t")
!90 = !{!91, !92}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !89, file: !84, line: 60, baseType: !12, size: 32)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !89, file: !84, line: 61, baseType: !12, size: 32, offset: 32)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !94, line: 128)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !84, line: 70, baseType: !95)
!95 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 66, size: 128, elements: !96, identifier: "_ZTS6ldiv_t")
!96 = !{!97, !98}
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !95, file: !84, line: 68, baseType: !23, size: 64)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !95, file: !84, line: 69, baseType: !23, size: 64, offset: 64)
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !100, line: 130)
!100 = !DISubprogram(name: "abort", scope: !84, file: !84, line: 588, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !104, line: 134)
!104 = !DISubprogram(name: "atexit", scope: !84, file: !84, line: 592, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!12, !107}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64)
!108 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !109, line: 140)
!109 = !DISubprogram(name: "atof", scope: !84, file: !84, line: 101, type: !110, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!110 = !DISubroutineType(types: !111)
!111 = !{!44, !9}
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !84, file: !84, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!12, !9}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !84, file: !84, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!23, !9}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !84, file: !84, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !124, !124, !30, !30, !126}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !84, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!12, !124, !124}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !131, line: 144)
!131 = !DISubprogram(name: "calloc", scope: !84, file: !84, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!0, !30, !30}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !135, line: 145)
!135 = !DISubprogram(name: "div", scope: !84, file: !84, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!88, !12, !12}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !139, line: 146)
!139 = !DISubprogram(name: "exit", scope: !84, file: !84, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !12}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !143, line: 147)
!143 = !DISubprogram(name: "free", scope: !84, file: !84, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !0}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !147, line: 148)
!147 = !DISubprogram(name: "getenv", scope: !84, file: !84, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!33, !9}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !151, line: 149)
!151 = !DISubprogram(name: "labs", scope: !84, file: !84, line: 838, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{!23, !23}
!154 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !155, line: 150)
!155 = !DISubprogram(name: "ldiv", scope: !84, file: !84, line: 851, type: !156, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!156 = !DISubroutineType(types: !157)
!157 = !{!94, !23, !23}
!158 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !159, line: 151)
!159 = !DISubprogram(name: "malloc", scope: !84, file: !84, line: 539, type: !160, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!160 = !DISubroutineType(types: !161)
!161 = !{!0, !30}
!162 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !163, line: 153)
!163 = !DISubprogram(name: "mblen", scope: !84, file: !84, line: 919, type: !164, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!164 = !DISubroutineType(types: !165)
!165 = !{!12, !9, !30}
!166 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !167, line: 154)
!167 = !DISubprogram(name: "mbstowcs", scope: !84, file: !84, line: 930, type: !168, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!168 = !DISubroutineType(types: !169)
!169 = !{!30, !170, !171, !30}
!170 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !35)
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !9)
!172 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !173, line: 155)
!173 = !DISubprogram(name: "mbtowc", scope: !84, file: !84, line: 922, type: !174, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!174 = !DISubroutineType(types: !175)
!175 = !{!12, !170, !171, !30}
!176 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !177, line: 157)
!177 = !DISubprogram(name: "qsort", scope: !84, file: !84, line: 827, type: !178, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !0, !30, !30, !126}
!180 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !181, line: 163)
!181 = !DISubprogram(name: "rand", scope: !84, file: !84, line: 453, type: !182, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!182 = !DISubroutineType(types: !183)
!183 = !{!12}
!184 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !185, line: 164)
!185 = !DISubprogram(name: "realloc", scope: !84, file: !84, line: 549, type: !186, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!186 = !DISubroutineType(types: !187)
!187 = !{!0, !0, !30}
!188 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !189, line: 165)
!189 = !DISubprogram(name: "srand", scope: !84, file: !84, line: 455, type: !190, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!190 = !DISubroutineType(types: !191)
!191 = !{null, !41}
!192 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !193, line: 166)
!193 = !DISubprogram(name: "strtod", scope: !84, file: !84, line: 117, type: !194, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!194 = !DISubroutineType(types: !195)
!195 = !{!44, !171, !196}
!196 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !63)
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !198, line: 167)
!198 = !DISubprogram(name: "strtol", scope: !84, file: !84, line: 176, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!23, !171, !196, !12}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !202, line: 168)
!202 = !DISubprogram(name: "strtoul", scope: !84, file: !84, line: 180, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!32, !171, !196, !12}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !206, line: 169)
!206 = !DISubprogram(name: "system", scope: !84, file: !84, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !208, line: 171)
!208 = !DISubprogram(name: "wcstombs", scope: !84, file: !84, line: 933, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!30, !211, !212, !30}
!211 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !33)
!212 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !14)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !214, line: 172)
!214 = !DISubprogram(name: "wctomb", scope: !84, file: !84, line: 926, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!12, !33, !16}
!217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !219, line: 200)
!218 = !DINamespace(name: "__gnu_cxx", scope: null, file: !82, line: 262)
!219 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !84, line: 80, baseType: !220)
!220 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 76, size: 128, elements: !221, identifier: "_ZTS7lldiv_t")
!221 = !{!222, !224}
!222 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !220, file: !84, line: 78, baseType: !223, size: 64)
!223 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !220, file: !84, line: 79, baseType: !223, size: 64, offset: 64)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !226, line: 206)
!226 = !DISubprogram(name: "_Exit", scope: !84, file: !84, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !228, line: 210)
!228 = !DISubprogram(name: "llabs", scope: !84, file: !84, line: 841, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!223, !223}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !232, line: 216)
!232 = !DISubprogram(name: "lldiv", scope: !84, file: !84, line: 855, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!219, !223, !223}
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !236, line: 227)
!236 = !DISubprogram(name: "atoll", scope: !84, file: !84, line: 112, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!223, !9}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !240, line: 228)
!240 = !DISubprogram(name: "strtoll", scope: !84, file: !84, line: 200, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!223, !171, !196, !12}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !244, line: 229)
!244 = !DISubprogram(name: "strtoull", scope: !84, file: !84, line: 205, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!247, !171, !196, !12}
!247 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !249, line: 231)
!249 = !DISubprogram(name: "strtof", scope: !84, file: !84, line: 123, type: !250, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!250 = !DISubroutineType(types: !251)
!251 = !{!21, !171, !196}
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !253, line: 232)
!253 = !DISubprogram(name: "strtold", scope: !84, file: !84, line: 126, type: !254, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!254 = !DISubroutineType(types: !255)
!255 = !{!256, !171, !196}
!256 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !219, line: 240)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !226, line: 242)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !228, line: 244)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !261, line: 245)
!261 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !218, file: !262, line: 213, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!262 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !232, line: 246)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !236, line: 248)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !249, line: 249)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !240, line: 250)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !244, line: 251)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !253, line: 252)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !100, line: 38)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !104, line: 39)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !139, line: 40)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !88, line: 51)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !94, line: 52)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !275, line: 54)
!275 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !81, file: !276, line: 102, type: !277, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!276 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!277 = !DISubroutineType(types: !278)
!278 = !{!279, !279}
!279 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !109, line: 55)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !113, line: 56)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !117, line: 57)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !121, line: 58)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !131, line: 59)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !261, line: 60)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !143, line: 61)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !147, line: 62)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !151, line: 63)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !155, line: 64)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !159, line: 65)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !163, line: 67)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !167, line: 68)
!293 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !173, line: 69)
!294 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !177, line: 71)
!295 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !181, line: 72)
!296 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !185, line: 73)
!297 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !189, line: 74)
!298 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !193, line: 75)
!299 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !198, line: 76)
!300 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !202, line: 77)
!301 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !206, line: 78)
!302 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !208, line: 80)
!303 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !214, line: 81)
!304 = !{i32 2, !"Dwarf Version", i32 4}
!305 = !{i32 2, !"Debug Info Version", i32 3}
!306 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!307 = distinct !DISubprogram(name: "printLine", scope: !4, file: !4, line: 11, type: !308, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!308 = !DISubroutineType(types: !309)
!309 = !{null, !9}
!310 = !{!9}
!311 = !DILocalVariable(name: "line", arg: 1, scope: !307, file: !4, line: 11, type: !9)
!312 = !DIExpression()
!313 = !DILocation(line: 11, column: 30, scope: !307)
!314 = !DILocation(line: 13, column: 8, scope: !315)
!315 = distinct !DILexicalBlock(scope: !307, file: !4, line: 13, column: 8)
!316 = !DILocation(line: 13, column: 13, scope: !315)
!317 = !DILocation(line: 13, column: 8, scope: !307)
!318 = !DILocation(line: 15, column: 24, scope: !319)
!319 = distinct !DILexicalBlock(scope: !315, file: !4, line: 14, column: 5)
!320 = !DILocation(line: 15, column: 9, scope: !319)
!321 = !DILocation(line: 16, column: 5, scope: !319)
!322 = !DILocation(line: 17, column: 1, scope: !307)
!323 = distinct !DISubprogram(name: "printWLine", scope: !4, file: !4, line: 19, type: !324, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!324 = !DISubroutineType(types: !325)
!325 = !{null, !14}
!326 = !{!14}
!327 = !DILocalVariable(name: "line", arg: 1, scope: !323, file: !4, line: 19, type: !14)
!328 = !DILocation(line: 19, column: 34, scope: !323)
!329 = !DILocation(line: 21, column: 8, scope: !330)
!330 = distinct !DILexicalBlock(scope: !323, file: !4, line: 21, column: 8)
!331 = !DILocation(line: 21, column: 13, scope: !330)
!332 = !DILocation(line: 21, column: 8, scope: !323)
!333 = !DILocation(line: 23, column: 27, scope: !334)
!334 = distinct !DILexicalBlock(scope: !330, file: !4, line: 22, column: 5)
!335 = !DILocation(line: 23, column: 9, scope: !334)
!336 = !DILocation(line: 24, column: 5, scope: !334)
!337 = !DILocation(line: 25, column: 1, scope: !323)
!338 = distinct !DISubprogram(name: "printIntLine", scope: !4, file: !4, line: 27, type: !140, isLocal: false, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!339 = !DILocalVariable(name: "intNumber", arg: 1, scope: !338, file: !4, line: 27, type: !12)
!340 = !DILocation(line: 27, column: 24, scope: !338)
!341 = !DILocation(line: 29, column: 20, scope: !338)
!342 = !DILocation(line: 29, column: 5, scope: !338)
!343 = !DILocation(line: 30, column: 1, scope: !338)
!344 = distinct !DISubprogram(name: "printShortLine", scope: !4, file: !4, line: 32, type: !345, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!345 = !DISubroutineType(types: !346)
!346 = !{null, !19}
!347 = !DILocalVariable(name: "shortNumber", arg: 1, scope: !344, file: !4, line: 32, type: !19)
!348 = !DILocation(line: 32, column: 28, scope: !344)
!349 = !DILocation(line: 34, column: 21, scope: !344)
!350 = !DILocation(line: 34, column: 5, scope: !344)
!351 = !DILocation(line: 35, column: 1, scope: !344)
!352 = distinct !DISubprogram(name: "printFloatLine", scope: !4, file: !4, line: 37, type: !353, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!353 = !DISubroutineType(types: !354)
!354 = !{null, !21}
!355 = !DILocalVariable(name: "floatNumber", arg: 1, scope: !352, file: !4, line: 37, type: !21)
!356 = !DILocation(line: 37, column: 28, scope: !352)
!357 = !DILocation(line: 39, column: 20, scope: !352)
!358 = !DILocation(line: 39, column: 5, scope: !352)
!359 = !DILocation(line: 40, column: 1, scope: !352)
!360 = distinct !DISubprogram(name: "printLongLine", scope: !4, file: !4, line: 42, type: !361, isLocal: false, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!361 = !DISubroutineType(types: !362)
!362 = !{null, !23}
!363 = !DILocalVariable(name: "longNumber", arg: 1, scope: !360, file: !4, line: 42, type: !23)
!364 = !DILocation(line: 42, column: 26, scope: !360)
!365 = !DILocation(line: 44, column: 21, scope: !360)
!366 = !DILocation(line: 44, column: 5, scope: !360)
!367 = !DILocation(line: 45, column: 1, scope: !360)
!368 = distinct !DISubprogram(name: "printLongLongLine", scope: !4, file: !4, line: 47, type: !369, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!369 = !DISubroutineType(types: !370)
!370 = !{null, !25}
!371 = !DILocalVariable(name: "longLongIntNumber", arg: 1, scope: !368, file: !4, line: 47, type: !25)
!372 = !DILocation(line: 47, column: 33, scope: !368)
!373 = !DILocation(line: 49, column: 29, scope: !368)
!374 = !DILocation(line: 49, column: 5, scope: !368)
!375 = !DILocation(line: 50, column: 1, scope: !368)
!376 = distinct !DISubprogram(name: "printSizeTLine", scope: !4, file: !4, line: 52, type: !377, isLocal: false, isDefinition: true, scopeLine: 53, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!377 = !DISubroutineType(types: !378)
!378 = !{null, !30}
!379 = !DILocalVariable(name: "sizeTNumber", arg: 1, scope: !376, file: !4, line: 52, type: !30)
!380 = !DILocation(line: 52, column: 29, scope: !376)
!381 = !DILocation(line: 54, column: 21, scope: !376)
!382 = !DILocation(line: 54, column: 5, scope: !376)
!383 = !DILocation(line: 55, column: 1, scope: !376)
!384 = distinct !DISubprogram(name: "printHexCharLine", scope: !4, file: !4, line: 57, type: !385, isLocal: false, isDefinition: true, scopeLine: 58, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!385 = !DISubroutineType(types: !386)
!386 = !{null, !11}
!387 = !DILocalVariable(name: "charHex", arg: 1, scope: !384, file: !4, line: 57, type: !11)
!388 = !DILocation(line: 57, column: 29, scope: !384)
!389 = !DILocation(line: 59, column: 22, scope: !384)
!390 = !DILocation(line: 59, column: 5, scope: !384)
!391 = !DILocation(line: 60, column: 1, scope: !384)
!392 = distinct !DISubprogram(name: "printWcharLine", scope: !4, file: !4, line: 62, type: !393, isLocal: false, isDefinition: true, scopeLine: 63, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!393 = !DISubroutineType(types: !394)
!394 = !{null, !16}
!395 = !DILocalVariable(name: "wideChar", arg: 1, scope: !392, file: !4, line: 62, type: !16)
!396 = !DILocation(line: 62, column: 29, scope: !392)
!397 = !DILocalVariable(name: "s", scope: !392, file: !4, line: 66, type: !37)
!398 = !DILocation(line: 66, column: 13, scope: !392)
!399 = !DILocation(line: 67, column: 16, scope: !392)
!400 = !DILocation(line: 67, column: 9, scope: !392)
!401 = !DILocation(line: 67, column: 14, scope: !392)
!402 = !DILocation(line: 68, column: 9, scope: !392)
!403 = !DILocation(line: 68, column: 14, scope: !392)
!404 = !DILocation(line: 69, column: 21, scope: !392)
!405 = !DILocation(line: 69, column: 5, scope: !392)
!406 = !DILocation(line: 70, column: 1, scope: !392)
!407 = distinct !DISubprogram(name: "printUnsignedLine", scope: !4, file: !4, line: 72, type: !190, isLocal: false, isDefinition: true, scopeLine: 73, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!408 = !DILocalVariable(name: "unsignedNumber", arg: 1, scope: !407, file: !4, line: 72, type: !41)
!409 = !DILocation(line: 72, column: 33, scope: !407)
!410 = !DILocation(line: 74, column: 20, scope: !407)
!411 = !DILocation(line: 74, column: 5, scope: !407)
!412 = !DILocation(line: 75, column: 1, scope: !407)
!413 = distinct !DISubprogram(name: "printHexUnsignedCharLine", scope: !4, file: !4, line: 77, type: !414, isLocal: false, isDefinition: true, scopeLine: 78, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!414 = !DISubroutineType(types: !415)
!415 = !{null, !7}
!416 = !DILocalVariable(name: "unsignedCharacter", arg: 1, scope: !413, file: !4, line: 77, type: !7)
!417 = !DILocation(line: 77, column: 45, scope: !413)
!418 = !DILocation(line: 79, column: 22, scope: !413)
!419 = !DILocation(line: 79, column: 5, scope: !413)
!420 = !DILocation(line: 80, column: 1, scope: !413)
!421 = distinct !DISubprogram(name: "printDoubleLine", scope: !4, file: !4, line: 82, type: !422, isLocal: false, isDefinition: true, scopeLine: 83, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!422 = !DISubroutineType(types: !423)
!423 = !{null, !44}
!424 = !DILocalVariable(name: "doubleNumber", arg: 1, scope: !421, file: !4, line: 82, type: !44)
!425 = !DILocation(line: 82, column: 29, scope: !421)
!426 = !DILocation(line: 84, column: 20, scope: !421)
!427 = !DILocation(line: 84, column: 5, scope: !421)
!428 = !DILocation(line: 85, column: 1, scope: !421)
!429 = distinct !DISubprogram(name: "printStructLine", scope: !4, file: !4, line: 87, type: !430, isLocal: false, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!430 = !DISubroutineType(types: !431)
!431 = !{null, !46}
!432 = !{!54}
!433 = !DILocalVariable(name: "structTwoIntsStruct", arg: 1, scope: !429, file: !4, line: 87, type: !46)
!434 = !DILocation(line: 87, column: 45, scope: !429)
!435 = !DILocation(line: 89, column: 26, scope: !429)
!436 = !DILocation(line: 89, column: 47, scope: !429)
!437 = !DILocation(line: 89, column: 55, scope: !429)
!438 = !DILocation(line: 89, column: 76, scope: !429)
!439 = !DILocation(line: 89, column: 5, scope: !429)
!440 = !DILocation(line: 90, column: 1, scope: !429)
!441 = distinct !DISubprogram(name: "printBytesLine", scope: !4, file: !4, line: 92, type: !442, isLocal: false, isDefinition: true, scopeLine: 93, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!442 = !DISubroutineType(types: !443)
!443 = !{null, !57, !30}
!444 = !{!9, null}
!445 = !DILocalVariable(name: "bytes", arg: 1, scope: !441, file: !4, line: 92, type: !57)
!446 = !DILocation(line: 92, column: 43, scope: !441)
!447 = !DILocalVariable(name: "numBytes", arg: 2, scope: !441, file: !4, line: 92, type: !30)
!448 = !DILocation(line: 92, column: 57, scope: !441)
!449 = !DILocalVariable(name: "i", scope: !441, file: !4, line: 94, type: !30)
!450 = !DILocation(line: 94, column: 12, scope: !441)
!451 = !DILocation(line: 95, column: 12, scope: !452)
!452 = distinct !DILexicalBlock(scope: !441, file: !4, line: 95, column: 5)
!453 = !DILocation(line: 95, column: 10, scope: !452)
!454 = !DILocation(line: 95, column: 17, scope: !455)
!455 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 1)
!456 = distinct !DILexicalBlock(scope: !452, file: !4, line: 95, column: 5)
!457 = !DILocation(line: 95, column: 21, scope: !455)
!458 = !DILocation(line: 95, column: 19, scope: !455)
!459 = !DILocation(line: 95, column: 5, scope: !460)
!460 = !DILexicalBlockFile(scope: !452, file: !4, discriminator: 1)
!461 = !DILocation(line: 97, column: 24, scope: !462)
!462 = distinct !DILexicalBlock(scope: !456, file: !4, line: 96, column: 5)
!463 = !DILocation(line: 97, column: 30, scope: !462)
!464 = !DILocation(line: 97, column: 9, scope: !462)
!465 = !DILocation(line: 98, column: 5, scope: !462)
!466 = !DILocation(line: 95, column: 31, scope: !467)
!467 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 2)
!468 = !DILocation(line: 95, column: 5, scope: !467)
!469 = distinct !{!469, !470, !471}
!470 = !DILocation(line: 95, column: 5, scope: !452)
!471 = !DILocation(line: 98, column: 5, scope: !452)
!472 = !DILocation(line: 99, column: 5, scope: !441)
!473 = !DILocation(line: 100, column: 1, scope: !441)
!474 = distinct !DISubprogram(name: "decodeHexChars", scope: !4, file: !4, line: 105, type: !475, isLocal: false, isDefinition: true, scopeLine: 106, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!475 = !DISubroutineType(types: !476)
!476 = !{!30, !42, !30, !9}
!477 = !{!9, null, !9}
!478 = !DILocalVariable(name: "bytes", arg: 1, scope: !474, file: !4, line: 105, type: !42)
!479 = !DILocation(line: 105, column: 39, scope: !474)
!480 = !DILocalVariable(name: "numBytes", arg: 2, scope: !474, file: !4, line: 105, type: !30)
!481 = !DILocation(line: 105, column: 53, scope: !474)
!482 = !DILocalVariable(name: "hex", arg: 3, scope: !474, file: !4, line: 105, type: !9)
!483 = !DILocation(line: 105, column: 76, scope: !474)
!484 = !DILocalVariable(name: "numWritten", scope: !474, file: !4, line: 107, type: !30)
!485 = !DILocation(line: 107, column: 12, scope: !474)
!486 = !DILocation(line: 113, column: 5, scope: !474)
!487 = !DILocation(line: 113, column: 12, scope: !488)
!488 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 1)
!489 = !DILocation(line: 113, column: 25, scope: !488)
!490 = !DILocation(line: 113, column: 23, scope: !488)
!491 = !DILocation(line: 113, column: 34, scope: !488)
!492 = !DILocation(line: 113, column: 46, scope: !493)
!493 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 2)
!494 = !DILocation(line: 113, column: 54, scope: !493)
!495 = !DILocation(line: 113, column: 52, scope: !493)
!496 = !DILocation(line: 113, column: 37, scope: !493)
!497 = !DILocation(line: 113, column: 67, scope: !493)
!498 = !DILocation(line: 113, column: 79, scope: !499)
!499 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 3)
!500 = !DILocation(line: 113, column: 87, scope: !499)
!501 = !DILocation(line: 113, column: 85, scope: !499)
!502 = !DILocation(line: 113, column: 98, scope: !499)
!503 = !DILocation(line: 113, column: 70, scope: !499)
!504 = !DILocation(line: 113, column: 5, scope: !505)
!505 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 4)
!506 = !DILocalVariable(name: "byte", scope: !507, file: !4, line: 115, type: !12)
!507 = distinct !DILexicalBlock(scope: !474, file: !4, line: 114, column: 5)
!508 = !DILocation(line: 115, column: 13, scope: !507)
!509 = !DILocation(line: 116, column: 17, scope: !507)
!510 = !DILocation(line: 116, column: 25, scope: !507)
!511 = !DILocation(line: 116, column: 23, scope: !507)
!512 = !DILocation(line: 116, column: 9, scope: !507)
!513 = !DILocation(line: 117, column: 45, scope: !507)
!514 = !DILocation(line: 117, column: 9, scope: !507)
!515 = !DILocation(line: 117, column: 15, scope: !507)
!516 = !DILocation(line: 117, column: 27, scope: !507)
!517 = !DILocation(line: 118, column: 9, scope: !507)
!518 = !DILocation(line: 113, column: 5, scope: !519)
!519 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 5)
!520 = distinct !{!520, !486, !521}
!521 = !DILocation(line: 119, column: 5, scope: !474)
!522 = !DILocation(line: 121, column: 12, scope: !474)
!523 = !DILocation(line: 121, column: 5, scope: !474)
!524 = distinct !DISubprogram(name: "decodeHexWChars", scope: !4, file: !4, line: 127, type: !525, isLocal: false, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!525 = !DISubroutineType(types: !526)
!526 = !{!30, !42, !30, !14}
!527 = !{!9, null, !14}
!528 = !DILocalVariable(name: "bytes", arg: 1, scope: !524, file: !4, line: 127, type: !42)
!529 = !DILocation(line: 127, column: 41, scope: !524)
!530 = !DILocalVariable(name: "numBytes", arg: 2, scope: !524, file: !4, line: 127, type: !30)
!531 = !DILocation(line: 127, column: 55, scope: !524)
!532 = !DILocalVariable(name: "hex", arg: 3, scope: !524, file: !4, line: 127, type: !14)
!533 = !DILocation(line: 127, column: 81, scope: !524)
!534 = !DILocalVariable(name: "numWritten", scope: !524, file: !4, line: 129, type: !30)
!535 = !DILocation(line: 129, column: 12, scope: !524)
!536 = !DILocation(line: 135, column: 5, scope: !524)
!537 = !DILocation(line: 135, column: 12, scope: !538)
!538 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 1)
!539 = !DILocation(line: 135, column: 25, scope: !538)
!540 = !DILocation(line: 135, column: 23, scope: !538)
!541 = !DILocation(line: 135, column: 34, scope: !538)
!542 = !DILocation(line: 135, column: 47, scope: !543)
!543 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 2)
!544 = !DILocation(line: 135, column: 55, scope: !543)
!545 = !DILocation(line: 135, column: 53, scope: !543)
!546 = !DILocation(line: 135, column: 37, scope: !543)
!547 = !DILocation(line: 135, column: 68, scope: !543)
!548 = !DILocation(line: 135, column: 81, scope: !549)
!549 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 3)
!550 = !DILocation(line: 135, column: 89, scope: !549)
!551 = !DILocation(line: 135, column: 87, scope: !549)
!552 = !DILocation(line: 135, column: 100, scope: !549)
!553 = !DILocation(line: 135, column: 71, scope: !549)
!554 = !DILocation(line: 135, column: 5, scope: !555)
!555 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 4)
!556 = !DILocalVariable(name: "byte", scope: !557, file: !4, line: 137, type: !12)
!557 = distinct !DILexicalBlock(scope: !524, file: !4, line: 136, column: 5)
!558 = !DILocation(line: 137, column: 13, scope: !557)
!559 = !DILocation(line: 138, column: 18, scope: !557)
!560 = !DILocation(line: 138, column: 26, scope: !557)
!561 = !DILocation(line: 138, column: 24, scope: !557)
!562 = !DILocation(line: 138, column: 9, scope: !557)
!563 = !DILocation(line: 139, column: 45, scope: !557)
!564 = !DILocation(line: 139, column: 9, scope: !557)
!565 = !DILocation(line: 139, column: 15, scope: !557)
!566 = !DILocation(line: 139, column: 27, scope: !557)
!567 = !DILocation(line: 140, column: 9, scope: !557)
!568 = !DILocation(line: 135, column: 5, scope: !569)
!569 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 5)
!570 = distinct !{!570, !536, !571}
!571 = !DILocation(line: 141, column: 5, scope: !524)
!572 = !DILocation(line: 143, column: 12, scope: !524)
!573 = !DILocation(line: 143, column: 5, scope: !524)
!574 = distinct !DISubprogram(name: "globalReturnsTrue", scope: !4, file: !4, line: 148, type: !182, isLocal: false, isDefinition: true, scopeLine: 149, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!575 = !DILocation(line: 150, column: 5, scope: !574)
!576 = distinct !DISubprogram(name: "globalReturnsFalse", scope: !4, file: !4, line: 153, type: !182, isLocal: false, isDefinition: true, scopeLine: 154, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!577 = !DILocation(line: 155, column: 5, scope: !576)
!578 = distinct !DISubprogram(name: "globalReturnsTrueOrFalse", scope: !4, file: !4, line: 158, type: !182, isLocal: false, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!579 = !DILocation(line: 160, column: 13, scope: !578)
!580 = !DILocation(line: 160, column: 20, scope: !578)
!581 = !DILocation(line: 160, column: 5, scope: !578)
!582 = distinct !DISubprogram(name: "good1", linkageName: "_Z5good1v", scope: !4, file: !4, line: 179, type: !101, isLocal: false, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!583 = !DILocation(line: 179, column: 16, scope: !582)
!584 = distinct !DISubprogram(name: "good2", linkageName: "_Z5good2v", scope: !4, file: !4, line: 180, type: !101, isLocal: false, isDefinition: true, scopeLine: 180, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!585 = !DILocation(line: 180, column: 16, scope: !584)
!586 = distinct !DISubprogram(name: "good3", linkageName: "_Z5good3v", scope: !4, file: !4, line: 181, type: !101, isLocal: false, isDefinition: true, scopeLine: 181, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!587 = !DILocation(line: 181, column: 16, scope: !586)
!588 = distinct !DISubprogram(name: "good4", linkageName: "_Z5good4v", scope: !4, file: !4, line: 182, type: !101, isLocal: false, isDefinition: true, scopeLine: 182, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!589 = !DILocation(line: 182, column: 16, scope: !588)
!590 = distinct !DISubprogram(name: "good5", linkageName: "_Z5good5v", scope: !4, file: !4, line: 183, type: !101, isLocal: false, isDefinition: true, scopeLine: 183, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!591 = !DILocation(line: 183, column: 16, scope: !590)
!592 = distinct !DISubprogram(name: "good6", linkageName: "_Z5good6v", scope: !4, file: !4, line: 184, type: !101, isLocal: false, isDefinition: true, scopeLine: 184, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!593 = !DILocation(line: 184, column: 16, scope: !592)
!594 = distinct !DISubprogram(name: "good7", linkageName: "_Z5good7v", scope: !4, file: !4, line: 185, type: !101, isLocal: false, isDefinition: true, scopeLine: 185, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!595 = !DILocation(line: 185, column: 16, scope: !594)
!596 = distinct !DISubprogram(name: "good8", linkageName: "_Z5good8v", scope: !4, file: !4, line: 186, type: !101, isLocal: false, isDefinition: true, scopeLine: 186, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!597 = !DILocation(line: 186, column: 16, scope: !596)
!598 = distinct !DISubprogram(name: "good9", linkageName: "_Z5good9v", scope: !4, file: !4, line: 187, type: !101, isLocal: false, isDefinition: true, scopeLine: 187, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!599 = !DILocation(line: 187, column: 16, scope: !598)
!600 = distinct !DISubprogram(name: "bad1", linkageName: "_Z4bad1v", scope: !4, file: !4, line: 190, type: !101, isLocal: false, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!601 = !DILocation(line: 190, column: 15, scope: !600)
!602 = distinct !DISubprogram(name: "bad2", linkageName: "_Z4bad2v", scope: !4, file: !4, line: 191, type: !101, isLocal: false, isDefinition: true, scopeLine: 191, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!603 = !DILocation(line: 191, column: 15, scope: !602)
!604 = distinct !DISubprogram(name: "bad3", linkageName: "_Z4bad3v", scope: !4, file: !4, line: 192, type: !101, isLocal: false, isDefinition: true, scopeLine: 192, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!605 = !DILocation(line: 192, column: 15, scope: !604)
!606 = distinct !DISubprogram(name: "bad4", linkageName: "_Z4bad4v", scope: !4, file: !4, line: 193, type: !101, isLocal: false, isDefinition: true, scopeLine: 193, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!607 = !DILocation(line: 193, column: 15, scope: !606)
!608 = distinct !DISubprogram(name: "bad5", linkageName: "_Z4bad5v", scope: !4, file: !4, line: 194, type: !101, isLocal: false, isDefinition: true, scopeLine: 194, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!609 = !DILocation(line: 194, column: 15, scope: !608)
!610 = distinct !DISubprogram(name: "bad6", linkageName: "_Z4bad6v", scope: !4, file: !4, line: 195, type: !101, isLocal: false, isDefinition: true, scopeLine: 195, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!611 = !DILocation(line: 195, column: 15, scope: !610)
!612 = distinct !DISubprogram(name: "bad7", linkageName: "_Z4bad7v", scope: !4, file: !4, line: 196, type: !101, isLocal: false, isDefinition: true, scopeLine: 196, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!613 = !DILocation(line: 196, column: 15, scope: !612)
!614 = distinct !DISubprogram(name: "bad8", linkageName: "_Z4bad8v", scope: !4, file: !4, line: 197, type: !101, isLocal: false, isDefinition: true, scopeLine: 197, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!615 = !DILocation(line: 197, column: 15, scope: !614)
!616 = distinct !DISubprogram(name: "bad9", linkageName: "_Z4bad9v", scope: !4, file: !4, line: 198, type: !101, isLocal: false, isDefinition: true, scopeLine: 198, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!617 = !DILocation(line: 198, column: 15, scope: !616)
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
*** IR Dump After Rewrite Symbols ***; ModuleID = '../../testcasesupport/io.c'
source_filename = "../../testcasesupport/io.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%struct._twoIntsStruct = type { i32, i32 }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [5 x i32] [i32 37, i32 108, i32 115, i32 10, i32 0], align 4, !effectiveSan !0
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [5 x i8] c"%hd\0A\00", align 1, !effectiveSan !0
@.str.4 = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1, !effectiveSan !0
@.str.5 = private unnamed_addr constant [5 x i8] c"%ld\0A\00", align 1, !effectiveSan !0
@.str.6 = private unnamed_addr constant [5 x i8] c"%zu\0A\00", align 1, !effectiveSan !0
@.str.7 = private unnamed_addr constant [6 x i8] c"%02x\0A\00", align 1, !effectiveSan !0
@.str.8 = private unnamed_addr constant [5 x i8] c"%ls\0A\00", align 1, !effectiveSan !0
@.str.9 = private unnamed_addr constant [4 x i8] c"%u\0A\00", align 1, !effectiveSan !0
@.str.10 = private unnamed_addr constant [4 x i8] c"%g\0A\00", align 1, !effectiveSan !0
@.str.11 = private unnamed_addr constant [10 x i8] c"%d -- %d\0A\00", align 1, !effectiveSan !0
@.str.12 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1, !effectiveSan !0
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1, !effectiveSan !0
@.str.14 = private unnamed_addr constant [5 x i32] [i32 37, i32 48, i32 50, i32 120, i32 0], align 4, !effectiveSan !0
@GLOBAL_CONST_TRUE = constant i32 1, align 4, !dbg !1, !effectiveSan !60
@GLOBAL_CONST_FALSE = constant i32 0, align 4, !dbg !65, !effectiveSan !60
@GLOBAL_CONST_FIVE = constant i32 5, align 4, !dbg !67, !effectiveSan !60
@globalTrue = global i32 1, align 4, !dbg !69, !effectiveSan !17
@globalFalse = global i32 0, align 4, !dbg !71, !effectiveSan !17
@globalFive = global i32 5, align 4, !dbg !73, !effectiveSan !17
@globalArgc = global i32 0, align 4, !dbg !75, !effectiveSan !17
@globalArgv = global i8** null, align 8, !dbg !77, !effectiveSan !62
@"TYCHE_TYPE_ENTRY_NULL_FILE_../../testcasesupport/io.c" = private unnamed_addr constant [1 x i8] zeroinitializer
@"TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_../../testcasesupport/io.c" = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@"TYCHE_META_SECTION_TID_0_SEC_6_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@"TYCHE_META_SECTION_TID_0_SEC_5_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@"TYCHE_META_SECTION_TID_0_SEC_4_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@"TYCHE_META_SECTION_TID_0_SEC_3_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@"TYCHE_META_SECTION_TID_0_SEC_2_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@"TYCHE_META_SECTION_TID_0_SEC_1_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@"TYCHE_META_SECTION_TID_0_SEC_0_FILE_../../testcasesupport/io.c" = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @"TYCHE_META_SECTION_TID_0_SEC_0_FILE_../../testcasesupport/io.c", i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_../../testcasesupport/io.c", i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @"TYCHE_TYPE_ENTRY_NULL_FILE_../../testcasesupport/io.c", i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @printf(i8*, ...) #2

; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}

declare i32 @wprintf(i32*, ...) #2

; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}

; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}

; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}

; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}

; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}

; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}

; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}

; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}

; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}

; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}

; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}

; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}

; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}

declare i32 @puts(i8*) #2

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #6, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #6, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #7, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}

; Function Attrs: nounwind readonly
declare i32 @isxdigit(i32) #4

; Function Attrs: nounwind
declare i32 @sscanf(i8*, i8*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #7, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #7, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #7, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}

; Function Attrs: nounwind
declare i32 @iswxdigit(i32) #5

; Function Attrs: nounwind
declare i32 @swscanf(i32*, i32*, ...) #5

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}

; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #7, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}

; Function Attrs: nounwind
declare i32 @rand() #5

; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}

; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}

; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind }

!llvm.dbg.cu = !{!3}
!llvm.module.flags = !{!304, !305}
!llvm.ident = !{!306}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIGlobalVariableExpression(var: !2)
!2 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_TRUE", scope: !3, file: !4, line: 166, type: !61, isLocal: false, isDefinition: true)
!3 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !4, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !5, retainedTypes: !6, globals: !64, imports: !79)
!4 = !DIFile(filename: "../../testcasesupport/io.c", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!5 = !{}
!6 = !{!7, !8, !9, !0, !12, !13, !14, !17, !18, !19, !20, !21, !22, !23, !24, !25, !29, !30, !33, !34, !11, !35, !36, !16, !40, !41, !42, !43, !44, !45, !54, !46, !56, !57, !58, !59, !10, !15, !60, !62}
!7 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!11 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!12 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !15, size: 64)
!15 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!16 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!18 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!19 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !23, size: 64)
!23 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!24 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !26, line: 27, baseType: !27)
!26 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !28, line: 43, baseType: !23)
!28 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!29 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !30, size: 64)
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !31, line: 62, baseType: !32)
!31 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!32 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!34 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 64, elements: !38)
!38 = !{!39}
!39 = !DISubrange(count: 2)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !41, size: 64)
!41 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !48)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "twoIntsStruct", file: !49, line: 100, baseType: !50)
!49 = !DIFile(filename: "../../testcasesupport/std_testcase.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!50 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_twoIntsStruct", file: !49, line: 96, size: 64, elements: !51, identifier: "_ZTS14_twoIntsStruct")
!51 = !{!52, !53}
!52 = !DIDerivedType(tag: DW_TAG_member, name: "intOne", scope: !50, file: !49, line: 98, baseType: !12, size: 32)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "intTwo", scope: !50, file: !49, line: 99, baseType: !12, size: 32, offset: 32)
!54 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !55, size: 64)
!55 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !50)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!59 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!60 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64)
!63 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64)
!64 = !{!1, !65, !67, !69, !71, !73, !75, !77}
!65 = !DIGlobalVariableExpression(var: !66)
!66 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FALSE", scope: !3, file: !4, line: 167, type: !61, isLocal: false, isDefinition: true)
!67 = !DIGlobalVariableExpression(var: !68)
!68 = distinct !DIGlobalVariable(name: "GLOBAL_CONST_FIVE", scope: !3, file: !4, line: 168, type: !61, isLocal: false, isDefinition: true)
!69 = !DIGlobalVariableExpression(var: !70)
!70 = distinct !DIGlobalVariable(name: "globalTrue", scope: !3, file: !4, line: 173, type: !12, isLocal: false, isDefinition: true)
!71 = !DIGlobalVariableExpression(var: !72)
!72 = distinct !DIGlobalVariable(name: "globalFalse", scope: !3, file: !4, line: 174, type: !12, isLocal: false, isDefinition: true)
!73 = !DIGlobalVariableExpression(var: !74)
!74 = distinct !DIGlobalVariable(name: "globalFive", scope: !3, file: !4, line: 175, type: !12, isLocal: false, isDefinition: true)
!75 = !DIGlobalVariableExpression(var: !76)
!76 = distinct !DIGlobalVariable(name: "globalArgc", scope: !3, file: !4, line: 206, type: !12, isLocal: false, isDefinition: true)
!77 = !DIGlobalVariableExpression(var: !78)
!78 = distinct !DIGlobalVariable(name: "globalArgv", scope: !3, file: !4, line: 207, type: !63, isLocal: false, isDefinition: true)
!79 = !{!80, !87, !93, !99, !103, !108, !112, !116, !120, !130, !134, !138, !142, !146, !150, !154, !158, !162, !166, !172, !176, !180, !184, !188, !192, !197, !201, !205, !207, !213, !217, !225, !227, !231, !235, !239, !243, !248, !252, !257, !258, !259, !260, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303}
!80 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !83, line: 52)
!81 = !DINamespace(name: "std", scope: null, file: !82, line: 236)
!82 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!83 = !DISubprogram(name: "abs", scope: !84, file: !84, line: 837, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!84 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!85 = !DISubroutineType(types: !86)
!86 = !{!12, !12}
!87 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !88, line: 127)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !84, line: 62, baseType: !89)
!89 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 58, size: 64, elements: !90, identifier: "_ZTS5div_t")
!90 = !{!91, !92}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !89, file: !84, line: 60, baseType: !12, size: 32)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !89, file: !84, line: 61, baseType: !12, size: 32, offset: 32)
!93 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !94, line: 128)
!94 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !84, line: 70, baseType: !95)
!95 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 66, size: 128, elements: !96, identifier: "_ZTS6ldiv_t")
!96 = !{!97, !98}
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !95, file: !84, line: 68, baseType: !23, size: 64)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !95, file: !84, line: 69, baseType: !23, size: 64, offset: 64)
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !100, line: 130)
!100 = !DISubprogram(name: "abort", scope: !84, file: !84, line: 588, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !104, line: 134)
!104 = !DISubprogram(name: "atexit", scope: !84, file: !84, line: 592, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!12, !107}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64)
!108 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !109, line: 140)
!109 = !DISubprogram(name: "atof", scope: !84, file: !84, line: 101, type: !110, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!110 = !DISubroutineType(types: !111)
!111 = !{!44, !9}
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !113, line: 141)
!113 = !DISubprogram(name: "atoi", scope: !84, file: !84, line: 104, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!12, !9}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !117, line: 142)
!117 = !DISubprogram(name: "atol", scope: !84, file: !84, line: 107, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!23, !9}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !121, line: 143)
!121 = !DISubprogram(name: "bsearch", scope: !84, file: !84, line: 817, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !124, !124, !30, !30, !126}
!124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !125, size: 64)
!125 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!126 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !84, line: 805, baseType: !127)
!127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !128, size: 64)
!128 = !DISubroutineType(types: !129)
!129 = !{!12, !124, !124}
!130 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !131, line: 144)
!131 = !DISubprogram(name: "calloc", scope: !84, file: !84, line: 541, type: !132, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!132 = !DISubroutineType(types: !133)
!133 = !{!0, !30, !30}
!134 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !135, line: 145)
!135 = !DISubprogram(name: "div", scope: !84, file: !84, line: 849, type: !136, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!136 = !DISubroutineType(types: !137)
!137 = !{!88, !12, !12}
!138 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !139, line: 146)
!139 = !DISubprogram(name: "exit", scope: !84, file: !84, line: 614, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!140 = !DISubroutineType(types: !141)
!141 = !{null, !12}
!142 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !143, line: 147)
!143 = !DISubprogram(name: "free", scope: !84, file: !84, line: 563, type: !144, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!144 = !DISubroutineType(types: !145)
!145 = !{null, !0}
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !147, line: 148)
!147 = !DISubprogram(name: "getenv", scope: !84, file: !84, line: 631, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!33, !9}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !151, line: 149)
!151 = !DISubprogram(name: "labs", scope: !84, file: !84, line: 838, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{!23, !23}
!154 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !155, line: 150)
!155 = !DISubprogram(name: "ldiv", scope: !84, file: !84, line: 851, type: !156, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!156 = !DISubroutineType(types: !157)
!157 = !{!94, !23, !23}
!158 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !159, line: 151)
!159 = !DISubprogram(name: "malloc", scope: !84, file: !84, line: 539, type: !160, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!160 = !DISubroutineType(types: !161)
!161 = !{!0, !30}
!162 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !163, line: 153)
!163 = !DISubprogram(name: "mblen", scope: !84, file: !84, line: 919, type: !164, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!164 = !DISubroutineType(types: !165)
!165 = !{!12, !9, !30}
!166 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !167, line: 154)
!167 = !DISubprogram(name: "mbstowcs", scope: !84, file: !84, line: 930, type: !168, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!168 = !DISubroutineType(types: !169)
!169 = !{!30, !170, !171, !30}
!170 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !35)
!171 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !9)
!172 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !173, line: 155)
!173 = !DISubprogram(name: "mbtowc", scope: !84, file: !84, line: 922, type: !174, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!174 = !DISubroutineType(types: !175)
!175 = !{!12, !170, !171, !30}
!176 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !177, line: 157)
!177 = !DISubprogram(name: "qsort", scope: !84, file: !84, line: 827, type: !178, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!178 = !DISubroutineType(types: !179)
!179 = !{null, !0, !30, !30, !126}
!180 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !181, line: 163)
!181 = !DISubprogram(name: "rand", scope: !84, file: !84, line: 453, type: !182, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!182 = !DISubroutineType(types: !183)
!183 = !{!12}
!184 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !185, line: 164)
!185 = !DISubprogram(name: "realloc", scope: !84, file: !84, line: 549, type: !186, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!186 = !DISubroutineType(types: !187)
!187 = !{!0, !0, !30}
!188 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !189, line: 165)
!189 = !DISubprogram(name: "srand", scope: !84, file: !84, line: 455, type: !190, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!190 = !DISubroutineType(types: !191)
!191 = !{null, !41}
!192 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !193, line: 166)
!193 = !DISubprogram(name: "strtod", scope: !84, file: !84, line: 117, type: !194, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!194 = !DISubroutineType(types: !195)
!195 = !{!44, !171, !196}
!196 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !63)
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !198, line: 167)
!198 = !DISubprogram(name: "strtol", scope: !84, file: !84, line: 176, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!23, !171, !196, !12}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !202, line: 168)
!202 = !DISubprogram(name: "strtoul", scope: !84, file: !84, line: 180, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!32, !171, !196, !12}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !206, line: 169)
!206 = !DISubprogram(name: "system", scope: !84, file: !84, line: 781, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !208, line: 171)
!208 = !DISubprogram(name: "wcstombs", scope: !84, file: !84, line: 933, type: !209, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!209 = !DISubroutineType(types: !210)
!210 = !{!30, !211, !212, !30}
!211 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !33)
!212 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !14)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !214, line: 172)
!214 = !DISubprogram(name: "wctomb", scope: !84, file: !84, line: 926, type: !215, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!215 = !DISubroutineType(types: !216)
!216 = !{!12, !33, !16}
!217 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !219, line: 200)
!218 = !DINamespace(name: "__gnu_cxx", scope: null, file: !82, line: 262)
!219 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !84, line: 80, baseType: !220)
!220 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 76, size: 128, elements: !221, identifier: "_ZTS7lldiv_t")
!221 = !{!222, !224}
!222 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !220, file: !84, line: 78, baseType: !223, size: 64)
!223 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !220, file: !84, line: 79, baseType: !223, size: 64, offset: 64)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !226, line: 206)
!226 = !DISubprogram(name: "_Exit", scope: !84, file: !84, line: 626, type: !140, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !228, line: 210)
!228 = !DISubprogram(name: "llabs", scope: !84, file: !84, line: 841, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!223, !223}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !232, line: 216)
!232 = !DISubprogram(name: "lldiv", scope: !84, file: !84, line: 855, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!219, !223, !223}
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !236, line: 227)
!236 = !DISubprogram(name: "atoll", scope: !84, file: !84, line: 112, type: !237, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!237 = !DISubroutineType(types: !238)
!238 = !{!223, !9}
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !240, line: 228)
!240 = !DISubprogram(name: "strtoll", scope: !84, file: !84, line: 200, type: !241, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!241 = !DISubroutineType(types: !242)
!242 = !{!223, !171, !196, !12}
!243 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !244, line: 229)
!244 = !DISubprogram(name: "strtoull", scope: !84, file: !84, line: 205, type: !245, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!245 = !DISubroutineType(types: !246)
!246 = !{!247, !171, !196, !12}
!247 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !249, line: 231)
!249 = !DISubprogram(name: "strtof", scope: !84, file: !84, line: 123, type: !250, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!250 = !DISubroutineType(types: !251)
!251 = !{!21, !171, !196}
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !218, entity: !253, line: 232)
!253 = !DISubprogram(name: "strtold", scope: !84, file: !84, line: 126, type: !254, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!254 = !DISubroutineType(types: !255)
!255 = !{!256, !171, !196}
!256 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !219, line: 240)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !226, line: 242)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !228, line: 244)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !261, line: 245)
!261 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !218, file: !262, line: 213, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!262 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !232, line: 246)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !236, line: 248)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !249, line: 249)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !240, line: 250)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !244, line: 251)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !81, entity: !253, line: 252)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !100, line: 38)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !104, line: 39)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !139, line: 40)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !88, line: 51)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !94, line: 52)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !275, line: 54)
!275 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !81, file: !276, line: 102, type: !277, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!276 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!277 = !DISubroutineType(types: !278)
!278 = !{!279, !279}
!279 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !109, line: 55)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !113, line: 56)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !117, line: 57)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !121, line: 58)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !131, line: 59)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !261, line: 60)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !143, line: 61)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !147, line: 62)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !151, line: 63)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !155, line: 64)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !159, line: 65)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !163, line: 67)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !167, line: 68)
!293 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !173, line: 69)
!294 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !177, line: 71)
!295 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !181, line: 72)
!296 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !185, line: 73)
!297 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !189, line: 74)
!298 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !193, line: 75)
!299 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !198, line: 76)
!300 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !202, line: 77)
!301 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !206, line: 78)
!302 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !208, line: 80)
!303 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !3, entity: !214, line: 81)
!304 = !{i32 2, !"Dwarf Version", i32 4}
!305 = !{i32 2, !"Debug Info Version", i32 3}
!306 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!307 = distinct !DISubprogram(name: "printLine", scope: !4, file: !4, line: 11, type: !308, isLocal: false, isDefinition: true, scopeLine: 12, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!308 = !DISubroutineType(types: !309)
!309 = !{null, !9}
!310 = !{!9}
!311 = !DILocalVariable(name: "line", arg: 1, scope: !307, file: !4, line: 11, type: !9)
!312 = !DIExpression()
!313 = !DILocation(line: 11, column: 30, scope: !307)
!314 = !DILocation(line: 13, column: 8, scope: !315)
!315 = distinct !DILexicalBlock(scope: !307, file: !4, line: 13, column: 8)
!316 = !DILocation(line: 13, column: 13, scope: !315)
!317 = !DILocation(line: 13, column: 8, scope: !307)
!318 = !DILocation(line: 15, column: 24, scope: !319)
!319 = distinct !DILexicalBlock(scope: !315, file: !4, line: 14, column: 5)
!320 = !DILocation(line: 15, column: 9, scope: !319)
!321 = !DILocation(line: 16, column: 5, scope: !319)
!322 = !DILocation(line: 17, column: 1, scope: !307)
!323 = distinct !DISubprogram(name: "printWLine", scope: !4, file: !4, line: 19, type: !324, isLocal: false, isDefinition: true, scopeLine: 20, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!324 = !DISubroutineType(types: !325)
!325 = !{null, !14}
!326 = !{!14}
!327 = !DILocalVariable(name: "line", arg: 1, scope: !323, file: !4, line: 19, type: !14)
!328 = !DILocation(line: 19, column: 34, scope: !323)
!329 = !DILocation(line: 21, column: 8, scope: !330)
!330 = distinct !DILexicalBlock(scope: !323, file: !4, line: 21, column: 8)
!331 = !DILocation(line: 21, column: 13, scope: !330)
!332 = !DILocation(line: 21, column: 8, scope: !323)
!333 = !DILocation(line: 23, column: 27, scope: !334)
!334 = distinct !DILexicalBlock(scope: !330, file: !4, line: 22, column: 5)
!335 = !DILocation(line: 23, column: 9, scope: !334)
!336 = !DILocation(line: 24, column: 5, scope: !334)
!337 = !DILocation(line: 25, column: 1, scope: !323)
!338 = distinct !DISubprogram(name: "printIntLine", scope: !4, file: !4, line: 27, type: !140, isLocal: false, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!339 = !DILocalVariable(name: "intNumber", arg: 1, scope: !338, file: !4, line: 27, type: !12)
!340 = !DILocation(line: 27, column: 24, scope: !338)
!341 = !DILocation(line: 29, column: 20, scope: !338)
!342 = !DILocation(line: 29, column: 5, scope: !338)
!343 = !DILocation(line: 30, column: 1, scope: !338)
!344 = distinct !DISubprogram(name: "printShortLine", scope: !4, file: !4, line: 32, type: !345, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!345 = !DISubroutineType(types: !346)
!346 = !{null, !19}
!347 = !DILocalVariable(name: "shortNumber", arg: 1, scope: !344, file: !4, line: 32, type: !19)
!348 = !DILocation(line: 32, column: 28, scope: !344)
!349 = !DILocation(line: 34, column: 21, scope: !344)
!350 = !DILocation(line: 34, column: 5, scope: !344)
!351 = !DILocation(line: 35, column: 1, scope: !344)
!352 = distinct !DISubprogram(name: "printFloatLine", scope: !4, file: !4, line: 37, type: !353, isLocal: false, isDefinition: true, scopeLine: 38, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!353 = !DISubroutineType(types: !354)
!354 = !{null, !21}
!355 = !DILocalVariable(name: "floatNumber", arg: 1, scope: !352, file: !4, line: 37, type: !21)
!356 = !DILocation(line: 37, column: 28, scope: !352)
!357 = !DILocation(line: 39, column: 20, scope: !352)
!358 = !DILocation(line: 39, column: 5, scope: !352)
!359 = !DILocation(line: 40, column: 1, scope: !352)
!360 = distinct !DISubprogram(name: "printLongLine", scope: !4, file: !4, line: 42, type: !361, isLocal: false, isDefinition: true, scopeLine: 43, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!361 = !DISubroutineType(types: !362)
!362 = !{null, !23}
!363 = !DILocalVariable(name: "longNumber", arg: 1, scope: !360, file: !4, line: 42, type: !23)
!364 = !DILocation(line: 42, column: 26, scope: !360)
!365 = !DILocation(line: 44, column: 21, scope: !360)
!366 = !DILocation(line: 44, column: 5, scope: !360)
!367 = !DILocation(line: 45, column: 1, scope: !360)
!368 = distinct !DISubprogram(name: "printLongLongLine", scope: !4, file: !4, line: 47, type: !369, isLocal: false, isDefinition: true, scopeLine: 48, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!369 = !DISubroutineType(types: !370)
!370 = !{null, !25}
!371 = !DILocalVariable(name: "longLongIntNumber", arg: 1, scope: !368, file: !4, line: 47, type: !25)
!372 = !DILocation(line: 47, column: 33, scope: !368)
!373 = !DILocation(line: 49, column: 29, scope: !368)
!374 = !DILocation(line: 49, column: 5, scope: !368)
!375 = !DILocation(line: 50, column: 1, scope: !368)
!376 = distinct !DISubprogram(name: "printSizeTLine", scope: !4, file: !4, line: 52, type: !377, isLocal: false, isDefinition: true, scopeLine: 53, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!377 = !DISubroutineType(types: !378)
!378 = !{null, !30}
!379 = !DILocalVariable(name: "sizeTNumber", arg: 1, scope: !376, file: !4, line: 52, type: !30)
!380 = !DILocation(line: 52, column: 29, scope: !376)
!381 = !DILocation(line: 54, column: 21, scope: !376)
!382 = !DILocation(line: 54, column: 5, scope: !376)
!383 = !DILocation(line: 55, column: 1, scope: !376)
!384 = distinct !DISubprogram(name: "printHexCharLine", scope: !4, file: !4, line: 57, type: !385, isLocal: false, isDefinition: true, scopeLine: 58, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!385 = !DISubroutineType(types: !386)
!386 = !{null, !11}
!387 = !DILocalVariable(name: "charHex", arg: 1, scope: !384, file: !4, line: 57, type: !11)
!388 = !DILocation(line: 57, column: 29, scope: !384)
!389 = !DILocation(line: 59, column: 22, scope: !384)
!390 = !DILocation(line: 59, column: 5, scope: !384)
!391 = !DILocation(line: 60, column: 1, scope: !384)
!392 = distinct !DISubprogram(name: "printWcharLine", scope: !4, file: !4, line: 62, type: !393, isLocal: false, isDefinition: true, scopeLine: 63, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!393 = !DISubroutineType(types: !394)
!394 = !{null, !16}
!395 = !DILocalVariable(name: "wideChar", arg: 1, scope: !392, file: !4, line: 62, type: !16)
!396 = !DILocation(line: 62, column: 29, scope: !392)
!397 = !DILocalVariable(name: "s", scope: !392, file: !4, line: 66, type: !37)
!398 = !DILocation(line: 66, column: 13, scope: !392)
!399 = !DILocation(line: 67, column: 16, scope: !392)
!400 = !DILocation(line: 67, column: 9, scope: !392)
!401 = !DILocation(line: 67, column: 14, scope: !392)
!402 = !DILocation(line: 68, column: 9, scope: !392)
!403 = !DILocation(line: 68, column: 14, scope: !392)
!404 = !DILocation(line: 69, column: 21, scope: !392)
!405 = !DILocation(line: 69, column: 5, scope: !392)
!406 = !DILocation(line: 70, column: 1, scope: !392)
!407 = distinct !DISubprogram(name: "printUnsignedLine", scope: !4, file: !4, line: 72, type: !190, isLocal: false, isDefinition: true, scopeLine: 73, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!408 = !DILocalVariable(name: "unsignedNumber", arg: 1, scope: !407, file: !4, line: 72, type: !41)
!409 = !DILocation(line: 72, column: 33, scope: !407)
!410 = !DILocation(line: 74, column: 20, scope: !407)
!411 = !DILocation(line: 74, column: 5, scope: !407)
!412 = !DILocation(line: 75, column: 1, scope: !407)
!413 = distinct !DISubprogram(name: "printHexUnsignedCharLine", scope: !4, file: !4, line: 77, type: !414, isLocal: false, isDefinition: true, scopeLine: 78, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!414 = !DISubroutineType(types: !415)
!415 = !{null, !7}
!416 = !DILocalVariable(name: "unsignedCharacter", arg: 1, scope: !413, file: !4, line: 77, type: !7)
!417 = !DILocation(line: 77, column: 45, scope: !413)
!418 = !DILocation(line: 79, column: 22, scope: !413)
!419 = !DILocation(line: 79, column: 5, scope: !413)
!420 = !DILocation(line: 80, column: 1, scope: !413)
!421 = distinct !DISubprogram(name: "printDoubleLine", scope: !4, file: !4, line: 82, type: !422, isLocal: false, isDefinition: true, scopeLine: 83, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!422 = !DISubroutineType(types: !423)
!423 = !{null, !44}
!424 = !DILocalVariable(name: "doubleNumber", arg: 1, scope: !421, file: !4, line: 82, type: !44)
!425 = !DILocation(line: 82, column: 29, scope: !421)
!426 = !DILocation(line: 84, column: 20, scope: !421)
!427 = !DILocation(line: 84, column: 5, scope: !421)
!428 = !DILocation(line: 85, column: 1, scope: !421)
!429 = distinct !DISubprogram(name: "printStructLine", scope: !4, file: !4, line: 87, type: !430, isLocal: false, isDefinition: true, scopeLine: 88, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!430 = !DISubroutineType(types: !431)
!431 = !{null, !46}
!432 = !{!54}
!433 = !DILocalVariable(name: "structTwoIntsStruct", arg: 1, scope: !429, file: !4, line: 87, type: !46)
!434 = !DILocation(line: 87, column: 45, scope: !429)
!435 = !DILocation(line: 89, column: 26, scope: !429)
!436 = !DILocation(line: 89, column: 47, scope: !429)
!437 = !DILocation(line: 89, column: 55, scope: !429)
!438 = !DILocation(line: 89, column: 76, scope: !429)
!439 = !DILocation(line: 89, column: 5, scope: !429)
!440 = !DILocation(line: 90, column: 1, scope: !429)
!441 = distinct !DISubprogram(name: "printBytesLine", scope: !4, file: !4, line: 92, type: !442, isLocal: false, isDefinition: true, scopeLine: 93, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!442 = !DISubroutineType(types: !443)
!443 = !{null, !57, !30}
!444 = !{!9, null}
!445 = !DILocalVariable(name: "bytes", arg: 1, scope: !441, file: !4, line: 92, type: !57)
!446 = !DILocation(line: 92, column: 43, scope: !441)
!447 = !DILocalVariable(name: "numBytes", arg: 2, scope: !441, file: !4, line: 92, type: !30)
!448 = !DILocation(line: 92, column: 57, scope: !441)
!449 = !DILocalVariable(name: "i", scope: !441, file: !4, line: 94, type: !30)
!450 = !DILocation(line: 94, column: 12, scope: !441)
!451 = !DILocation(line: 95, column: 12, scope: !452)
!452 = distinct !DILexicalBlock(scope: !441, file: !4, line: 95, column: 5)
!453 = !DILocation(line: 95, column: 10, scope: !452)
!454 = !DILocation(line: 95, column: 17, scope: !455)
!455 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 1)
!456 = distinct !DILexicalBlock(scope: !452, file: !4, line: 95, column: 5)
!457 = !DILocation(line: 95, column: 21, scope: !455)
!458 = !DILocation(line: 95, column: 19, scope: !455)
!459 = !DILocation(line: 95, column: 5, scope: !460)
!460 = !DILexicalBlockFile(scope: !452, file: !4, discriminator: 1)
!461 = !DILocation(line: 97, column: 24, scope: !462)
!462 = distinct !DILexicalBlock(scope: !456, file: !4, line: 96, column: 5)
!463 = !DILocation(line: 97, column: 30, scope: !462)
!464 = !DILocation(line: 97, column: 9, scope: !462)
!465 = !DILocation(line: 98, column: 5, scope: !462)
!466 = !DILocation(line: 95, column: 31, scope: !467)
!467 = !DILexicalBlockFile(scope: !456, file: !4, discriminator: 2)
!468 = !DILocation(line: 95, column: 5, scope: !467)
!469 = distinct !{!469, !470, !471}
!470 = !DILocation(line: 95, column: 5, scope: !452)
!471 = !DILocation(line: 98, column: 5, scope: !452)
!472 = !DILocation(line: 99, column: 5, scope: !441)
!473 = !DILocation(line: 100, column: 1, scope: !441)
!474 = distinct !DISubprogram(name: "decodeHexChars", scope: !4, file: !4, line: 105, type: !475, isLocal: false, isDefinition: true, scopeLine: 106, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!475 = !DISubroutineType(types: !476)
!476 = !{!30, !42, !30, !9}
!477 = !{!9, null, !9}
!478 = !DILocalVariable(name: "bytes", arg: 1, scope: !474, file: !4, line: 105, type: !42)
!479 = !DILocation(line: 105, column: 39, scope: !474)
!480 = !DILocalVariable(name: "numBytes", arg: 2, scope: !474, file: !4, line: 105, type: !30)
!481 = !DILocation(line: 105, column: 53, scope: !474)
!482 = !DILocalVariable(name: "hex", arg: 3, scope: !474, file: !4, line: 105, type: !9)
!483 = !DILocation(line: 105, column: 76, scope: !474)
!484 = !DILocalVariable(name: "numWritten", scope: !474, file: !4, line: 107, type: !30)
!485 = !DILocation(line: 107, column: 12, scope: !474)
!486 = !DILocation(line: 113, column: 5, scope: !474)
!487 = !DILocation(line: 113, column: 12, scope: !488)
!488 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 1)
!489 = !DILocation(line: 113, column: 25, scope: !488)
!490 = !DILocation(line: 113, column: 23, scope: !488)
!491 = !DILocation(line: 113, column: 34, scope: !488)
!492 = !DILocation(line: 113, column: 46, scope: !493)
!493 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 2)
!494 = !DILocation(line: 113, column: 54, scope: !493)
!495 = !DILocation(line: 113, column: 52, scope: !493)
!496 = !DILocation(line: 113, column: 37, scope: !493)
!497 = !DILocation(line: 113, column: 67, scope: !493)
!498 = !DILocation(line: 113, column: 79, scope: !499)
!499 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 3)
!500 = !DILocation(line: 113, column: 87, scope: !499)
!501 = !DILocation(line: 113, column: 85, scope: !499)
!502 = !DILocation(line: 113, column: 98, scope: !499)
!503 = !DILocation(line: 113, column: 70, scope: !499)
!504 = !DILocation(line: 113, column: 5, scope: !505)
!505 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 4)
!506 = !DILocalVariable(name: "byte", scope: !507, file: !4, line: 115, type: !12)
!507 = distinct !DILexicalBlock(scope: !474, file: !4, line: 114, column: 5)
!508 = !DILocation(line: 115, column: 13, scope: !507)
!509 = !DILocation(line: 116, column: 17, scope: !507)
!510 = !DILocation(line: 116, column: 25, scope: !507)
!511 = !DILocation(line: 116, column: 23, scope: !507)
!512 = !DILocation(line: 116, column: 9, scope: !507)
!513 = !DILocation(line: 117, column: 45, scope: !507)
!514 = !DILocation(line: 117, column: 9, scope: !507)
!515 = !DILocation(line: 117, column: 15, scope: !507)
!516 = !DILocation(line: 117, column: 27, scope: !507)
!517 = !DILocation(line: 118, column: 9, scope: !507)
!518 = !DILocation(line: 113, column: 5, scope: !519)
!519 = !DILexicalBlockFile(scope: !474, file: !4, discriminator: 5)
!520 = distinct !{!520, !486, !521}
!521 = !DILocation(line: 119, column: 5, scope: !474)
!522 = !DILocation(line: 121, column: 12, scope: !474)
!523 = !DILocation(line: 121, column: 5, scope: !474)
!524 = distinct !DISubprogram(name: "decodeHexWChars", scope: !4, file: !4, line: 127, type: !525, isLocal: false, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!525 = !DISubroutineType(types: !526)
!526 = !{!30, !42, !30, !14}
!527 = !{!9, null, !14}
!528 = !DILocalVariable(name: "bytes", arg: 1, scope: !524, file: !4, line: 127, type: !42)
!529 = !DILocation(line: 127, column: 41, scope: !524)
!530 = !DILocalVariable(name: "numBytes", arg: 2, scope: !524, file: !4, line: 127, type: !30)
!531 = !DILocation(line: 127, column: 55, scope: !524)
!532 = !DILocalVariable(name: "hex", arg: 3, scope: !524, file: !4, line: 127, type: !14)
!533 = !DILocation(line: 127, column: 81, scope: !524)
!534 = !DILocalVariable(name: "numWritten", scope: !524, file: !4, line: 129, type: !30)
!535 = !DILocation(line: 129, column: 12, scope: !524)
!536 = !DILocation(line: 135, column: 5, scope: !524)
!537 = !DILocation(line: 135, column: 12, scope: !538)
!538 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 1)
!539 = !DILocation(line: 135, column: 25, scope: !538)
!540 = !DILocation(line: 135, column: 23, scope: !538)
!541 = !DILocation(line: 135, column: 34, scope: !538)
!542 = !DILocation(line: 135, column: 47, scope: !543)
!543 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 2)
!544 = !DILocation(line: 135, column: 55, scope: !543)
!545 = !DILocation(line: 135, column: 53, scope: !543)
!546 = !DILocation(line: 135, column: 37, scope: !543)
!547 = !DILocation(line: 135, column: 68, scope: !543)
!548 = !DILocation(line: 135, column: 81, scope: !549)
!549 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 3)
!550 = !DILocation(line: 135, column: 89, scope: !549)
!551 = !DILocation(line: 135, column: 87, scope: !549)
!552 = !DILocation(line: 135, column: 100, scope: !549)
!553 = !DILocation(line: 135, column: 71, scope: !549)
!554 = !DILocation(line: 135, column: 5, scope: !555)
!555 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 4)
!556 = !DILocalVariable(name: "byte", scope: !557, file: !4, line: 137, type: !12)
!557 = distinct !DILexicalBlock(scope: !524, file: !4, line: 136, column: 5)
!558 = !DILocation(line: 137, column: 13, scope: !557)
!559 = !DILocation(line: 138, column: 18, scope: !557)
!560 = !DILocation(line: 138, column: 26, scope: !557)
!561 = !DILocation(line: 138, column: 24, scope: !557)
!562 = !DILocation(line: 138, column: 9, scope: !557)
!563 = !DILocation(line: 139, column: 45, scope: !557)
!564 = !DILocation(line: 139, column: 9, scope: !557)
!565 = !DILocation(line: 139, column: 15, scope: !557)
!566 = !DILocation(line: 139, column: 27, scope: !557)
!567 = !DILocation(line: 140, column: 9, scope: !557)
!568 = !DILocation(line: 135, column: 5, scope: !569)
!569 = !DILexicalBlockFile(scope: !524, file: !4, discriminator: 5)
!570 = distinct !{!570, !536, !571}
!571 = !DILocation(line: 141, column: 5, scope: !524)
!572 = !DILocation(line: 143, column: 12, scope: !524)
!573 = !DILocation(line: 143, column: 5, scope: !524)
!574 = distinct !DISubprogram(name: "globalReturnsTrue", scope: !4, file: !4, line: 148, type: !182, isLocal: false, isDefinition: true, scopeLine: 149, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!575 = !DILocation(line: 150, column: 5, scope: !574)
!576 = distinct !DISubprogram(name: "globalReturnsFalse", scope: !4, file: !4, line: 153, type: !182, isLocal: false, isDefinition: true, scopeLine: 154, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!577 = !DILocation(line: 155, column: 5, scope: !576)
!578 = distinct !DISubprogram(name: "globalReturnsTrueOrFalse", scope: !4, file: !4, line: 158, type: !182, isLocal: false, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!579 = !DILocation(line: 160, column: 13, scope: !578)
!580 = !DILocation(line: 160, column: 20, scope: !578)
!581 = !DILocation(line: 160, column: 5, scope: !578)
!582 = distinct !DISubprogram(name: "good1", linkageName: "_Z5good1v", scope: !4, file: !4, line: 179, type: !101, isLocal: false, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!583 = !DILocation(line: 179, column: 16, scope: !582)
!584 = distinct !DISubprogram(name: "good2", linkageName: "_Z5good2v", scope: !4, file: !4, line: 180, type: !101, isLocal: false, isDefinition: true, scopeLine: 180, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!585 = !DILocation(line: 180, column: 16, scope: !584)
!586 = distinct !DISubprogram(name: "good3", linkageName: "_Z5good3v", scope: !4, file: !4, line: 181, type: !101, isLocal: false, isDefinition: true, scopeLine: 181, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!587 = !DILocation(line: 181, column: 16, scope: !586)
!588 = distinct !DISubprogram(name: "good4", linkageName: "_Z5good4v", scope: !4, file: !4, line: 182, type: !101, isLocal: false, isDefinition: true, scopeLine: 182, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!589 = !DILocation(line: 182, column: 16, scope: !588)
!590 = distinct !DISubprogram(name: "good5", linkageName: "_Z5good5v", scope: !4, file: !4, line: 183, type: !101, isLocal: false, isDefinition: true, scopeLine: 183, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!591 = !DILocation(line: 183, column: 16, scope: !590)
!592 = distinct !DISubprogram(name: "good6", linkageName: "_Z5good6v", scope: !4, file: !4, line: 184, type: !101, isLocal: false, isDefinition: true, scopeLine: 184, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!593 = !DILocation(line: 184, column: 16, scope: !592)
!594 = distinct !DISubprogram(name: "good7", linkageName: "_Z5good7v", scope: !4, file: !4, line: 185, type: !101, isLocal: false, isDefinition: true, scopeLine: 185, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!595 = !DILocation(line: 185, column: 16, scope: !594)
!596 = distinct !DISubprogram(name: "good8", linkageName: "_Z5good8v", scope: !4, file: !4, line: 186, type: !101, isLocal: false, isDefinition: true, scopeLine: 186, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!597 = !DILocation(line: 186, column: 16, scope: !596)
!598 = distinct !DISubprogram(name: "good9", linkageName: "_Z5good9v", scope: !4, file: !4, line: 187, type: !101, isLocal: false, isDefinition: true, scopeLine: 187, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!599 = !DILocation(line: 187, column: 16, scope: !598)
!600 = distinct !DISubprogram(name: "bad1", linkageName: "_Z4bad1v", scope: !4, file: !4, line: 190, type: !101, isLocal: false, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!601 = !DILocation(line: 190, column: 15, scope: !600)
!602 = distinct !DISubprogram(name: "bad2", linkageName: "_Z4bad2v", scope: !4, file: !4, line: 191, type: !101, isLocal: false, isDefinition: true, scopeLine: 191, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!603 = !DILocation(line: 191, column: 15, scope: !602)
!604 = distinct !DISubprogram(name: "bad3", linkageName: "_Z4bad3v", scope: !4, file: !4, line: 192, type: !101, isLocal: false, isDefinition: true, scopeLine: 192, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!605 = !DILocation(line: 192, column: 15, scope: !604)
!606 = distinct !DISubprogram(name: "bad4", linkageName: "_Z4bad4v", scope: !4, file: !4, line: 193, type: !101, isLocal: false, isDefinition: true, scopeLine: 193, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!607 = !DILocation(line: 193, column: 15, scope: !606)
!608 = distinct !DISubprogram(name: "bad5", linkageName: "_Z4bad5v", scope: !4, file: !4, line: 194, type: !101, isLocal: false, isDefinition: true, scopeLine: 194, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!609 = !DILocation(line: 194, column: 15, scope: !608)
!610 = distinct !DISubprogram(name: "bad6", linkageName: "_Z4bad6v", scope: !4, file: !4, line: 195, type: !101, isLocal: false, isDefinition: true, scopeLine: 195, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!611 = !DILocation(line: 195, column: 15, scope: !610)
!612 = distinct !DISubprogram(name: "bad7", linkageName: "_Z4bad7v", scope: !4, file: !4, line: 196, type: !101, isLocal: false, isDefinition: true, scopeLine: 196, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!613 = !DILocation(line: 196, column: 15, scope: !612)
!614 = distinct !DISubprogram(name: "bad8", linkageName: "_Z4bad8v", scope: !4, file: !4, line: 197, type: !101, isLocal: false, isDefinition: true, scopeLine: 197, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!615 = !DILocation(line: 197, column: 15, scope: !614)
!616 = distinct !DISubprogram(name: "bad9", linkageName: "_Z4bad9v", scope: !4, file: !4, line: 198, type: !101, isLocal: false, isDefinition: true, scopeLine: 198, flags: DIFlagPrototyped, isOptimized: false, unit: !3, variables: !5)
!617 = !DILocation(line: 198, column: 15, scope: !616)
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printLine(i8*) #0 !dbg !307 !effectiveSanArgs !310 {
  %2 = alloca i8*, align 8, !effectiveSan !8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !311, metadata !312), !dbg !313
  %3 = load i8*, i8** %2, align 8, !dbg !314, !effectiveSan !9
  %4 = icmp ne i8* %3, null, !dbg !316
  br i1 %4, label %5, label %8, !dbg !317

; <label>:5:                                      ; preds = %1
  %6 = load i8*, i8** %2, align 8, !dbg !318, !effectiveSan !9
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8* %6), !dbg !320, !effectiveSan !12
  br label %8, !dbg !321

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !322
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str>; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str>; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str>; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str>; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:13:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:13:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:15:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:15:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:17:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:17:1 Node Type ID: []

# End machine code for function printLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printWLine(i32*) #0 !dbg !323 !effectiveSanArgs !326 {
  %2 = alloca i32*, align 8, !effectiveSan !13
  store i32* %0, i32** %2, align 8
  call void @llvm.dbg.declare(metadata i32** %2, metadata !327, metadata !312), !dbg !328
  %3 = load i32*, i32** %2, align 8, !dbg !329, !effectiveSan !14
  %4 = icmp ne i32* %3, null, !dbg !331
  br i1 %4, label %5, label %8, !dbg !332

; <label>:5:                                      ; preds = %1
  %6 = load i32*, i32** %2, align 8, !dbg !333, !effectiveSan !14
  %7 = call i32 (i32*, ...) @wprintf(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.1, i32 0, i32 0), i32* %6), !dbg !335, !effectiveSan !12
  br label %8, !dbg !336

; <label>:8:                                      ; preds = %5, %1
  ret void, !dbg !337
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printWLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.1>; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printWLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.1>; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.1>; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	CMP64mi8 <fi#0>, 1, %noreg, 0, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Predecessors according to CFG: BB#0
	%vreg8<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg8 dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.1>; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%RSI<def> = COPY %vreg8; GR64:%vreg8 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printWLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	CMP64mi8 %RBP, 1, %noreg, -8, %noreg, 0, %EFLAGS<imp-def>; mem:LD8[%2] dbg:../../testcasesupport/io.c:21:13 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:21:8 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %5
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:23:27 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	CALL64pcrel32 <ga:@wprintf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:23:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %8
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:25:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:25:1 Node Type ID: []

# End machine code for function printWLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printIntLine(i32) #0 !dbg !338 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !17
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !339, metadata !312), !dbg !340
  %3 = load i32, i32* %2, align 4, !dbg !341, !effectiveSan !12
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %3), !dbg !342, !effectiveSan !12
  ret void, !dbg !343
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printIntLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.2>; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printIntLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.2>; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.2>; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.2>; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printIntLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:29:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:29:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:30:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:30:1 Node Type ID: []

# End machine code for function printIntLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printShortLine(i16 signext) #0 !dbg !344 !effectiveSanArgs !102 {
  %2 = alloca i16, align 2, !effectiveSan !18
  store i16 %0, i16* %2, align 2
  call void @llvm.dbg.declare(metadata i16* %2, metadata !347, metadata !312), !dbg !348
  %3 = load i16, i16* %2, align 2, !dbg !349, !effectiveSan !19
  %4 = sext i16 %3 to i32, !dbg !349
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i32 %4), !dbg !350, !effectiveSan !12
  ret void, !dbg !351
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printShortLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=2, align=2, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_16bit; GR16:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV16mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST2[%2] GR16:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm16 <fi#0>, 1, %noreg, 0, %noreg; mem:LD2[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.3>; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printShortLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=2, align=2, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_16bit; GR16:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV16mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST2[%2] GR16:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm16 <fi#0>, 1, %noreg, 0, %noreg; mem:LD2[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.3>; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=2, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_16bit; GR16:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV16mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST2[%2] GR16:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm16 <fi#0>, 1, %noreg, 0, %noreg; mem:LD2[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.3>; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=2, align=2, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_16bit; GR16:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV16mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST2[%2] GR16:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm16 <fi#0>, 1, %noreg, 0, %noreg; mem:LD2[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.3>; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = COPY %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = COPY %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = COPY %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = MOV16rr %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = MOV8rr %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = MOV16rr %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = MOV8rr %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = MOV16rr %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = MOV8rr %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = MOV16rr %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = MOV8rr %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = MOV16rr %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = MOV8rr %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = MOV16rr %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = MOV8rr %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printShortLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=2, align=2, at location [SP-10]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AX<def> = MOV16rr %DI, %EDI<imp-use,kill> Node Type ID: []
	MOV16mr %RBP, 1, %noreg, -2, %noreg, %AX<kill>; mem:ST2[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm16 %RBP, 1, %noreg, -2, %noreg; mem:LD2[%2] dbg:../../testcasesupport/io.c:34:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%DL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	%AL<def> = MOV8rr %DL<kill>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:34:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:35:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:35:1 Node Type ID: []

# End machine code for function printShortLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printFloatLine(float) #0 !dbg !352 !effectiveSanArgs !102 {
  %2 = alloca float, align 4, !effectiveSan !20
  store float %0, float* %2, align 4
  call void @llvm.dbg.declare(metadata float* %2, metadata !355, metadata !312), !dbg !356
  %3 = load float, float* %2, align 4, !dbg !357, !effectiveSan !21
  %4 = fpext float %3 to double, !dbg !357
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), double %4), !dbg !358, !effectiveSan !12
  ret void, !dbg !359
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printFloatLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR32:%vreg1,%vreg0 Node Type ID: []
	MOVSSmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] FR32:%vreg1 Node Type ID: []
	%vreg7<def> = CVTSS2SDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] FR64:%vreg7 dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.4>; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%XMM0<def> = COPY %vreg7; FR64:%vreg7 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printFloatLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR32:%vreg1,%vreg0 Node Type ID: []
	MOVSSmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] FR32:%vreg1 Node Type ID: []
	%vreg7<def> = CVTSS2SDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] FR64:%vreg7 dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.4>; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%XMM0<def> = COPY %vreg7; FR64:%vreg7 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR32:%vreg1,%vreg0 Node Type ID: []
	MOVSSmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] FR32:%vreg1 Node Type ID: []
	%vreg7<def> = CVTSS2SDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] FR64:%vreg7 dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.4>; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%XMM0<def> = COPY %vreg7; FR64:%vreg7 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR32:%vreg1,%vreg0 Node Type ID: []
	MOVSSmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] FR32:%vreg1 Node Type ID: []
	%vreg7<def> = CVTSS2SDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] FR64:%vreg7 dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.4>; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%XMM0<def> = COPY %vreg7; FR64:%vreg7 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printFloatLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSSmr %RBP, 1, %noreg, -4, %noreg, %XMM0<kill>; mem:ST4[%2] Node Type ID: []
	%XMM0<def> = CVTSS2SDrm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:39:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.4>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:39:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:40:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:40:1 Node Type ID: []

# End machine code for function printFloatLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printLongLine(i64) #0 !dbg !360 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !22
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !363, metadata !312), !dbg !364
  %3 = load i64, i64* %2, align 8, !dbg !365, !effectiveSan !23
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !366, !effectiveSan !12
  ret void, !dbg !367
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printLongLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printLongLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:44:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:44:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:45:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:45:1 Node Type ID: []

# End machine code for function printLongLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printLongLongLine(i64) #0 !dbg !368 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !24
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !371, metadata !312), !dbg !372
  %3 = load i64, i64* %2, align 8, !dbg !373, !effectiveSan !25
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 %3), !dbg !374, !effectiveSan !12
  ret void, !dbg !375
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printLongLongLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printLongLongLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.5>; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printLongLongLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:49:29 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.5>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:49:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:50:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:50:1 Node Type ID: []

# End machine code for function printLongLongLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printSizeTLine(i64) #0 !dbg !376 !effectiveSanArgs !102 {
  %2 = alloca i64, align 8, !effectiveSan !29
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !379, metadata !312), !dbg !380
  %3 = load i64, i64* %2, align 8, !dbg !381, !effectiveSan !30
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i64 %3), !dbg !382, !effectiveSan !12
  ret void, !dbg !383
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printSizeTLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.6>; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printSizeTLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.6>; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.6>; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg7<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg7 dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.6>; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printSizeTLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:54:21 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.6>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:54:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:55:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:55:1 Node Type ID: []

# End machine code for function printSizeTLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printHexCharLine(i8 signext) #0 !dbg !384 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !33
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !387, metadata !312), !dbg !388
  %3 = load i8, i8* %2, align 1, !dbg !389, !effectiveSan !11
  %4 = sext i8 %3 to i32, !dbg !389
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !390, !effectiveSan !12
  ret void, !dbg !391
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printHexCharLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printHexCharLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVSX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = COPY %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = COPY %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printHexCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVSX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:59:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:59:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:60:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:60:1 Node Type ID: []

# End machine code for function printHexCharLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printWcharLine(i32 signext) #0 !dbg !392 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !35
  %3 = alloca [2 x i32], align 4, !effectiveSan !36
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !395, metadata !312), !dbg !396
  call void @llvm.dbg.declare(metadata [2 x i32]* %3, metadata !397, metadata !312), !dbg !398
  %4 = load i32, i32* %2, align 4, !dbg !399, !effectiveSan !16
  %5 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 0, !dbg !400
  store i32 %4, i32* %5, align 4, !dbg !401
  %6 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i64 0, i64 1, !dbg !402
  store i32 0, i32* %6, align 4, !dbg !403
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %3, i32 0, i32 0, !dbg !404, !effectiveSan !35
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32* %7), !dbg !405, !effectiveSan !12
  ret void, !dbg !406
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printWcharLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg7<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg7 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	DBG_VALUE %vreg7, %noreg, !"s", <!312>; GR64:%vreg7 line no:66 Node Type ID: []
	%vreg9<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg9<kill>; mem:ST4[%5] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 4, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.8>; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printWcharLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg7<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg7 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	DBG_VALUE %vreg7, %noreg, !"s", <!312>; GR64:%vreg7 line no:66 Node Type ID: []
	%vreg9<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg9<kill>; mem:ST4[%5] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 4, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.8>; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg7<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg7 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	DBG_VALUE %vreg7, %noreg, !"s", <!312>; GR64:%vreg7 line no:66 Node Type ID: []
	%vreg9<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg9<kill>; mem:ST4[%5] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 4, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.8>; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=8, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg7<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg7 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	DBG_VALUE %vreg7, %noreg, !"s", <!312>; GR64:%vreg7 line no:66 Node Type ID: []
	%vreg9<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg9<kill>; mem:ST4[%5] GR32:%vreg9 dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 4, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.8>; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%RSI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printWcharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=8, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-24]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%RSI<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	DBG_VALUE %RSI, %noreg, !"s", <!312>; line no:66 Node Type ID: []
	%EDI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:67:16 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EDI<kill>; mem:ST4[%5] dbg:../../testcasesupport/io.c:67:14 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -8, %noreg, 0; mem:ST4[%6] dbg:../../testcasesupport/io.c:68:14 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.8>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:69:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -16, %noreg, %EAX<kill>; mem:ST4[FixedStack2] dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:70:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:70:1 Node Type ID: []

# End machine code for function printWcharLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printUnsignedLine(i32) #0 !dbg !407 !effectiveSanArgs !102 {
  %2 = alloca i32, align 4, !effectiveSan !40
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !408, metadata !312), !dbg !409
  %3 = load i32, i32* %2, align 4, !dbg !410, !effectiveSan !41
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i32 %3), !dbg !411, !effectiveSan !12
  ret void, !dbg !412
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printUnsignedLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.9>; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printUnsignedLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.9>; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.9>; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%2] GR32:%vreg1 Node Type ID: []
	%vreg7<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%2] GR32:%vreg7 dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.9>; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%ESI<def> = COPY %vreg7; GR32:%vreg7 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printUnsignedLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -4, %noreg, %EDI<kill>; mem:ST4[%2] Node Type ID: []
	%ESI<def> = MOV32rm %RBP, 1, %noreg, -4, %noreg; mem:LD4[%2] dbg:../../testcasesupport/io.c:74:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.9>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:74:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:75:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:75:1 Node Type ID: []

# End machine code for function printUnsignedLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printHexUnsignedCharLine(i8 zeroext) #0 !dbg !413 !effectiveSanArgs !102 {
  %2 = alloca i8, align 1, !effectiveSan !42
  store i8 %0, i8* %2, align 1
  call void @llvm.dbg.declare(metadata i8* %2, metadata !416, metadata !312), !dbg !417
  %3 = load i8, i8* %2, align 1, !dbg !418, !effectiveSan !7
  %4 = zext i8 %3 to i32, !dbg !418
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i32 0, i32 0), i32 %4), !dbg !419, !effectiveSan !12
  ret void, !dbg !420
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printHexUnsignedCharLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVZX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printHexUnsignedCharLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVZX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVZX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=1, align=1, at location [SP+8]
Function Live Ins: %EDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %EDI
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0:sub_8bit; GR8:%vreg1 GR32:%vreg0 Node Type ID: []
	MOV8mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST1[%2] GR8:%vreg1 Node Type ID: []
	%vreg8<def> = MOVZX32rm8 <fi#0>, 1, %noreg, 0, %noreg; mem:LD1[%2] GR32:%vreg8 dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.7>; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg5<def> = COPY %vreg4:sub_8bit; GR8:%vreg5 GR32:%vreg4 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ESI<def> = COPY %vreg8; GR32:%vreg8 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = COPY %vreg5; GR8:%vreg5 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%vreg6<def> = COPY %EAX; GR32:%vreg6 dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = COPY %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = COPY %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printHexUnsignedCharLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=1, align=1, at location [SP-9]
  fi#1: size=4, align=4, at location [SP-16]
Function Live Ins: %EDI

BB#0: derived from LLVM BB %1
    Live Ins: %EDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%AL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -1, %noreg, %AL<kill>; mem:ST1[%2] Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RBP, 1, %noreg, -1, %noreg; mem:LD1[%2] dbg:../../testcasesupport/io.c:79:22 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.7>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%ECX<def,tied1> = XOR32rr %ECX<undef,tied0>, %ECX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	%AL<def> = MOV8rr %CL, %ECX<imp-use,kill>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:79:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:80:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:80:1 Node Type ID: []

# End machine code for function printHexUnsignedCharLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printDoubleLine(double) #0 !dbg !421 !effectiveSanArgs !102 {
  %2 = alloca double, align 8, !effectiveSan !43
  store double %0, double* %2, align 8
  call void @llvm.dbg.declare(metadata double* %2, metadata !424, metadata !312), !dbg !425
  %3 = load double, double* %2, align 8, !dbg !426, !effectiveSan !44
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i32 0, i32 0), double %3), !dbg !427, !effectiveSan !12
  ret void, !dbg !428
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printDoubleLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR64:%vreg1,%vreg0 Node Type ID: []
	MOVSDmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] FR64:%vreg1 Node Type ID: []
	%vreg6<def> = MOVSDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] FR64:%vreg6 dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.10>; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%XMM0<def> = COPY %vreg6; FR64:%vreg6 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printDoubleLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR64:%vreg1,%vreg0 Node Type ID: []
	MOVSDmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] FR64:%vreg1 Node Type ID: []
	%vreg6<def> = MOVSDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] FR64:%vreg6 dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.10>; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%XMM0<def> = COPY %vreg6; FR64:%vreg6 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR64:%vreg1,%vreg0 Node Type ID: []
	MOVSDmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] FR64:%vreg1 Node Type ID: []
	%vreg6<def> = MOVSDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] FR64:%vreg6 dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.10>; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%XMM0<def> = COPY %vreg6; FR64:%vreg6 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %XMM0 in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0
	%vreg0<def> = COPY %XMM0; FR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; FR64:%vreg1,%vreg0 Node Type ID: []
	MOVSDmr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] FR64:%vreg1 Node Type ID: []
	%vreg6<def> = MOVSDrm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] FR64:%vreg6 dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@.str.10>; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg3; GR64:%vreg3 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%XMM0<def> = COPY %vreg6; FR64:%vreg6 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = COPY %vreg4; GR8:%vreg4 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %XMM0<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%vreg5<def> = COPY %EAX; GR32:%vreg5 dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printDoubleLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %XMM0

BB#0: derived from LLVM BB %1
    Live Ins: %XMM0 %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOVSDmr %RBP, 1, %noreg, -8, %noreg, %XMM0<kill>; mem:ST8[%2] Node Type ID: []
	%XMM0<def> = MOVSDrm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:84:20 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.10>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	%AL<def> = MOV8ri 1; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %XMM0<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:84:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:85:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:85:1 Node Type ID: []

# End machine code for function printDoubleLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printStructLine(%struct._twoIntsStruct*) #0 !dbg !429 !effectiveSanArgs !432 {
  %2 = alloca %struct._twoIntsStruct*, align 8, !effectiveSan !45
  store %struct._twoIntsStruct* %0, %struct._twoIntsStruct** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._twoIntsStruct** %2, metadata !433, metadata !312), !dbg !434
  %3 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !435, !effectiveSan !46
  %4 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %3, i32 0, i32 0, !dbg !436, !effectiveSan !17
  %5 = load i32, i32* %4, align 4, !dbg !436, !effectiveSan !12
  %6 = load %struct._twoIntsStruct*, %struct._twoIntsStruct** %2, align 8, !dbg !437, !effectiveSan !46
  %7 = getelementptr inbounds %struct._twoIntsStruct, %struct._twoIntsStruct* %6, i32 0, i32 1, !dbg !438, !effectiveSan !17
  %8 = load i32, i32* %7, align 4, !dbg !438, !effectiveSan !12
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i32 %5, i32 %8), !dbg !439, !effectiveSan !12
  ret void, !dbg !440
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printStructLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg13<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg13 dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%vreg12<def> = MOV32rm %vreg13, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%vreg12 GR64:%vreg13 dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg10 dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 4, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.11>; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%ESI<def> = COPY %vreg12; GR32:%vreg12 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EDX<def> = COPY %vreg9; GR32:%vreg9 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %EDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printStructLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg13<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg13 dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%vreg12<def> = MOV32rm %vreg13, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%vreg12 GR64:%vreg13 dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg10 dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 4, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.11>; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%ESI<def> = COPY %vreg12; GR32:%vreg12 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EDX<def> = COPY %vreg9; GR32:%vreg9 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %EDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg13<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg13 dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%vreg12<def> = MOV32rm %vreg13, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%vreg12 GR64:%vreg13 dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg10 dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 4, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.11>; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%ESI<def> = COPY %vreg12; GR32:%vreg12 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EDX<def> = COPY %vreg9; GR32:%vreg9 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %EDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg13<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg13 dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%vreg12<def> = MOV32rm %vreg13, 1, %noreg, 0, %noreg; mem:LD4[%4] GR32:%vreg12 GR64:%vreg13 dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2] GR64:%vreg10 dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 4, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg4<def> = MOV64ri <ga:@.str.11>; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg5<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg6<def> = COPY %vreg5:sub_8bit; GR8:%vreg6 GR32:%vreg5 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg4; GR64:%vreg4 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%ESI<def> = COPY %vreg12; GR32:%vreg12 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EDX<def> = COPY %vreg9; GR32:%vreg9 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = COPY %vreg6; GR8:%vreg6 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %EDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%vreg7<def> = COPY %EAX; GR32:%vreg7 dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = COPY %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printStructLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:26 Node Type ID: []
	%ESI<def> = MOV32rm %RDI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%4] dbg:../../testcasesupport/io.c:89:47 Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2] dbg:../../testcasesupport/io.c:89:55 Node Type ID: []
	%EDX<def> = MOV32rm %RDI<kill>, 1, %noreg, 4, %noreg; mem:LD4[%7] dbg:../../testcasesupport/io.c:89:76 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.11>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	%AL<def> = MOV8rr %CL<kill>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:89:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -12, %noreg, %EAX<kill>; mem:ST4[FixedStack1] dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:90:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:90:1 Node Type ID: []

# End machine code for function printStructLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @printBytesLine(i8*, i64) #0 !dbg !441 !effectiveSanArgs !444 {
  %3 = alloca i8*, align 8, !effectiveSan !56
  %4 = alloca i64, align 8, !effectiveSan !29
  %5 = alloca i64, align 8, !effectiveSan !29
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !445, metadata !312), !dbg !446
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !447, metadata !312), !dbg !448
  call void @llvm.dbg.declare(metadata i64* %5, metadata !449, metadata !312), !dbg !450
  store i64 0, i64* %5, align 8, !dbg !451
  br label %6, !dbg !453

; <label>:6:                                      ; preds = %17, %2
  %7 = load i64, i64* %5, align 8, !dbg !454, !effectiveSan !30
  %8 = load i64, i64* %4, align 8, !dbg !457, !effectiveSan !30
  %9 = icmp ult i64 %7, %8, !dbg !458
  br i1 %9, label %10, label %20, !dbg !459

; <label>:10:                                     ; preds = %6
  %11 = load i8*, i8** %3, align 8, !dbg !461, !effectiveSan !57
  %12 = load i64, i64* %5, align 8, !dbg !463, !effectiveSan !30
  %13 = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !461
  %14 = load i8, i8* %13, align 1, !dbg !461, !effectiveSan !58
  %15 = zext i8 %14 to i32, !dbg !461
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 %15), !dbg !464, !effectiveSan !12
  br label %17, !dbg !465

; <label>:17:                                     ; preds = %10
  %18 = load i64, i64* %5, align 8, !dbg !466, !effectiveSan !30
  %19 = add i64 %18, 1, !dbg !466
  store i64 %19, i64* %5, align 8, !dbg !466
  br label %6, !dbg !468, !llvm.loop !469

; <label>:20:                                     ; preds = %6
  %21 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i32 0, i32 0)), !dbg !472, !effectiveSan !12
  ret void, !dbg !473
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function printBytesLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mi32 <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %vreg6, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Predecessors according to CFG: BB#1
	%vreg19<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg19 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%vreg18<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%vreg15<def> = MOVZX32rm8 %vreg19, 1, %vreg18, 0, %noreg; mem:LD1[%13] GR32:%vreg15 GR64:%vreg19 GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg10<def> = MOV64ri <ga:@.str.12>; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg11<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg12<def> = COPY %vreg11:sub_8bit; GR8:%vreg12 GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%ESI<def> = COPY %vreg15; GR32:%vreg15 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = COPY %vreg12; GR8:%vreg12 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg13<def> = COPY %EAX; GR32:%vreg13 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Predecessors according to CFG: BB#2
	%vreg23<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%vreg22<def,tied1> = ADD64ri8 %vreg23<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg22,%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg22<kill>; mem:ST8[%5] GR64:%vreg22 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.13>; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg8<def> = COPY %EAX; GR32:%vreg8 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function printBytesLine: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mi32 <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %vreg6, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Predecessors according to CFG: BB#1
	%vreg19<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg19 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%vreg18<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%vreg15<def> = MOVZX32rm8 %vreg19, 1, %vreg18, 0, %noreg; mem:LD1[%13] GR32:%vreg15 GR64:%vreg19 GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg10<def> = MOV64ri <ga:@.str.12>; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg11<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg12<def> = COPY %vreg11:sub_8bit; GR8:%vreg12 GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%ESI<def> = COPY %vreg15; GR32:%vreg15 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = COPY %vreg12; GR8:%vreg12 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg13<def> = COPY %EAX; GR32:%vreg13 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Predecessors according to CFG: BB#2
	%vreg23<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%vreg22<def,tied1> = ADD64ri8 %vreg23<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg22,%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg22<kill>; mem:ST8[%5] GR64:%vreg22 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.13>; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg8<def> = COPY %EAX; GR32:%vreg8 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mi32 <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %vreg6, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Predecessors according to CFG: BB#1
	%vreg19<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg19 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%vreg18<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%vreg15<def> = MOVZX32rm8 %vreg19, 1, %vreg18, 0, %noreg; mem:LD1[%13] GR32:%vreg15 GR64:%vreg19 GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg10<def> = MOV64ri <ga:@.str.12>; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg11<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg12<def> = COPY %vreg11:sub_8bit; GR8:%vreg12 GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%ESI<def> = COPY %vreg15; GR32:%vreg15 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = COPY %vreg12; GR8:%vreg12 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg13<def> = COPY %EAX; GR32:%vreg13 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Predecessors according to CFG: BB#2
	%vreg23<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%vreg22<def,tied1> = ADD64ri8 %vreg23<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg22,%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg22<kill>; mem:ST8[%5] GR64:%vreg22 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.13>; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg8<def> = COPY %EAX; GR32:%vreg8 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mi32 <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Predecessors according to CFG: BB#0 BB#3
	%vreg6<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %vreg6, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] GR64:%vreg6 dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Predecessors according to CFG: BB#1
	%vreg19<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg19 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%vreg18<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%vreg15<def> = MOVZX32rm8 %vreg19, 1, %vreg18, 0, %noreg; mem:LD1[%13] GR32:%vreg15 GR64:%vreg19 GR64_NOSP:%vreg18 dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg10<def> = MOV64ri <ga:@.str.12>; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg11<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg12<def> = COPY %vreg11:sub_8bit; GR8:%vreg12 GR32:%vreg11 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%ESI<def> = COPY %vreg15; GR32:%vreg15 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = COPY %vreg12; GR8:%vreg12 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %ESI<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%vreg13<def> = COPY %EAX; GR32:%vreg13 dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Predecessors according to CFG: BB#2
	%vreg23<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%5] GR64:%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%vreg22<def> = COPY %vreg23; GR64:%vreg22,%vreg23 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%vreg22<def,tied1> = ADD64ri8 %vreg22<tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg22 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg22<kill>; mem:ST8[%5] GR64:%vreg22 dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Predecessors according to CFG: BB#1
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.13>; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	%vreg8<def> = COPY %EAX; GR32:%vreg8 dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = COPY %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = COPY %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = MOV8rr %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = MOV8rr %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = MOV8rr %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = MOV8rr %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = MOV8rr %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = MOV8rr %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function printBytesLine: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=4, align=4, at location [SP-36]
  fi#4: size=4, align=4, at location [SP-40]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -24, %noreg, 0; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %6
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#3
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:17 Node Type ID: []
	CMP64rm %RAX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%4] dbg:../../testcasesupport/io.c:95:19 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %10
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%3] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:97:30 Node Type ID: []
	%ESI<def> = MOVZX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%13] dbg:../../testcasesupport/io.c:97:24 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%R8B<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	%AL<def> = MOV8rr %R8B<kill>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	CALL64pcrel32 <ga:@printf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %ESI<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:97:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -28, %noreg, %EAX<kill>; mem:ST4[FixedStack3] Node Type ID: []
    Successors according to CFG: BB#3

BB#3: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%5] dbg:../../testcasesupport/io.c:95:31 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:95:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#4: derived from LLVM BB %20
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RDI<def> = MOV64ri <ga:@.str.13>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	CALL64pcrel32 <ga:@puts>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:99:5 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -32, %noreg, %EAX<kill>; mem:ST4[FixedStack4] dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:100:1 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:100:1 Node Type ID: []

# End machine code for function printBytesLine.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #7, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #7, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #6, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexChars(i8*, i64, i8*) #3 !dbg !474 !effectiveSanArgs !477 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i8*, align 8, !effectiveSan !8
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !478, metadata !312), !dbg !479
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !480, metadata !312), !dbg !481
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !482, metadata !312), !dbg !483
  call void @llvm.dbg.declare(metadata i64* %7, metadata !484, metadata !312), !dbg !485
  store i64 0, i64* %7, align 8, !dbg !485
  br label %9, !dbg !486

; <label>:9:                                      ; preds = %34, %3
  %10 = load i64, i64* %7, align 8, !dbg !487, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !489, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !490
  br i1 %12, label %13, label %32, !dbg !491

; <label>:13:                                     ; preds = %9
  %14 = load i8*, i8** %6, align 8, !dbg !492, !effectiveSan !9
  %15 = load i64, i64* %7, align 8, !dbg !494, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !495
  %17 = getelementptr inbounds i8, i8* %14, i64 %16, !dbg !492
  %18 = load i8, i8* %17, align 1, !dbg !492, !effectiveSan !10
  %19 = sext i8 %18 to i32, !dbg !492
  %20 = call i32 @isxdigit(i32 %19) #7, !dbg !496, !effectiveSan !12
  %21 = icmp ne i32 %20, 0, !dbg !496
  br i1 %21, label %22, label %32, !dbg !497

; <label>:22:                                     ; preds = %13
  %23 = load i8*, i8** %6, align 8, !dbg !498, !effectiveSan !9
  %24 = load i64, i64* %7, align 8, !dbg !500, !effectiveSan !30
  %25 = mul i64 2, %24, !dbg !501
  %26 = add i64 %25, 1, !dbg !502
  %27 = getelementptr inbounds i8, i8* %23, i64 %26, !dbg !498
  %28 = load i8, i8* %27, align 1, !dbg !498, !effectiveSan !10
  %29 = sext i8 %28 to i32, !dbg !498
  %30 = call i32 @isxdigit(i32 %29) #7, !dbg !503, !effectiveSan !12
  %31 = icmp ne i32 %30, 0, !dbg !503
  br label %32

; <label>:32:                                     ; preds = %22, %13, %9
  %33 = phi i1 [ false, %13 ], [ false, %9 ], [ %31, %22 ]
  br i1 %33, label %34, label %47, !dbg !504

; <label>:34:                                     ; preds = %32
  call void @llvm.dbg.declare(metadata i32* %8, metadata !506, metadata !312), !dbg !508
  %35 = load i8*, i8** %6, align 8, !dbg !509, !effectiveSan !9
  %36 = load i64, i64* %7, align 8, !dbg !510, !effectiveSan !30
  %37 = mul i64 2, %36, !dbg !511
  %38 = getelementptr inbounds i8, i8* %35, i64 %37, !dbg !509
  %39 = call i32 (i8*, i8*, ...) @sscanf(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32* %8) #6, !dbg !512, !effectiveSan !12
  %40 = load i32, i32* %8, align 4, !dbg !513, !effectiveSan !12
  %41 = trunc i32 %40 to i8, !dbg !513
  %42 = load i8*, i8** %4, align 8, !dbg !514, !effectiveSan !42
  %43 = load i64, i64* %7, align 8, !dbg !515, !effectiveSan !30
  %44 = getelementptr inbounds i8, i8* %42, i64 %43, !dbg !514
  store i8 %41, i8* %44, align 1, !dbg !516
  %45 = load i64, i64* %7, align 8, !dbg !517, !effectiveSan !30
  %46 = add i64 %45, 1, !dbg !517
  store i64 %46, i64* %7, align 8, !dbg !517
  br label %9, !dbg !518, !llvm.loop !520

; <label>:47:                                     ; preds = %32
  %48 = load i64, i64* %7, align 8, !dbg !522, !effectiveSan !30
  ret i64 %48, !dbg !523
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function decodeHexChars: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg25<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg25 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%vreg24<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg24 dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%vreg23<def,tied1> = SHL64ri %vreg24<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg23 GR64:%vreg24 dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%vreg19<def> = MOVSX32rm8 %vreg25, 1, %vreg23, 0, %noreg; mem:LD1[%17] GR32:%vreg19 GR64:%vreg25 GR64_NOSP:%vreg23 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def> = COPY %vreg19; GR32:%vreg19 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Predecessors according to CFG: BB#2
	%vreg37<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg37 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%vreg36<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg36 dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%vreg35<def,tied1> = SHL64ri %vreg36<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg35 GR64:%vreg36 dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%vreg31<def> = MOVSX32rm8 %vreg37, 1, %vreg35, 1, %noreg; mem:LD1[%27] GR32:%vreg31 GR64:%vreg37 GR64_NOSP:%vreg35 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg29<def> = COPY %EAX; GR32:%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg27<def> = COPY %vreg29; GR32:%vreg27,%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %vreg27, 0, %EFLAGS<imp-def>; GR32:%vreg27 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg26<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg26 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = PHI %vreg9, <BB#1>, %vreg14, <BB#2>, %vreg26, <BB#3>; GR8:%vreg1,%vreg9,%vreg14,%vreg26 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Predecessors according to CFG: BB#4
	%vreg64<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg64 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%vreg63<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg63 dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%vreg62<def,tied1> = SHL64ri %vreg63<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg62,%vreg63 dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%vreg60<def,tied1> = ADD64rr %vreg64<kill,tied0>, %vreg62<kill>, %EFLAGS<imp-def>; GR64:%vreg60,%vreg64,%vreg62 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg53<def> = MOV64ri <ga:@.str.12>; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg54<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg55<def> = COPY %vreg54:sub_8bit; GR8:%vreg55 GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg56<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg56 Node Type ID: []
	%RDI<def> = COPY %vreg60; GR64:%vreg60 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RSI<def> = COPY %vreg53; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = COPY %vreg56; GR64:%vreg56 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = COPY %vreg55; GR8:%vreg55 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg57<def> = COPY %EAX; GR32:%vreg57 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg51<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg50<def> = COPY %vreg51:sub_8bit<kill>; GR8:%vreg50 GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg48<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg48 dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%vreg47<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg47 dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %vreg48, 1, %vreg47, 0, %noreg, %vreg50<kill>; mem:ST1[%44] GR64:%vreg48 GR64_NOSP:%vreg47 GR8:%vreg50 dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%vreg43<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%vreg42<def,tied1> = ADD64ri8 %vreg43<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg42,%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg42<kill>; mem:ST8[%7] GR64:%vreg42 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Predecessors according to CFG: BB#4
	%vreg39<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg39 dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RAX<def> = COPY %vreg39; GR64:%vreg39 dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function decodeHexChars: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg25<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg25 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%vreg24<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg24 dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%vreg23<def,tied1> = SHL64ri %vreg24<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg23 GR64:%vreg24 dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%vreg19<def> = MOVSX32rm8 %vreg25, 1, %vreg23, 0, %noreg; mem:LD1[%17] GR32:%vreg19 GR64:%vreg25 GR64_NOSP:%vreg23 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def> = COPY %vreg19; GR32:%vreg19 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Predecessors according to CFG: BB#2
	%vreg37<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg37 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%vreg36<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg36 dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%vreg35<def,tied1> = SHL64ri %vreg36<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg35 GR64:%vreg36 dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%vreg31<def> = MOVSX32rm8 %vreg37, 1, %vreg35, 1, %noreg; mem:LD1[%27] GR32:%vreg31 GR64:%vreg37 GR64_NOSP:%vreg35 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg29<def> = COPY %EAX; GR32:%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg27<def> = COPY %vreg29; GR32:%vreg27,%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %vreg27, 0, %EFLAGS<imp-def>; GR32:%vreg27 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg26<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg26 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = PHI %vreg9, <BB#1>, %vreg14, <BB#2>, %vreg26, <BB#3>; GR8:%vreg1,%vreg9,%vreg14,%vreg26 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Predecessors according to CFG: BB#4
	%vreg64<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg64 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%vreg63<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg63 dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%vreg62<def,tied1> = SHL64ri %vreg63<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg62,%vreg63 dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%vreg60<def,tied1> = ADD64rr %vreg64<kill,tied0>, %vreg62<kill>, %EFLAGS<imp-def>; GR64:%vreg60,%vreg64,%vreg62 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg53<def> = MOV64ri <ga:@.str.12>; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg54<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg55<def> = COPY %vreg54:sub_8bit; GR8:%vreg55 GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg56<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg56 Node Type ID: []
	%RDI<def> = COPY %vreg60; GR64:%vreg60 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RSI<def> = COPY %vreg53; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = COPY %vreg56; GR64:%vreg56 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = COPY %vreg55; GR8:%vreg55 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg57<def> = COPY %EAX; GR32:%vreg57 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg51<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg50<def> = COPY %vreg51:sub_8bit<kill>; GR8:%vreg50 GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg48<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg48 dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%vreg47<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg47 dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %vreg48, 1, %vreg47, 0, %noreg, %vreg50<kill>; mem:ST1[%44] GR64:%vreg48 GR64_NOSP:%vreg47 GR8:%vreg50 dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%vreg43<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%vreg42<def,tied1> = ADD64ri8 %vreg43<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg42,%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg42<kill>; mem:ST8[%7] GR64:%vreg42 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Predecessors according to CFG: BB#4
	%vreg39<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg39 dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RAX<def> = COPY %vreg39; GR64:%vreg39 dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	%vreg65<def> = COPY %vreg9; GR8:%vreg65,%vreg9 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg25<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg25 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%vreg24<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg24 dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%vreg23<def,tied1> = SHL64ri %vreg24<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg23 GR64:%vreg24 dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%vreg19<def> = MOVSX32rm8 %vreg25, 1, %vreg23, 0, %noreg; mem:LD1[%17] GR32:%vreg19 GR64:%vreg25 GR64_NOSP:%vreg23 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def> = COPY %vreg19; GR32:%vreg19 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg65<def> = COPY %vreg14; GR8:%vreg65,%vreg14 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Predecessors according to CFG: BB#2
	%vreg37<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg37 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%vreg36<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg36 dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%vreg35<def,tied1> = SHL64ri %vreg36<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg35 GR64:%vreg36 dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%vreg31<def> = MOVSX32rm8 %vreg37, 1, %vreg35, 1, %noreg; mem:LD1[%27] GR32:%vreg31 GR64:%vreg37 GR64_NOSP:%vreg35 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg29<def> = COPY %EAX; GR32:%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg27<def> = COPY %vreg29; GR32:%vreg27,%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %vreg27, 0, %EFLAGS<imp-def>; GR32:%vreg27 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg26<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg26 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg65<def> = COPY %vreg26; GR8:%vreg65,%vreg26 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = COPY %vreg65; GR8:%vreg1,%vreg65 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Predecessors according to CFG: BB#4
	%vreg64<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg64 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%vreg63<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg63 dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%vreg62<def,tied1> = SHL64ri %vreg63<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg62,%vreg63 dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%vreg60<def,tied1> = ADD64rr %vreg64<kill,tied0>, %vreg62<kill>, %EFLAGS<imp-def>; GR64:%vreg60,%vreg64,%vreg62 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg53<def> = MOV64ri <ga:@.str.12>; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg54<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg55<def> = COPY %vreg54:sub_8bit; GR8:%vreg55 GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg56<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg56 Node Type ID: []
	%RDI<def> = COPY %vreg60; GR64:%vreg60 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RSI<def> = COPY %vreg53; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = COPY %vreg56; GR64:%vreg56 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = COPY %vreg55; GR8:%vreg55 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg57<def> = COPY %EAX; GR32:%vreg57 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg51<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg50<def> = COPY %vreg51:sub_8bit<kill>; GR8:%vreg50 GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg48<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg48 dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%vreg47<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg47 dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %vreg48, 1, %vreg47, 0, %noreg, %vreg50<kill>; mem:ST1[%44] GR64:%vreg48 GR64_NOSP:%vreg47 GR8:%vreg50 dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%vreg43<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%vreg42<def,tied1> = ADD64ri8 %vreg43<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg42,%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg42<kill>; mem:ST8[%7] GR64:%vreg42 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Predecessors according to CFG: BB#4
	%vreg39<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg39 dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RAX<def> = COPY %vreg39; GR64:%vreg39 dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	%vreg65<def> = COPY %vreg9; GR8:%vreg65,%vreg9 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg25<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg25 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%vreg24<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg24 dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%vreg23<def> = COPY %vreg24; GR64_NOSP:%vreg23 GR64:%vreg24 dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%vreg23<def,tied1> = SHL64ri %vreg23<tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg23 dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%vreg19<def> = MOVSX32rm8 %vreg25, 1, %vreg23, 0, %noreg; mem:LD1[%17] GR32:%vreg19 GR64:%vreg25 GR64_NOSP:%vreg23 dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def> = COPY %vreg19; GR32:%vreg19 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%vreg65<def> = COPY %vreg14; GR8:%vreg65,%vreg14 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Predecessors according to CFG: BB#2
	%vreg37<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg37 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%vreg36<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg36 dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%vreg35<def> = COPY %vreg36; GR64_NOSP:%vreg35 GR64:%vreg36 dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%vreg35<def,tied1> = SHL64ri %vreg35<tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg35 dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%vreg31<def> = MOVSX32rm8 %vreg37, 1, %vreg35, 1, %noreg; mem:LD1[%27] GR32:%vreg31 GR64:%vreg37 GR64_NOSP:%vreg35 dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg29<def> = COPY %EAX; GR32:%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg27<def> = COPY %vreg29; GR32:%vreg27,%vreg29 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %vreg27, 0, %EFLAGS<imp-def>; GR32:%vreg27 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg26<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg26 dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%vreg65<def> = COPY %vreg26; GR8:%vreg65,%vreg26 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = COPY %vreg65; GR8:%vreg1,%vreg65 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Predecessors according to CFG: BB#4
	%vreg64<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg64 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%vreg63<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg63 dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%vreg62<def> = COPY %vreg63; GR64:%vreg62,%vreg63 dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%vreg62<def,tied1> = SHL64ri %vreg62<tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg62 dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%vreg60<def> = COPY %vreg64; GR64:%vreg60,%vreg64 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%vreg60<def,tied1> = ADD64rr %vreg60<tied0>, %vreg62<kill>, %EFLAGS<imp-def>; GR64:%vreg60,%vreg62 dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg53<def> = MOV64ri <ga:@.str.12>; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg54<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg55<def> = COPY %vreg54:sub_8bit; GR8:%vreg55 GR32:%vreg54 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg56<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg56 Node Type ID: []
	%RDI<def> = COPY %vreg60; GR64:%vreg60 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RSI<def> = COPY %vreg53; GR64:%vreg53 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = COPY %vreg56; GR64:%vreg56 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = COPY %vreg55; GR8:%vreg55 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg57<def> = COPY %EAX; GR32:%vreg57 dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%vreg51<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg50<def> = COPY %vreg51:sub_8bit<kill>; GR8:%vreg50 GR32:%vreg51 dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%vreg48<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg48 dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%vreg47<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg47 dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %vreg48, 1, %vreg47, 0, %noreg, %vreg50<kill>; mem:ST1[%44] GR64:%vreg48 GR64_NOSP:%vreg47 GR8:%vreg50 dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%vreg43<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%vreg42<def> = COPY %vreg43; GR64:%vreg42,%vreg43 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%vreg42<def,tied1> = ADD64ri8 %vreg42<tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg42 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg42<kill>; mem:ST8[%7] GR64:%vreg42 dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Predecessors according to CFG: BB#4
	%vreg39<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg39 dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RAX<def> = COPY %vreg39; GR64:%vreg39 dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def> = MOV32r0 %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def> = MOV32r0 %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = COPY %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = COPY %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = COPY %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = COPY %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function decodeHexChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:107:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:113:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:54 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:52 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 0, %noreg; mem:LD1[%17] dbg:../../testcasesupport/io.c:113:46 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:67 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %22
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:113:87 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:85 Node Type ID: []
	%EDI<def> = MOVSX32rm8 %RAX<kill>, 1, %RCX<kill>, 1, %noreg; mem:LD1[%27] dbg:../../testcasesupport/io.c:113:79 Node Type ID: []
	CALL64pcrel32 <ga:@isxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:70 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %34
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:116:25 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:23 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:116:17 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.12>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	CALL64pcrel32 <ga:@sscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:116:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:117:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:117:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:117:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%44] dbg:../../testcasesupport/io.c:117:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:118:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:113:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %47
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:121:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:121:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:121:5 Node Type ID: []

# End machine code for function decodeHexChars.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define i64 @decodeHexWChars(i8*, i64, i32*) #3 !dbg !524 !effectiveSanArgs !527 {
  %4 = alloca i8*, align 8, !effectiveSan !59
  %5 = alloca i64, align 8, !effectiveSan !29
  %6 = alloca i32*, align 8, !effectiveSan !13
  %7 = alloca i64, align 8, !effectiveSan !29
  %8 = alloca i32, align 4, !effectiveSan !17
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !528, metadata !312), !dbg !529
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !530, metadata !312), !dbg !531
  store i32* %2, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !532, metadata !312), !dbg !533
  call void @llvm.dbg.declare(metadata i64* %7, metadata !534, metadata !312), !dbg !535
  store i64 0, i64* %7, align 8, !dbg !535
  br label %9, !dbg !536

; <label>:9:                                      ; preds = %32, %3
  %10 = load i64, i64* %7, align 8, !dbg !537, !effectiveSan !30
  %11 = load i64, i64* %5, align 8, !dbg !539, !effectiveSan !30
  %12 = icmp ult i64 %10, %11, !dbg !540
  br i1 %12, label %13, label %30, !dbg !541

; <label>:13:                                     ; preds = %9
  %14 = load i32*, i32** %6, align 8, !dbg !542, !effectiveSan !14
  %15 = load i64, i64* %7, align 8, !dbg !544, !effectiveSan !30
  %16 = mul i64 2, %15, !dbg !545
  %17 = getelementptr inbounds i32, i32* %14, i64 %16, !dbg !542
  %18 = load i32, i32* %17, align 4, !dbg !542, !effectiveSan !15
  %19 = call i32 @iswxdigit(i32 %18) #6, !dbg !546, !effectiveSan !12
  %20 = icmp ne i32 %19, 0, !dbg !546
  br i1 %20, label %21, label %30, !dbg !547

; <label>:21:                                     ; preds = %13
  %22 = load i32*, i32** %6, align 8, !dbg !548, !effectiveSan !14
  %23 = load i64, i64* %7, align 8, !dbg !550, !effectiveSan !30
  %24 = mul i64 2, %23, !dbg !551
  %25 = add i64 %24, 1, !dbg !552
  %26 = getelementptr inbounds i32, i32* %22, i64 %25, !dbg !548
  %27 = load i32, i32* %26, align 4, !dbg !548, !effectiveSan !15
  %28 = call i32 @iswxdigit(i32 %27) #6, !dbg !553, !effectiveSan !12
  %29 = icmp ne i32 %28, 0, !dbg !553
  br label %30

; <label>:30:                                     ; preds = %21, %13, %9
  %31 = phi i1 [ false, %13 ], [ false, %9 ], [ %29, %21 ]
  br i1 %31, label %32, label %45, !dbg !554

; <label>:32:                                     ; preds = %30
  call void @llvm.dbg.declare(metadata i32* %8, metadata !556, metadata !312), !dbg !558
  %33 = load i32*, i32** %6, align 8, !dbg !559, !effectiveSan !14
  %34 = load i64, i64* %7, align 8, !dbg !560, !effectiveSan !30
  %35 = mul i64 2, %34, !dbg !561
  %36 = getelementptr inbounds i32, i32* %33, i64 %35, !dbg !559
  %37 = call i32 (i32*, i32*, ...) @swscanf(i32* %36, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @.str.14, i32 0, i32 0), i32* %8) #6, !dbg !562, !effectiveSan !12
  %38 = load i32, i32* %8, align 4, !dbg !563, !effectiveSan !12
  %39 = trunc i32 %38 to i8, !dbg !563
  %40 = load i8*, i8** %4, align 8, !dbg !564, !effectiveSan !42
  %41 = load i64, i64* %7, align 8, !dbg !565, !effectiveSan !30
  %42 = getelementptr inbounds i8, i8* %40, i64 %41, !dbg !564
  store i8 %39, i8* %42, align 1, !dbg !566
  %43 = load i64, i64* %7, align 8, !dbg !567, !effectiveSan !30
  %44 = add i64 %43, 1, !dbg !567
  store i64 %44, i64* %7, align 8, !dbg !567
  br label %9, !dbg !568, !llvm.loop !570

; <label>:45:                                     ; preds = %30
  %46 = load i64, i64* %7, align 8, !dbg !572, !effectiveSan !30
  ret i64 %46, !dbg !573
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function decodeHexWChars: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg24<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg24 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%vreg23<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg23 dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%vreg22<def,tied1> = SHL64ri %vreg23<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg22 GR64:%vreg23 dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%vreg20<def> = MOV32rm %vreg24, 4, %vreg22, 0, %noreg; mem:LD4[%17] GR32:%vreg20 GR64:%vreg24 GR64_NOSP:%vreg22 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def> = COPY %vreg20; GR32:%vreg20 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Predecessors according to CFG: BB#2
	%vreg35<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg35 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%vreg34<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg34 dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%vreg33<def,tied1> = SHL64ri %vreg34<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg33 GR64:%vreg34 dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%vreg31<def> = MOV32rm %vreg35, 4, %vreg33, 4, %noreg; mem:LD4[%26] GR32:%vreg31 GR64:%vreg35 GR64_NOSP:%vreg33 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg28<def> = COPY %EAX; GR32:%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg26<def> = COPY %vreg28; GR32:%vreg26,%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %vreg26, 0, %EFLAGS<imp-def>; GR32:%vreg26 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg25<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg25 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = PHI %vreg9, <BB#1>, %vreg14, <BB#2>, %vreg25, <BB#3>; GR8:%vreg1,%vreg9,%vreg14,%vreg25 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Predecessors according to CFG: BB#4
	%vreg63<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg63 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg62<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg62 dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%vreg61<def,tied1> = SHL64ri %vreg62<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg61,%vreg62 dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%vreg58<def,tied1> = SHL64ri %vreg61<kill,tied0>, 2, %EFLAGS<imp-def>; GR64:%vreg58,%vreg61 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg59<def,tied1> = ADD64rr %vreg63<kill,tied0>, %vreg58<kill>, %EFLAGS<imp-def>; GR64:%vreg59,%vreg63,%vreg58 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg51<def> = MOV64ri <ga:@.str.14>; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg52<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg53<def> = COPY %vreg52:sub_8bit; GR8:%vreg53 GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg54<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg54 Node Type ID: []
	%RDI<def> = COPY %vreg59; GR64:%vreg59 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RSI<def> = COPY %vreg51; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = COPY %vreg54; GR64:%vreg54 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = COPY %vreg53; GR8:%vreg53 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg55<def> = COPY %EAX; GR32:%vreg55 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg49<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg48<def> = COPY %vreg49:sub_8bit<kill>; GR8:%vreg48 GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg46<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg46 dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%vreg45<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg45 dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %vreg46, 1, %vreg45, 0, %noreg, %vreg48<kill>; mem:ST1[%42] GR64:%vreg46 GR64_NOSP:%vreg45 GR8:%vreg48 dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%vreg41<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%vreg40<def,tied1> = ADD64ri8 %vreg41<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg40,%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg40<kill>; mem:ST8[%7] GR64:%vreg40 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Predecessors according to CFG: BB#4
	%vreg37<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg37 dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RAX<def> = COPY %vreg37; GR64:%vreg37 dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function decodeHexWChars: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg24<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg24 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%vreg23<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg23 dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%vreg22<def,tied1> = SHL64ri %vreg23<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg22 GR64:%vreg23 dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%vreg20<def> = MOV32rm %vreg24, 4, %vreg22, 0, %noreg; mem:LD4[%17] GR32:%vreg20 GR64:%vreg24 GR64_NOSP:%vreg22 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def> = COPY %vreg20; GR32:%vreg20 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Predecessors according to CFG: BB#2
	%vreg35<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg35 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%vreg34<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg34 dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%vreg33<def,tied1> = SHL64ri %vreg34<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg33 GR64:%vreg34 dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%vreg31<def> = MOV32rm %vreg35, 4, %vreg33, 4, %noreg; mem:LD4[%26] GR32:%vreg31 GR64:%vreg35 GR64_NOSP:%vreg33 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg28<def> = COPY %EAX; GR32:%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg26<def> = COPY %vreg28; GR32:%vreg26,%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %vreg26, 0, %EFLAGS<imp-def>; GR32:%vreg26 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg25<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg25 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = PHI %vreg9, <BB#1>, %vreg14, <BB#2>, %vreg25, <BB#3>; GR8:%vreg1,%vreg9,%vreg14,%vreg25 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Predecessors according to CFG: BB#4
	%vreg63<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg63 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg62<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg62 dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%vreg61<def,tied1> = SHL64ri %vreg62<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg61,%vreg62 dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%vreg58<def,tied1> = SHL64ri %vreg61<kill,tied0>, 2, %EFLAGS<imp-def>; GR64:%vreg58,%vreg61 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg59<def,tied1> = ADD64rr %vreg63<kill,tied0>, %vreg58<kill>, %EFLAGS<imp-def>; GR64:%vreg59,%vreg63,%vreg58 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg51<def> = MOV64ri <ga:@.str.14>; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg52<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg53<def> = COPY %vreg52:sub_8bit; GR8:%vreg53 GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg54<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg54 Node Type ID: []
	%RDI<def> = COPY %vreg59; GR64:%vreg59 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RSI<def> = COPY %vreg51; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = COPY %vreg54; GR64:%vreg54 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = COPY %vreg53; GR8:%vreg53 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg55<def> = COPY %EAX; GR32:%vreg55 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg49<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg48<def> = COPY %vreg49:sub_8bit<kill>; GR8:%vreg48 GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg46<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg46 dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%vreg45<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg45 dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %vreg46, 1, %vreg45, 0, %noreg, %vreg48<kill>; mem:ST1[%42] GR64:%vreg46 GR64_NOSP:%vreg45 GR8:%vreg48 dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%vreg41<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%vreg40<def,tied1> = ADD64ri8 %vreg41<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg40,%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg40<kill>; mem:ST8[%7] GR64:%vreg40 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Predecessors according to CFG: BB#4
	%vreg37<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg37 dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RAX<def> = COPY %vreg37; GR64:%vreg37 dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	%vreg64<def> = COPY %vreg9; GR8:%vreg64,%vreg9 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg24<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg24 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%vreg23<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg23 dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%vreg22<def,tied1> = SHL64ri %vreg23<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg22 GR64:%vreg23 dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%vreg20<def> = MOV32rm %vreg24, 4, %vreg22, 0, %noreg; mem:LD4[%17] GR32:%vreg20 GR64:%vreg24 GR64_NOSP:%vreg22 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def> = COPY %vreg20; GR32:%vreg20 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg64<def> = COPY %vreg14; GR8:%vreg64,%vreg14 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Predecessors according to CFG: BB#2
	%vreg35<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg35 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%vreg34<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg34 dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%vreg33<def,tied1> = SHL64ri %vreg34<kill,tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg33 GR64:%vreg34 dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%vreg31<def> = MOV32rm %vreg35, 4, %vreg33, 4, %noreg; mem:LD4[%26] GR32:%vreg31 GR64:%vreg35 GR64_NOSP:%vreg33 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg28<def> = COPY %EAX; GR32:%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg26<def> = COPY %vreg28; GR32:%vreg26,%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %vreg26, 0, %EFLAGS<imp-def>; GR32:%vreg26 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg25<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg25 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg64<def> = COPY %vreg25; GR8:%vreg64,%vreg25 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = COPY %vreg64; GR8:%vreg1,%vreg64 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Predecessors according to CFG: BB#4
	%vreg63<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg63 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg62<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg62 dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%vreg61<def,tied1> = SHL64ri %vreg62<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg61,%vreg62 dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%vreg58<def,tied1> = SHL64ri %vreg61<kill,tied0>, 2, %EFLAGS<imp-def>; GR64:%vreg58,%vreg61 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg59<def,tied1> = ADD64rr %vreg63<kill,tied0>, %vreg58<kill>, %EFLAGS<imp-def>; GR64:%vreg59,%vreg63,%vreg58 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg51<def> = MOV64ri <ga:@.str.14>; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg52<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg53<def> = COPY %vreg52:sub_8bit; GR8:%vreg53 GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg54<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg54 Node Type ID: []
	%RDI<def> = COPY %vreg59; GR64:%vreg59 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RSI<def> = COPY %vreg51; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = COPY %vreg54; GR64:%vreg54 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = COPY %vreg53; GR8:%vreg53 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg55<def> = COPY %EAX; GR32:%vreg55 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg49<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg48<def> = COPY %vreg49:sub_8bit<kill>; GR8:%vreg48 GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg46<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg46 dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%vreg45<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg45 dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %vreg46, 1, %vreg45, 0, %noreg, %vreg48<kill>; mem:ST1[%42] GR64:%vreg46 GR64_NOSP:%vreg45 GR8:%vreg48 dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%vreg41<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%vreg40<def,tied1> = ADD64ri8 %vreg41<kill,tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg40,%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg40<kill>; mem:ST8[%7] GR64:%vreg40 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Predecessors according to CFG: BB#4
	%vreg37<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg37 dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RAX<def> = COPY %vreg37; GR64:%vreg37 dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
  fi#3: size=8, align=8, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: %RDI in %vreg2, %RSI in %vreg4, %RDX in %vreg6

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX
	%vreg6<def> = COPY %RDX; GR64:%vreg6 Node Type ID: []
	%vreg4<def> = COPY %RSI; GR64:%vreg4 Node Type ID: []
	%vreg2<def> = COPY %RDI; GR64:%vreg2 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg5<def> = COPY %vreg4<kill>; GR64:%vreg5,%vreg4 Node Type ID: []
	%vreg7<def> = COPY %vreg6<kill>; GR64:%vreg7,%vreg6 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg5; mem:ST8[%5] GR64:%vreg5 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg7; mem:ST8[%6] GR64:%vreg7 Node Type ID: []
	MOV64mi32 <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Predecessors according to CFG: BB#0 BB#5
	%vreg8<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg8 Node Type ID: []
	%vreg9<def> = COPY %vreg8:sub_8bit<kill>; GR8:%vreg9 GR32:%vreg8 Node Type ID: []
	%vreg12<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %vreg12, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] GR64:%vreg12 dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	%vreg64<def> = COPY %vreg9; GR8:%vreg64,%vreg9 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Predecessors according to CFG: BB#1
	%vreg24<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg24 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%vreg23<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg23 dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%vreg22<def> = COPY %vreg23; GR64_NOSP:%vreg22 GR64:%vreg23 dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%vreg22<def,tied1> = SHL64ri %vreg22<tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg22 dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%vreg20<def> = MOV32rm %vreg24, 4, %vreg22, 0, %noreg; mem:LD4[%17] GR32:%vreg20 GR64:%vreg24 GR64_NOSP:%vreg22 dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def> = COPY %vreg20; GR32:%vreg20 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg17<def> = COPY %EAX; GR32:%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg15<def> = COPY %vreg17; GR32:%vreg15,%vreg17 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg13<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg13 Node Type ID: []
	%vreg14<def> = COPY %vreg13:sub_8bit<kill>; GR8:%vreg14 GR32:%vreg13 Node Type ID: []
	CMP32ri8 %vreg15, 0, %EFLAGS<imp-def>; GR32:%vreg15 dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%vreg64<def> = COPY %vreg14; GR8:%vreg64,%vreg14 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Predecessors according to CFG: BB#2
	%vreg35<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg35 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%vreg34<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg34 dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%vreg33<def> = COPY %vreg34; GR64_NOSP:%vreg33 GR64:%vreg34 dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%vreg33<def,tied1> = SHL64ri %vreg33<tied0>, 1, %EFLAGS<imp-def>; GR64_NOSP:%vreg33 dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%vreg31<def> = MOV32rm %vreg35, 4, %vreg33, 4, %noreg; mem:LD4[%26] GR32:%vreg31 GR64:%vreg35 GR64_NOSP:%vreg33 dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%EDI<def> = COPY %vreg31; GR32:%vreg31 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg28<def> = COPY %EAX; GR32:%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg26<def> = COPY %vreg28; GR32:%vreg26,%vreg28 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %vreg26, 0, %EFLAGS<imp-def>; GR32:%vreg26 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg25<def> = SETNEr %EFLAGS<imp-use>; GR8:%vreg25 dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%vreg64<def> = COPY %vreg25; GR8:%vreg64,%vreg25 Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%vreg1<def> = COPY %vreg64; GR8:%vreg1,%vreg64 Node Type ID: []
	TEST8ri %vreg1, 1, %EFLAGS<imp-def>; GR8:%vreg1 dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Predecessors according to CFG: BB#4
	%vreg63<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%6] GR64:%vreg63 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg62<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg62 dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%vreg61<def> = COPY %vreg62; GR64:%vreg61,%vreg62 dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%vreg61<def,tied1> = SHL64ri %vreg61<tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg61 dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%vreg58<def> = COPY %vreg61; GR64:%vreg58,%vreg61 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg58<def,tied1> = SHL64ri %vreg58<tied0>, 2, %EFLAGS<imp-def>; GR64:%vreg58 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg59<def> = COPY %vreg63; GR64:%vreg59,%vreg63 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%vreg59<def,tied1> = ADD64rr %vreg59<tied0>, %vreg58<kill>, %EFLAGS<imp-def>; GR64:%vreg59,%vreg58 dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg51<def> = MOV64ri <ga:@.str.14>; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg52<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg53<def> = COPY %vreg52:sub_8bit; GR8:%vreg53 GR32:%vreg52 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg54<def> = LEA64r <fi#4>, 1, %noreg, 0, %noreg; GR64:%vreg54 Node Type ID: []
	%RDI<def> = COPY %vreg59; GR64:%vreg59 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RSI<def> = COPY %vreg51; GR64:%vreg51 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = COPY %vreg54; GR64:%vreg54 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = COPY %vreg53; GR8:%vreg53 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %RDX<imp-use>, %AL<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg55<def> = COPY %EAX; GR32:%vreg55 dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%vreg49<def> = MOV32rm <fi#4>, 1, %noreg, 0, %noreg; mem:LD4[%8] GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg48<def> = COPY %vreg49:sub_8bit<kill>; GR8:%vreg48 GR32:%vreg49 dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%vreg46<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg46 dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%vreg45<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64_NOSP:%vreg45 dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %vreg46, 1, %vreg45, 0, %noreg, %vreg48<kill>; mem:ST1[%42] GR64:%vreg46 GR64_NOSP:%vreg45 GR8:%vreg48 dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%vreg41<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%vreg40<def> = COPY %vreg41; GR64:%vreg40,%vreg41 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%vreg40<def,tied1> = ADD64ri8 %vreg40<tied0>, 1, %EFLAGS<imp-def>; GR64:%vreg40 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr <fi#3>, 1, %noreg, 0, %noreg, %vreg40<kill>; mem:ST8[%7] GR64:%vreg40 dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Predecessors according to CFG: BB#4
	%vreg37<def> = MOV64rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD8[%7] GR64:%vreg37 dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RAX<def> = COPY %vreg37; GR64:%vreg37 dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def> = MOV32r0 %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = COPY %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def> = MOV32r0 %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = COPY %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = COPY %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = COPY %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = COPY %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function decodeHexWChars: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=4, align=4, at location [SP-44]
  fi#5: size=1, align=1, at location [SP-45]
  fi#6: size=1, align=1, at location [SP-46]
  fi#7: size=4, align=4, at location [SP-52]
Function Live Ins: %RDI, %RSI, %RDX

BB#0: derived from LLVM BB %3
    Live Ins: %RDI %RSI %RDX %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RDX<kill>; mem:ST8[%6] Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -32, %noreg, 0; mem:ST8[%7] dbg:../../testcasesupport/io.c:129:12 Node Type ID: []
    Successors according to CFG: BB#1

BB#1: derived from LLVM BB %9
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#5
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%CL<def> = MOV8rr %AL, %EAX<imp-use,kill> Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:12 Node Type ID: []
	CMP64rm %RDX<kill>, %RBP, 1, %noreg, -16, %noreg, %EFLAGS<imp-def>; mem:LD8[%5] dbg:../../testcasesupport/io.c:135:23 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %CL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
	JAE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:34 Node Type ID: []
    Successors according to CFG: BB#4 BB#2

BB#2: derived from LLVM BB %13
    Live Ins: %RBP
    Predecessors according to CFG: BB#1
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:55 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:53 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 0, %noreg; mem:LD4[%17] dbg:../../testcasesupport/io.c:135:47 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	%EDI<def,tied1> = XOR32rr %EDI<undef,tied0>, %EDI<undef>, %EFLAGS<imp-def> Node Type ID: []
	%DL<def> = MOV8rr %DIL, %EDI<imp-use,kill> Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:37 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
	JE_1 <BB#4>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:68 Node Type ID: []
    Successors according to CFG: BB#4 BB#3

BB#3: derived from LLVM BB %21
    Live Ins: %RBP
    Predecessors according to CFG: BB#2
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:135:89 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:87 Node Type ID: []
	%EDI<def> = MOV32rm %RAX<kill>, 4, %RCX<kill>, 4, %noreg; mem:LD4[%26] dbg:../../testcasesupport/io.c:135:81 Node Type ID: []
	CALL64pcrel32 <ga:@iswxdigit>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	CMP32ri8 %EAX<kill>, 0, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	%DL<def> = SETNEr %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:71 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -37, %noreg, %DL<kill>; mem:ST1[FixedStack5] Node Type ID: []
    Successors according to CFG: BB#4

BB#4: derived from LLVM BB %30
    Live Ins: %RBP
    Predecessors according to CFG: BB#1 BB#2 BB#3
	%AL<def> = MOV8rm %RBP, 1, %noreg, -37, %noreg; mem:LD1[FixedStack5] Node Type ID: []
	TEST8ri %AL<kill>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JNE_1 <BB#5>, %EFLAGS<imp-use>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#6>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#5 BB#6

BB#5: derived from LLVM BB %32
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%6] dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:138:26 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:24 Node Type ID: []
	%RCX<def,tied1> = SHL64ri %RCX<tied0>, 2, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RAX<def,tied1> = ADD64rr %RAX<tied0>, %RCX<kill>, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:138:18 Node Type ID: []
	%RSI<def> = MOV64ri <ga:@.str.14>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%EDX<def,tied1> = XOR32rr %EDX<undef,tied0>, %EDX<undef>, %EFLAGS<imp-def,dead>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%DIL<def> = MOV8rr %DL, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -36, %noreg Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -38, %noreg, %DIL<kill>; mem:ST1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%AL<def> = MOV8rm %RBP, 1, %noreg, -38, %noreg; mem:LD1[FixedStack6] dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	CALL64pcrel32 <ga:@swscanf>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %RDX<imp-use,kill>, %AL<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:138:9 Node Type ID: []
	%R8D<def> = MOV32rm %RBP, 1, %noreg, -36, %noreg; mem:LD4[%8] dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%R9B<def> = MOV8rr %R8B, %R8D<imp-use,kill>; dbg:../../testcasesupport/io.c:139:45 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%4] dbg:../../testcasesupport/io.c:139:9 Node Type ID: []
	%RDX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:139:15 Node Type ID: []
	MOV8mr %RCX<kill>, 1, %RDX<kill>, 0, %noreg, %R9B<kill>; mem:ST1[%42] dbg:../../testcasesupport/io.c:139:27 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	%RCX<def,tied1> = ADD64ri8 %RCX<tied0>, 1, %EFLAGS<imp-def>; dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[%7] dbg:../../testcasesupport/io.c:140:9 Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -44, %noreg, %EAX<kill>; mem:ST4[FixedStack7] dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
	JMP_1 <BB#1>; dbg:../../testcasesupport/io.c:135:5 Node Type ID: []
    Successors according to CFG: BB#1

BB#6: derived from LLVM BB %45
    Live Ins: %RBP
    Predecessors according to CFG: BB#4
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -32, %noreg; mem:LD8[%7] dbg:../../testcasesupport/io.c:143:12 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 48, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:143:5 Node Type ID: []
	RETQ %RAX<imp-use,kill>; dbg:../../testcasesupport/io.c:143:5 Node Type ID: []

# End machine code for function decodeHexWChars.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrue() #3 !dbg !574 !effectiveSanArgs !5 {
  ret i32 1, !dbg !575
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function globalReturnsTrue: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32ri 1; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function globalReturnsTrue: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32ri 1; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32ri 1; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32ri 1; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function globalReturnsTrue: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32ri 1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:150:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:150:5 Node Type ID: []

# End machine code for function globalReturnsTrue.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsFalse() #3 !dbg !576 !effectiveSanArgs !5 {
  ret i32 0, !dbg !577
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function globalReturnsFalse: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function globalReturnsFalse: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	%vreg0<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg0 Node Type ID: []
	%EAX<def> = COPY %vreg0; GR32:%vreg0 dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function globalReturnsFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:155:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:155:5 Node Type ID: []

# End machine code for function globalReturnsFalse.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define i32 @globalReturnsTrueOrFalse() #3 !dbg !578 !effectiveSanArgs !5 {
  %1 = call i32 @rand() #6, !dbg !579, !effectiveSan !12
  %2 = srem i32 %1, 2, !dbg !580
  ret i32 %2, !dbg !581
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function globalReturnsTrueOrFalse: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg4<def> = COPY %EAX; GR32:%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg1<def> = COPY %vreg4; GR32:%vreg1,%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg2<def> = MOV32ri 2; GR32:%vreg2 Node Type ID: []
	%EAX<def> = COPY %vreg1; GR32:%vreg1 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %vreg2, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use>, %EDX<imp-use>; GR32:%vreg2 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%vreg3<def> = COPY %EDX; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = COPY %vreg3; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function globalReturnsTrueOrFalse: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg4<def> = COPY %EAX; GR32:%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg1<def> = COPY %vreg4; GR32:%vreg1,%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg2<def> = MOV32ri 2; GR32:%vreg2 Node Type ID: []
	%EAX<def> = COPY %vreg1; GR32:%vreg1 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %vreg2, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use>, %EDX<imp-use>; GR32:%vreg2 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%vreg3<def> = COPY %EDX; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = COPY %vreg3; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg4<def> = COPY %EAX; GR32:%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg1<def> = COPY %vreg4; GR32:%vreg1,%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg2<def> = MOV32ri 2; GR32:%vreg2 Node Type ID: []
	%EAX<def> = COPY %vreg1; GR32:%vreg1 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %vreg2, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use>, %EDX<imp-use>; GR32:%vreg2 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%vreg3<def> = COPY %EDX; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = COPY %vreg3; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg4<def> = COPY %EAX; GR32:%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg1<def> = COPY %vreg4; GR32:%vreg1,%vreg4 dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%vreg2<def> = MOV32ri 2; GR32:%vreg2 Node Type ID: []
	%EAX<def> = COPY %vreg1; GR32:%vreg1 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %vreg2, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use>, %EDX<imp-use>; GR32:%vreg2 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%vreg3<def> = COPY %EDX; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = COPY %vreg3; GR32:%vreg3 dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = COPY %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = MOV32rr %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = MOV32rr %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = MOV32rr %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = MOV32rr %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = MOV32rr %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = MOV32rr %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function globalReturnsTrueOrFalse: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@rand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>, %EAX<imp-def>; dbg:../../testcasesupport/io.c:160:13 Node Type ID: []
	%ECX<def> = MOV32ri 2 Node Type ID: []
	CDQ %EAX<imp-def>, %EDX<imp-def>, %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	IDIV32r %ECX<kill>, %EAX<imp-def>, %EDX<imp-def>, %EFLAGS<imp-def>, %EAX<imp-use,kill>, %EDX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:20 Node Type ID: []
	%EAX<def> = MOV32rr %EDX<kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:160:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:../../testcasesupport/io.c:160:5 Node Type ID: []

# End machine code for function globalReturnsTrueOrFalse.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good1v() #3 !dbg !582 !effectiveSanArgs !5 {
  ret void, !dbg !583
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good1v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good1v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:179:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:179:16 Node Type ID: []

# End machine code for function _Z5good1v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good2v() #3 !dbg !584 !effectiveSanArgs !5 {
  ret void, !dbg !585
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good2v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good2v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:180:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:180:16 Node Type ID: []

# End machine code for function _Z5good2v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good3v() #3 !dbg !586 !effectiveSanArgs !5 {
  ret void, !dbg !587
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good3v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good3v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:181:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:181:16 Node Type ID: []

# End machine code for function _Z5good3v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good4v() #3 !dbg !588 !effectiveSanArgs !5 {
  ret void, !dbg !589
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good4v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good4v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:182:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:182:16 Node Type ID: []

# End machine code for function _Z5good4v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good5v() #3 !dbg !590 !effectiveSanArgs !5 {
  ret void, !dbg !591
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good5v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good5v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:183:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:183:16 Node Type ID: []

# End machine code for function _Z5good5v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good6v() #3 !dbg !592 !effectiveSanArgs !5 {
  ret void, !dbg !593
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good6v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good6v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:184:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:184:16 Node Type ID: []

# End machine code for function _Z5good6v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good7v() #3 !dbg !594 !effectiveSanArgs !5 {
  ret void, !dbg !595
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good7v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good7v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:185:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:185:16 Node Type ID: []

# End machine code for function _Z5good7v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good8v() #3 !dbg !596 !effectiveSanArgs !5 {
  ret void, !dbg !597
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good8v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good8v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:186:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:186:16 Node Type ID: []

# End machine code for function _Z5good8v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z5good9v() #3 !dbg !598 !effectiveSanArgs !5 {
  ret void, !dbg !599
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z5good9v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z5good9v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z5good9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:187:16 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:187:16 Node Type ID: []

# End machine code for function _Z5good9v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad1v() #3 !dbg !600 !effectiveSanArgs !5 {
  ret void, !dbg !601
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad1v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad1v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad1v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:190:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:190:15 Node Type ID: []

# End machine code for function _Z4bad1v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad2v() #3 !dbg !602 !effectiveSanArgs !5 {
  ret void, !dbg !603
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad2v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad2v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad2v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:191:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:191:15 Node Type ID: []

# End machine code for function _Z4bad2v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad3v() #3 !dbg !604 !effectiveSanArgs !5 {
  ret void, !dbg !605
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad3v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad3v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad3v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:192:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:192:15 Node Type ID: []

# End machine code for function _Z4bad3v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad4v() #3 !dbg !606 !effectiveSanArgs !5 {
  ret void, !dbg !607
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad4v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad4v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad4v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:193:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:193:15 Node Type ID: []

# End machine code for function _Z4bad4v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad5v() #3 !dbg !608 !effectiveSanArgs !5 {
  ret void, !dbg !609
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad5v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad5v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad5v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:194:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:194:15 Node Type ID: []

# End machine code for function _Z4bad5v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad6v() #3 !dbg !610 !effectiveSanArgs !5 {
  ret void, !dbg !611
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad6v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad6v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad6v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:195:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:195:15 Node Type ID: []

# End machine code for function _Z4bad6v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad7v() #3 !dbg !612 !effectiveSanArgs !5 {
  ret void, !dbg !613
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad7v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad7v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad7v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:196:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:196:15 Node Type ID: []

# End machine code for function _Z4bad7v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad8v() #3 !dbg !614 !effectiveSanArgs !5 {
  ret void, !dbg !615
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad8v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad8v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad8v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:197:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:197:15 Node Type ID: []

# End machine code for function _Z4bad8v.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define void @_Z4bad9v() #3 !dbg !616 !effectiveSanArgs !5 {
  ret void, !dbg !617
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _Z4bad9v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _Z4bad9v: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _Z4bad9v: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:../../testcasesupport/io.c:198:15 Node Type ID: []
	RETQ; dbg:../../testcasesupport/io.c:198:15 Node Type ID: []

# End machine code for function _Z4bad9v.

1 warning generated.
CWE843_Type_Confusion__char_82a.cpp:37:5: warning: delete called on 'CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base' that is abstract but has non-virtual destructor [-Wdelete-non-virtual-dtor]
    delete baseObject;
    ^
CWE843_Type_Confusion__char_82a.cpp:57:5: warning: delete called on 'CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base' that is abstract but has non-virtual destructor [-Wdelete-non-virtual-dtor]
    delete baseObject;
    ^
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !309
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !311, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !312, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !312, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !312
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !312, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !313, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !312, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !314, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !315
  br i1 %15, label %18, label %16, !dbg !315

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !316, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !316
  br label %18, !dbg !316

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !317
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !318 !effectiveSanArgs !322 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !323, metadata !299), !dbg !324
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !325, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !325
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !325, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !325
  ret void, !dbg !325
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !326 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !327
  ret void, !dbg !328
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !329 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !330, metadata !299), !dbg !331
  store i8* null, i8** %1, align 8, !dbg !332
  call void @llvm.dbg.declare(metadata i32* %2, metadata !333, metadata !299), !dbg !335
  store i32 8, i32* %2, align 4, !dbg !335
  %4 = bitcast i32* %2 to i8*, !dbg !336, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !337
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !338, metadata !299), !dbg !339
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !340, !effectiveSan !50
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !340, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !341
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !340, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !339
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !343, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !344, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !344, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !344
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !344, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !345, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !344, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !347
  br i1 %16, label %19, label %17, !dbg !347

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !348, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !348
  br label %19, !dbg !348

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !349
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !350 !effectiveSanArgs !353 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !354, metadata !299), !dbg !355
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !356, metadata !299), !dbg !357
  %6 = call i64 @time(i64* null) #8, !dbg !358, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !358
  call void @srand(i32 %7) #8, !dbg !359
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !361
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !362
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !363
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !364
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !365
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !366
  ret i32 0, !dbg !367
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !368 !effectiveSanArgs !372 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !373, metadata !299), !dbg !374
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !375, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !375
  ret void, !dbg !375
}
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !376 !effectiveSanArgs !380 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !381, metadata !299), !dbg !382
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !383, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !383
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !383, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !383
  ret void, !dbg !383
}
*** IR Dump After Force set function attributes ***; ModuleID = 'CWE843_Type_Confusion__char_82a.cpp'
source_filename = "CWE843_Type_Confusion__char_82a.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }

$_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev = comdat any

$_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !effectiveSan !0
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !309
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !311, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !312, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !312, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !312
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !312, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !313, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !312, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !314, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !315
  br i1 %15, label %18, label %16, !dbg !315

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !316, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !316
  br label %18, !dbg !316

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !317
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #2

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !318 !effectiveSanArgs !322 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !323, metadata !299), !dbg !324
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !325, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !325
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !325, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !325
  ret void, !dbg !325
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #4

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !326 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !327
  ret void, !dbg !328
}

; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !329 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !330, metadata !299), !dbg !331
  store i8* null, i8** %1, align 8, !dbg !332
  call void @llvm.dbg.declare(metadata i32* %2, metadata !333, metadata !299), !dbg !335
  store i32 8, i32* %2, align 4, !dbg !335
  %4 = bitcast i32* %2 to i8*, !dbg !336, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !337
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !338, metadata !299), !dbg !339
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !340, !effectiveSan !50
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !340, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !341
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !340, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !339
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !343, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !344, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !344, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !344
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !344, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !345, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !344, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !347
  br i1 %16, label %19, label %17, !dbg !347

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !348, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !348
  br label %19, !dbg !348

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !349
}

; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !350 !effectiveSanArgs !353 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !354, metadata !299), !dbg !355
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !356, metadata !299), !dbg !357
  %6 = call i64 @time(i64* null) #9, !dbg !358, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !358
  call void @srand(i32 %7) #9, !dbg !359
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !361
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !362
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !363
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !364
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !365
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !366
  ret i32 0, !dbg !367
}

; Function Attrs: nounwind
declare void @srand(i32) #6

; Function Attrs: nounwind
declare i64 @time(i64*) #6

declare void @printLine(i8*) #7

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !368 !effectiveSanArgs !372 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !373, metadata !299), !dbg !374
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !375, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !375
  ret void, !dbg !375
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !376 !effectiveSanArgs !380 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !381, metadata !299), !dbg !382
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !383, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !383
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !383, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !383
  ret void, !dbg !383
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!294, !295}
!llvm.ident = !{!296}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !59)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82a.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !7, !8, !0, !9, !26, !10, !34, !35, !36, !24, !40, !41, !43, !42, !44, !45, !1, !50, !58}
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !13, file: !12, line: 21, size: 64, elements: !14, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!12 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!13 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !12, line: 18)
!14 = !{!15, !21}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !12, file: !12, baseType: !16, size: 64, flags: DIFlagArtificial)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !18, size: 64)
!18 = !DISubroutineType(types: !19)
!19 = !{!20}
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !11, file: !12, line: 25, type: !22, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !11, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!22 = !DISubroutineType(types: !23)
!23 = !{!24, !25, !0}
!24 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!27 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !13, file: !12, line: 30, size: 64, elements: !28, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!28 = !{!29, !30}
!29 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !27, baseType: !11, flags: DIFlagPublic)
!30 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !27, file: !12, line: 33, type: !31, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !27, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!31 = !DISubroutineType(types: !32)
!32 = !{!24, !33, !0}
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DISubroutineType(types: !38)
!38 = !{!39, !10, !0}
!39 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!43 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DISubroutineType(types: !49)
!49 = !{!20, null}
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64)
!51 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !13, file: !12, line: 40, size: 64, elements: !52, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!52 = !{!53, !54}
!53 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !51, baseType: !11, flags: DIFlagPublic)
!54 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !51, file: !12, line: 43, type: !55, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !51, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!55 = !DISubroutineType(types: !56)
!56 = !{!24, !57, !0}
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!59 = !{!60, !67, !73, !79, !83, !88, !95, !99, !103, !116, !120, !124, !128, !132, !136, !140, !144, !148, !152, !160, !164, !168, !170, !174, !178, !183, !187, !191, !193, !201, !205, !213, !215, !219, !223, !227, !231, !236, !241, !246, !247, !248, !249, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293}
!60 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !63, line: 52)
!61 = !DINamespace(name: "std", scope: null, file: !62, line: 236)
!62 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!63 = !DISubprogram(name: "abs", scope: !64, file: !64, line: 837, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!64 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!65 = !DISubroutineType(types: !66)
!66 = !{!20, !20}
!67 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !68, line: 127)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !64, line: 62, baseType: !69)
!69 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 58, size: 64, elements: !70, identifier: "_ZTS5div_t")
!70 = !{!71, !72}
!71 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !69, file: !64, line: 60, baseType: !20, size: 32)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !69, file: !64, line: 61, baseType: !20, size: 32, offset: 32)
!73 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !74, line: 128)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !64, line: 70, baseType: !75)
!75 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 66, size: 128, elements: !76, identifier: "_ZTS6ldiv_t")
!76 = !{!77, !78}
!77 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !75, file: !64, line: 68, baseType: !43, size: 64)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !75, file: !64, line: 69, baseType: !43, size: 64, offset: 64)
!79 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !80, line: 130)
!80 = !DISubprogram(name: "abort", scope: !64, file: !64, line: 588, type: !81, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!81 = !DISubroutineType(types: !82)
!82 = !{null}
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !84, line: 134)
!84 = !DISubprogram(name: "atexit", scope: !64, file: !64, line: 592, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!85 = !DISubroutineType(types: !86)
!86 = !{!20, !87}
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64)
!88 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !89, line: 140)
!89 = !DISubprogram(name: "atof", scope: !64, file: !64, line: 101, type: !90, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!90 = !DISubroutineType(types: !91)
!91 = !{!92, !93}
!92 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !96, line: 141)
!96 = !DISubprogram(name: "atoi", scope: !64, file: !64, line: 104, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!20, !93}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !100, line: 142)
!100 = !DISubprogram(name: "atol", scope: !64, file: !64, line: 107, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{!43, !93}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !104, line: 143)
!104 = !DISubprogram(name: "bsearch", scope: !64, file: !64, line: 817, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!0, !107, !107, !109, !109, !112}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!109 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !110, line: 62, baseType: !111)
!110 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!111 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !64, line: 805, baseType: !113)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !114, size: 64)
!114 = !DISubroutineType(types: !115)
!115 = !{!20, !107, !107}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !117, line: 144)
!117 = !DISubprogram(name: "calloc", scope: !64, file: !64, line: 541, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!0, !109, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !121, line: 145)
!121 = !DISubprogram(name: "div", scope: !64, file: !64, line: 849, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!68, !20, !20}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !125, line: 146)
!125 = !DISubprogram(name: "exit", scope: !64, file: !64, line: 614, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !20}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !129, line: 147)
!129 = !DISubprogram(name: "free", scope: !64, file: !64, line: 563, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !0}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !133, line: 148)
!133 = !DISubprogram(name: "getenv", scope: !64, file: !64, line: 631, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!8, !93}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !137, line: 149)
!137 = !DISubprogram(name: "labs", scope: !64, file: !64, line: 838, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!43, !43}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !141, line: 150)
!141 = !DISubprogram(name: "ldiv", scope: !64, file: !64, line: 851, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{!74, !43, !43}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !145, line: 151)
!145 = !DISubprogram(name: "malloc", scope: !64, file: !64, line: 539, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{!0, !109}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !149, line: 153)
!149 = !DISubprogram(name: "mblen", scope: !64, file: !64, line: 919, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!20, !93, !109}
!152 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !153, line: 154)
!153 = !DISubprogram(name: "mbstowcs", scope: !64, file: !64, line: 930, type: !154, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!154 = !DISubroutineType(types: !155)
!155 = !{!109, !156, !159, !109}
!156 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !157)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !93)
!160 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !161, line: 155)
!161 = !DISubprogram(name: "mbtowc", scope: !64, file: !64, line: 922, type: !162, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!162 = !DISubroutineType(types: !163)
!163 = !{!20, !156, !159, !109}
!164 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !165, line: 157)
!165 = !DISubprogram(name: "qsort", scope: !64, file: !64, line: 827, type: !166, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!166 = !DISubroutineType(types: !167)
!167 = !{null, !0, !109, !109, !112}
!168 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !169, line: 163)
!169 = !DISubprogram(name: "rand", scope: !64, file: !64, line: 453, type: !18, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!170 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !171, line: 164)
!171 = !DISubprogram(name: "realloc", scope: !64, file: !64, line: 549, type: !172, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!172 = !DISubroutineType(types: !173)
!173 = !{!0, !0, !109}
!174 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !175, line: 165)
!175 = !DISubprogram(name: "srand", scope: !64, file: !64, line: 455, type: !176, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!176 = !DISubroutineType(types: !177)
!177 = !{null, !6}
!178 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !179, line: 166)
!179 = !DISubprogram(name: "strtod", scope: !64, file: !64, line: 117, type: !180, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!180 = !DISubroutineType(types: !181)
!181 = !{!92, !159, !182}
!182 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !42)
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !184, line: 167)
!184 = !DISubprogram(name: "strtol", scope: !64, file: !64, line: 176, type: !185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!185 = !DISubroutineType(types: !186)
!186 = !{!43, !159, !182, !20}
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !188, line: 168)
!188 = !DISubprogram(name: "strtoul", scope: !64, file: !64, line: 180, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!111, !159, !182, !20}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !192, line: 169)
!192 = !DISubprogram(name: "system", scope: !64, file: !64, line: 781, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !194, line: 171)
!194 = !DISubprogram(name: "wcstombs", scope: !64, file: !64, line: 933, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!109, !197, !198, !109}
!197 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !8)
!198 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !199)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !158)
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !202, line: 172)
!202 = !DISubprogram(name: "wctomb", scope: !64, file: !64, line: 926, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!20, !8, !158}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !207, line: 200)
!206 = !DINamespace(name: "__gnu_cxx", scope: null, file: !62, line: 262)
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !64, line: 80, baseType: !208)
!208 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 76, size: 128, elements: !209, identifier: "_ZTS7lldiv_t")
!209 = !{!210, !212}
!210 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !208, file: !64, line: 78, baseType: !211, size: 64)
!211 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !208, file: !64, line: 79, baseType: !211, size: 64, offset: 64)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !214, line: 206)
!214 = !DISubprogram(name: "_Exit", scope: !64, file: !64, line: 626, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !216, line: 210)
!216 = !DISubprogram(name: "llabs", scope: !64, file: !64, line: 841, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!211, !211}
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !220, line: 216)
!220 = !DISubprogram(name: "lldiv", scope: !64, file: !64, line: 855, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!207, !211, !211}
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !224, line: 227)
!224 = !DISubprogram(name: "atoll", scope: !64, file: !64, line: 112, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!211, !93}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !228, line: 228)
!228 = !DISubprogram(name: "strtoll", scope: !64, file: !64, line: 200, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!211, !159, !182, !20}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !232, line: 229)
!232 = !DISubprogram(name: "strtoull", scope: !64, file: !64, line: 205, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!235, !159, !182, !20}
!235 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !237, line: 231)
!237 = !DISubprogram(name: "strtof", scope: !64, file: !64, line: 123, type: !238, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!238 = !DISubroutineType(types: !239)
!239 = !{!240, !159, !182}
!240 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !242, line: 232)
!242 = !DISubprogram(name: "strtold", scope: !64, file: !64, line: 126, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!245, !159, !182}
!245 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !207, line: 240)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !214, line: 242)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !216, line: 244)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !250, line: 245)
!250 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !206, file: !251, line: 213, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !220, line: 246)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !224, line: 248)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !237, line: 249)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !228, line: 250)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !232, line: 251)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !242, line: 252)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !80, line: 38)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !84, line: 39)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 40)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !68, line: 51)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !74, line: 52)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !264, line: 54)
!264 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !61, file: !265, line: 102, type: !266, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!266 = !DISubroutineType(types: !267)
!267 = !{!268, !268}
!268 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !89, line: 55)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !96, line: 56)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 57)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 58)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 59)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !250, line: 60)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 61)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !133, line: 62)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 63)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 64)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 65)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !149, line: 67)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !153, line: 68)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !161, line: 69)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !165, line: 71)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !169, line: 72)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !171, line: 73)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !175, line: 74)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !179, line: 75)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !184, line: 76)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !188, line: 77)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !192, line: 78)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !194, line: 80)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !202, line: 81)
!293 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !2, entity: !13, line: 77)
!294 = !{i32 2, !"Dwarf Version", i32 4}
!295 = !{i32 2, !"Debug Info Version", i32 3}
!296 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!297 = distinct !DISubprogram(name: "bad", linkageName: "_ZN30CWE843_Type_Confusion__char_823badEv", scope: !13, file: !3, line: 25, type: !81, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!298 = !DILocalVariable(name: "data", scope: !297, file: !3, line: 27, type: !0)
!299 = !DIExpression()
!300 = !DILocation(line: 27, column: 12, scope: !297)
!301 = !DILocation(line: 29, column: 10, scope: !297)
!302 = !DILocalVariable(name: "charBuffer", scope: !303, file: !3, line: 32, type: !1)
!303 = distinct !DILexicalBlock(scope: !297, file: !3, line: 30, column: 5)
!304 = !DILocation(line: 32, column: 14, scope: !303)
!305 = !DILocation(line: 33, column: 14, scope: !303)
!306 = !DILocalVariable(name: "baseObject", scope: !297, file: !3, line: 35, type: !10)
!307 = !DILocation(line: 35, column: 42, scope: !297)
!308 = !DILocation(line: 35, column: 55, scope: !297)
!309 = !DILocation(line: 35, column: 59, scope: !310)
!310 = !DILexicalBlockFile(scope: !297, file: !3, discriminator: 1)
!311 = !DILocation(line: 36, column: 5, scope: !297)
!312 = !DILocation(line: 36, column: 17, scope: !297)
!313 = !DILocation(line: 36, column: 24, scope: !297)
!314 = !DILocation(line: 37, column: 12, scope: !297)
!315 = !DILocation(line: 37, column: 5, scope: !297)
!316 = !DILocation(line: 37, column: 5, scope: !310)
!317 = !DILocation(line: 38, column: 1, scope: !297)
!318 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev", scope: !27, file: !12, line: 30, type: !319, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !321, variables: !4)
!319 = !DISubroutineType(types: !320)
!320 = !{null, !33}
!321 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", scope: !27, type: !319, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!322 = !{!26}
!323 = !DILocalVariable(name: "this", arg: 1, scope: !318, type: !26, flags: DIFlagArtificial | DIFlagObjectPointer)
!324 = !DILocation(line: 0, scope: !318)
!325 = !DILocation(line: 30, column: 7, scope: !318)
!326 = distinct !DISubprogram(name: "good", linkageName: "_ZN30CWE843_Type_Confusion__char_824goodEv", scope: !13, file: !3, line: 60, type: !81, isLocal: false, isDefinition: true, scopeLine: 61, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!327 = !DILocation(line: 62, column: 5, scope: !326)
!328 = !DILocation(line: 63, column: 1, scope: !326)
!329 = distinct !DISubprogram(name: "goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv", scope: !13, file: !3, line: 45, type: !81, isLocal: true, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!330 = !DILocalVariable(name: "data", scope: !329, file: !3, line: 47, type: !0)
!331 = !DILocation(line: 47, column: 12, scope: !329)
!332 = !DILocation(line: 49, column: 10, scope: !329)
!333 = !DILocalVariable(name: "intBuffer", scope: !334, file: !3, line: 52, type: !20)
!334 = distinct !DILexicalBlock(scope: !329, file: !3, line: 50, column: 5)
!335 = !DILocation(line: 52, column: 13, scope: !334)
!336 = !DILocation(line: 53, column: 16, scope: !334)
!337 = !DILocation(line: 53, column: 14, scope: !334)
!338 = !DILocalVariable(name: "baseObject", scope: !329, file: !3, line: 55, type: !10)
!339 = !DILocation(line: 55, column: 42, scope: !329)
!340 = !DILocation(line: 55, column: 55, scope: !329)
!341 = !DILocation(line: 55, column: 59, scope: !342)
!342 = !DILexicalBlockFile(scope: !329, file: !3, discriminator: 1)
!343 = !DILocation(line: 56, column: 5, scope: !329)
!344 = !DILocation(line: 56, column: 17, scope: !329)
!345 = !DILocation(line: 56, column: 24, scope: !329)
!346 = !DILocation(line: 57, column: 12, scope: !329)
!347 = !DILocation(line: 57, column: 5, scope: !329)
!348 = !DILocation(line: 57, column: 5, scope: !342)
!349 = !DILocation(line: 58, column: 1, scope: !329)
!350 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 79, type: !351, isLocal: false, isDefinition: true, scopeLine: 80, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!351 = !DISubroutineType(types: !352)
!352 = !{!20, !20, !42}
!353 = !{null, !42}
!354 = !DILocalVariable(name: "argc", arg: 1, scope: !350, file: !3, line: 79, type: !20)
!355 = !DILocation(line: 79, column: 14, scope: !350)
!356 = !DILocalVariable(name: "argv", arg: 2, scope: !350, file: !3, line: 79, type: !42)
!357 = !DILocation(line: 79, column: 27, scope: !350)
!358 = !DILocation(line: 82, column: 22, scope: !350)
!359 = !DILocation(line: 82, column: 5, scope: !360)
!360 = !DILexicalBlockFile(scope: !350, file: !3, discriminator: 1)
!361 = !DILocation(line: 84, column: 5, scope: !350)
!362 = !DILocation(line: 85, column: 5, scope: !350)
!363 = !DILocation(line: 86, column: 5, scope: !350)
!364 = !DILocation(line: 89, column: 5, scope: !350)
!365 = !DILocation(line: 90, column: 5, scope: !350)
!366 = !DILocation(line: 91, column: 5, scope: !350)
!367 = !DILocation(line: 93, column: 5, scope: !350)
!368 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev", scope: !11, file: !12, line: 21, type: !369, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !371, variables: !4)
!369 = !DISubroutineType(types: !370)
!370 = !{null, !25}
!371 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", scope: !11, type: !369, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!372 = !{!10}
!373 = !DILocalVariable(name: "this", arg: 1, scope: !368, type: !10, flags: DIFlagArtificial | DIFlagObjectPointer)
!374 = !DILocation(line: 0, scope: !368)
!375 = !DILocation(line: 21, column: 7, scope: !368)
!376 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev", scope: !51, file: !12, line: 40, type: !377, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !379, variables: !4)
!377 = !DISubroutineType(types: !378)
!378 = !{null, !57}
!379 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !51, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!380 = !{!50}
!381 = !DILocalVariable(name: "this", arg: 1, scope: !376, type: !50, flags: DIFlagArtificial | DIFlagObjectPointer)
!382 = !DILocation(line: 0, scope: !376)
!383 = !DILocation(line: 40, column: 7, scope: !376)
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #2
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !297 !effectiveSanArgs !301 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !302, metadata !303), !dbg !304
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !305, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !305
  ret void, !dbg !305
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !297 !effectiveSanArgs !301 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !302, metadata !303), !dbg !304
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !305, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !305
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !305, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !305
  ret void, !dbg !305
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #4
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !309
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !311, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !312, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !312, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !312
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !312, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !313, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !312, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !314, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !315
  br i1 %15, label %18, label %16, !dbg !315

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !316, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !316
  br label %18, !dbg !316

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !317
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !297 !effectiveSanArgs !301 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !302, metadata !303), !dbg !304
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !305, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !305
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !305, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !305
  ret void, !dbg !305
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i32* %2, metadata !302, metadata !299), !dbg !304
  store i32 8, i32* %2, align 4, !dbg !304
  %4 = bitcast i32* %2 to i8*, !dbg !305, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !306
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !307, metadata !299), !dbg !308
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !309, !effectiveSan !50
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !309, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !310
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !309, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !308
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !313, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !313
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !313, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !313, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !316
  br i1 %16, label %19, label %17, !dbg !316

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !317
  br label %19, !dbg !317

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !318
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !297 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !298
  ret void, !dbg !299
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
declare i64 @time(i64*) #6
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind
declare void @srand(i32) #6
*** IR Dump After Inliner for always_inline functions ***
declare void @printLine(i8*) #7
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !297 !effectiveSanArgs !300 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !301, metadata !302), !dbg !303
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !304, metadata !302), !dbg !305
  %6 = call i64 @time(i64* null) #8, !dbg !306, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !306
  call void @srand(i32 %7) #8, !dbg !307
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !309
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !310
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !311
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !312
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !313
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !314
  ret i32 0, !dbg !315
}
*** IR Dump After Inliner for always_inline functions ***
declare void @__cxa_pure_virtual() unnamed_addr
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'CWE843_Type_Confusion__char_82a.cpp'
source_filename = "CWE843_Type_Confusion__char_82a.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }

$_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev = comdat any

$_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !effectiveSan !0
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !309
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !311, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !312, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !312, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !312
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !312, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !313, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !312, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !314, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !315
  br i1 %15, label %18, label %16, !dbg !315

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !316, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !316
  br label %18, !dbg !316

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !317
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #2

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !318 !effectiveSanArgs !322 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !323, metadata !299), !dbg !324
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !325, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !325
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !325, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !325
  ret void, !dbg !325
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #4

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !326 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !327
  ret void, !dbg !328
}

; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !329 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !330, metadata !299), !dbg !331
  store i8* null, i8** %1, align 8, !dbg !332
  call void @llvm.dbg.declare(metadata i32* %2, metadata !333, metadata !299), !dbg !335
  store i32 8, i32* %2, align 4, !dbg !335
  %4 = bitcast i32* %2 to i8*, !dbg !336, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !337
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !338, metadata !299), !dbg !339
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !340, !effectiveSan !50
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !340, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !341
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !340, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !339
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !343, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !344, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !344, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !344
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !344, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !345, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !344, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !347
  br i1 %16, label %19, label %17, !dbg !347

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !348, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !348
  br label %19, !dbg !348

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !349
}

; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !350 !effectiveSanArgs !353 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !354, metadata !299), !dbg !355
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !356, metadata !299), !dbg !357
  %6 = call i64 @time(i64* null) #9, !dbg !358, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !358
  call void @srand(i32 %7) #9, !dbg !359
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !361
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !362
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !363
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !364
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !365
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !366
  ret i32 0, !dbg !367
}

; Function Attrs: nounwind
declare void @srand(i32) #6

; Function Attrs: nounwind
declare i64 @time(i64*) #6

declare void @printLine(i8*) #7

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !368 !effectiveSanArgs !372 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !373, metadata !299), !dbg !374
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !375, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !375
  ret void, !dbg !375
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !376 !effectiveSanArgs !380 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !381, metadata !299), !dbg !382
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !383, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !383
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !383, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !383
  ret void, !dbg !383
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!294, !295}
!llvm.ident = !{!296}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !59)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82a.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !7, !8, !0, !9, !26, !10, !34, !35, !36, !24, !40, !41, !43, !42, !44, !45, !1, !50, !58}
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !13, file: !12, line: 21, size: 64, elements: !14, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!12 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!13 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !12, line: 18)
!14 = !{!15, !21}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !12, file: !12, baseType: !16, size: 64, flags: DIFlagArtificial)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !18, size: 64)
!18 = !DISubroutineType(types: !19)
!19 = !{!20}
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !11, file: !12, line: 25, type: !22, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !11, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!22 = !DISubroutineType(types: !23)
!23 = !{!24, !25, !0}
!24 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!27 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !13, file: !12, line: 30, size: 64, elements: !28, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!28 = !{!29, !30}
!29 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !27, baseType: !11, flags: DIFlagPublic)
!30 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !27, file: !12, line: 33, type: !31, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !27, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!31 = !DISubroutineType(types: !32)
!32 = !{!24, !33, !0}
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DISubroutineType(types: !38)
!38 = !{!39, !10, !0}
!39 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!43 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DISubroutineType(types: !49)
!49 = !{!20, null}
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64)
!51 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !13, file: !12, line: 40, size: 64, elements: !52, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!52 = !{!53, !54}
!53 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !51, baseType: !11, flags: DIFlagPublic)
!54 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !51, file: !12, line: 43, type: !55, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !51, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!55 = !DISubroutineType(types: !56)
!56 = !{!24, !57, !0}
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!59 = !{!60, !67, !73, !79, !83, !88, !95, !99, !103, !116, !120, !124, !128, !132, !136, !140, !144, !148, !152, !160, !164, !168, !170, !174, !178, !183, !187, !191, !193, !201, !205, !213, !215, !219, !223, !227, !231, !236, !241, !246, !247, !248, !249, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293}
!60 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !63, line: 52)
!61 = !DINamespace(name: "std", scope: null, file: !62, line: 236)
!62 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!63 = !DISubprogram(name: "abs", scope: !64, file: !64, line: 837, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!64 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!65 = !DISubroutineType(types: !66)
!66 = !{!20, !20}
!67 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !68, line: 127)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !64, line: 62, baseType: !69)
!69 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 58, size: 64, elements: !70, identifier: "_ZTS5div_t")
!70 = !{!71, !72}
!71 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !69, file: !64, line: 60, baseType: !20, size: 32)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !69, file: !64, line: 61, baseType: !20, size: 32, offset: 32)
!73 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !74, line: 128)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !64, line: 70, baseType: !75)
!75 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 66, size: 128, elements: !76, identifier: "_ZTS6ldiv_t")
!76 = !{!77, !78}
!77 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !75, file: !64, line: 68, baseType: !43, size: 64)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !75, file: !64, line: 69, baseType: !43, size: 64, offset: 64)
!79 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !80, line: 130)
!80 = !DISubprogram(name: "abort", scope: !64, file: !64, line: 588, type: !81, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!81 = !DISubroutineType(types: !82)
!82 = !{null}
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !84, line: 134)
!84 = !DISubprogram(name: "atexit", scope: !64, file: !64, line: 592, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!85 = !DISubroutineType(types: !86)
!86 = !{!20, !87}
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64)
!88 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !89, line: 140)
!89 = !DISubprogram(name: "atof", scope: !64, file: !64, line: 101, type: !90, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!90 = !DISubroutineType(types: !91)
!91 = !{!92, !93}
!92 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !96, line: 141)
!96 = !DISubprogram(name: "atoi", scope: !64, file: !64, line: 104, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!20, !93}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !100, line: 142)
!100 = !DISubprogram(name: "atol", scope: !64, file: !64, line: 107, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{!43, !93}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !104, line: 143)
!104 = !DISubprogram(name: "bsearch", scope: !64, file: !64, line: 817, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!0, !107, !107, !109, !109, !112}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!109 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !110, line: 62, baseType: !111)
!110 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!111 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !64, line: 805, baseType: !113)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !114, size: 64)
!114 = !DISubroutineType(types: !115)
!115 = !{!20, !107, !107}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !117, line: 144)
!117 = !DISubprogram(name: "calloc", scope: !64, file: !64, line: 541, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!0, !109, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !121, line: 145)
!121 = !DISubprogram(name: "div", scope: !64, file: !64, line: 849, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!68, !20, !20}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !125, line: 146)
!125 = !DISubprogram(name: "exit", scope: !64, file: !64, line: 614, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !20}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !129, line: 147)
!129 = !DISubprogram(name: "free", scope: !64, file: !64, line: 563, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !0}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !133, line: 148)
!133 = !DISubprogram(name: "getenv", scope: !64, file: !64, line: 631, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!8, !93}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !137, line: 149)
!137 = !DISubprogram(name: "labs", scope: !64, file: !64, line: 838, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!43, !43}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !141, line: 150)
!141 = !DISubprogram(name: "ldiv", scope: !64, file: !64, line: 851, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{!74, !43, !43}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !145, line: 151)
!145 = !DISubprogram(name: "malloc", scope: !64, file: !64, line: 539, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{!0, !109}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !149, line: 153)
!149 = !DISubprogram(name: "mblen", scope: !64, file: !64, line: 919, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!20, !93, !109}
!152 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !153, line: 154)
!153 = !DISubprogram(name: "mbstowcs", scope: !64, file: !64, line: 930, type: !154, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!154 = !DISubroutineType(types: !155)
!155 = !{!109, !156, !159, !109}
!156 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !157)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !93)
!160 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !161, line: 155)
!161 = !DISubprogram(name: "mbtowc", scope: !64, file: !64, line: 922, type: !162, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!162 = !DISubroutineType(types: !163)
!163 = !{!20, !156, !159, !109}
!164 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !165, line: 157)
!165 = !DISubprogram(name: "qsort", scope: !64, file: !64, line: 827, type: !166, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!166 = !DISubroutineType(types: !167)
!167 = !{null, !0, !109, !109, !112}
!168 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !169, line: 163)
!169 = !DISubprogram(name: "rand", scope: !64, file: !64, line: 453, type: !18, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!170 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !171, line: 164)
!171 = !DISubprogram(name: "realloc", scope: !64, file: !64, line: 549, type: !172, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!172 = !DISubroutineType(types: !173)
!173 = !{!0, !0, !109}
!174 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !175, line: 165)
!175 = !DISubprogram(name: "srand", scope: !64, file: !64, line: 455, type: !176, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!176 = !DISubroutineType(types: !177)
!177 = !{null, !6}
!178 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !179, line: 166)
!179 = !DISubprogram(name: "strtod", scope: !64, file: !64, line: 117, type: !180, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!180 = !DISubroutineType(types: !181)
!181 = !{!92, !159, !182}
!182 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !42)
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !184, line: 167)
!184 = !DISubprogram(name: "strtol", scope: !64, file: !64, line: 176, type: !185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!185 = !DISubroutineType(types: !186)
!186 = !{!43, !159, !182, !20}
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !188, line: 168)
!188 = !DISubprogram(name: "strtoul", scope: !64, file: !64, line: 180, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!111, !159, !182, !20}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !192, line: 169)
!192 = !DISubprogram(name: "system", scope: !64, file: !64, line: 781, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !194, line: 171)
!194 = !DISubprogram(name: "wcstombs", scope: !64, file: !64, line: 933, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!109, !197, !198, !109}
!197 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !8)
!198 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !199)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !158)
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !202, line: 172)
!202 = !DISubprogram(name: "wctomb", scope: !64, file: !64, line: 926, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!20, !8, !158}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !207, line: 200)
!206 = !DINamespace(name: "__gnu_cxx", scope: null, file: !62, line: 262)
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !64, line: 80, baseType: !208)
!208 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 76, size: 128, elements: !209, identifier: "_ZTS7lldiv_t")
!209 = !{!210, !212}
!210 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !208, file: !64, line: 78, baseType: !211, size: 64)
!211 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !208, file: !64, line: 79, baseType: !211, size: 64, offset: 64)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !214, line: 206)
!214 = !DISubprogram(name: "_Exit", scope: !64, file: !64, line: 626, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !216, line: 210)
!216 = !DISubprogram(name: "llabs", scope: !64, file: !64, line: 841, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!211, !211}
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !220, line: 216)
!220 = !DISubprogram(name: "lldiv", scope: !64, file: !64, line: 855, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!207, !211, !211}
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !224, line: 227)
!224 = !DISubprogram(name: "atoll", scope: !64, file: !64, line: 112, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!211, !93}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !228, line: 228)
!228 = !DISubprogram(name: "strtoll", scope: !64, file: !64, line: 200, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!211, !159, !182, !20}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !232, line: 229)
!232 = !DISubprogram(name: "strtoull", scope: !64, file: !64, line: 205, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!235, !159, !182, !20}
!235 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !237, line: 231)
!237 = !DISubprogram(name: "strtof", scope: !64, file: !64, line: 123, type: !238, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!238 = !DISubroutineType(types: !239)
!239 = !{!240, !159, !182}
!240 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !242, line: 232)
!242 = !DISubprogram(name: "strtold", scope: !64, file: !64, line: 126, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!245, !159, !182}
!245 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !207, line: 240)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !214, line: 242)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !216, line: 244)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !250, line: 245)
!250 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !206, file: !251, line: 213, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !220, line: 246)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !224, line: 248)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !237, line: 249)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !228, line: 250)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !232, line: 251)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !242, line: 252)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !80, line: 38)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !84, line: 39)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 40)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !68, line: 51)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !74, line: 52)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !264, line: 54)
!264 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !61, file: !265, line: 102, type: !266, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!266 = !DISubroutineType(types: !267)
!267 = !{!268, !268}
!268 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !89, line: 55)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !96, line: 56)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 57)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 58)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 59)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !250, line: 60)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 61)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !133, line: 62)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 63)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 64)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 65)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !149, line: 67)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !153, line: 68)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !161, line: 69)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !165, line: 71)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !169, line: 72)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !171, line: 73)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !175, line: 74)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !179, line: 75)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !184, line: 76)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !188, line: 77)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !192, line: 78)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !194, line: 80)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !202, line: 81)
!293 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !2, entity: !13, line: 77)
!294 = !{i32 2, !"Dwarf Version", i32 4}
!295 = !{i32 2, !"Debug Info Version", i32 3}
!296 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!297 = distinct !DISubprogram(name: "bad", linkageName: "_ZN30CWE843_Type_Confusion__char_823badEv", scope: !13, file: !3, line: 25, type: !81, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!298 = !DILocalVariable(name: "data", scope: !297, file: !3, line: 27, type: !0)
!299 = !DIExpression()
!300 = !DILocation(line: 27, column: 12, scope: !297)
!301 = !DILocation(line: 29, column: 10, scope: !297)
!302 = !DILocalVariable(name: "charBuffer", scope: !303, file: !3, line: 32, type: !1)
!303 = distinct !DILexicalBlock(scope: !297, file: !3, line: 30, column: 5)
!304 = !DILocation(line: 32, column: 14, scope: !303)
!305 = !DILocation(line: 33, column: 14, scope: !303)
!306 = !DILocalVariable(name: "baseObject", scope: !297, file: !3, line: 35, type: !10)
!307 = !DILocation(line: 35, column: 42, scope: !297)
!308 = !DILocation(line: 35, column: 55, scope: !297)
!309 = !DILocation(line: 35, column: 59, scope: !310)
!310 = !DILexicalBlockFile(scope: !297, file: !3, discriminator: 1)
!311 = !DILocation(line: 36, column: 5, scope: !297)
!312 = !DILocation(line: 36, column: 17, scope: !297)
!313 = !DILocation(line: 36, column: 24, scope: !297)
!314 = !DILocation(line: 37, column: 12, scope: !297)
!315 = !DILocation(line: 37, column: 5, scope: !297)
!316 = !DILocation(line: 37, column: 5, scope: !310)
!317 = !DILocation(line: 38, column: 1, scope: !297)
!318 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev", scope: !27, file: !12, line: 30, type: !319, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !321, variables: !4)
!319 = !DISubroutineType(types: !320)
!320 = !{null, !33}
!321 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", scope: !27, type: !319, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!322 = !{!26}
!323 = !DILocalVariable(name: "this", arg: 1, scope: !318, type: !26, flags: DIFlagArtificial | DIFlagObjectPointer)
!324 = !DILocation(line: 0, scope: !318)
!325 = !DILocation(line: 30, column: 7, scope: !318)
!326 = distinct !DISubprogram(name: "good", linkageName: "_ZN30CWE843_Type_Confusion__char_824goodEv", scope: !13, file: !3, line: 60, type: !81, isLocal: false, isDefinition: true, scopeLine: 61, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!327 = !DILocation(line: 62, column: 5, scope: !326)
!328 = !DILocation(line: 63, column: 1, scope: !326)
!329 = distinct !DISubprogram(name: "goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv", scope: !13, file: !3, line: 45, type: !81, isLocal: true, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!330 = !DILocalVariable(name: "data", scope: !329, file: !3, line: 47, type: !0)
!331 = !DILocation(line: 47, column: 12, scope: !329)
!332 = !DILocation(line: 49, column: 10, scope: !329)
!333 = !DILocalVariable(name: "intBuffer", scope: !334, file: !3, line: 52, type: !20)
!334 = distinct !DILexicalBlock(scope: !329, file: !3, line: 50, column: 5)
!335 = !DILocation(line: 52, column: 13, scope: !334)
!336 = !DILocation(line: 53, column: 16, scope: !334)
!337 = !DILocation(line: 53, column: 14, scope: !334)
!338 = !DILocalVariable(name: "baseObject", scope: !329, file: !3, line: 55, type: !10)
!339 = !DILocation(line: 55, column: 42, scope: !329)
!340 = !DILocation(line: 55, column: 55, scope: !329)
!341 = !DILocation(line: 55, column: 59, scope: !342)
!342 = !DILexicalBlockFile(scope: !329, file: !3, discriminator: 1)
!343 = !DILocation(line: 56, column: 5, scope: !329)
!344 = !DILocation(line: 56, column: 17, scope: !329)
!345 = !DILocation(line: 56, column: 24, scope: !329)
!346 = !DILocation(line: 57, column: 12, scope: !329)
!347 = !DILocation(line: 57, column: 5, scope: !329)
!348 = !DILocation(line: 57, column: 5, scope: !342)
!349 = !DILocation(line: 58, column: 1, scope: !329)
!350 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 79, type: !351, isLocal: false, isDefinition: true, scopeLine: 80, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!351 = !DISubroutineType(types: !352)
!352 = !{!20, !20, !42}
!353 = !{null, !42}
!354 = !DILocalVariable(name: "argc", arg: 1, scope: !350, file: !3, line: 79, type: !20)
!355 = !DILocation(line: 79, column: 14, scope: !350)
!356 = !DILocalVariable(name: "argv", arg: 2, scope: !350, file: !3, line: 79, type: !42)
!357 = !DILocation(line: 79, column: 27, scope: !350)
!358 = !DILocation(line: 82, column: 22, scope: !350)
!359 = !DILocation(line: 82, column: 5, scope: !360)
!360 = !DILexicalBlockFile(scope: !350, file: !3, discriminator: 1)
!361 = !DILocation(line: 84, column: 5, scope: !350)
!362 = !DILocation(line: 85, column: 5, scope: !350)
!363 = !DILocation(line: 86, column: 5, scope: !350)
!364 = !DILocation(line: 89, column: 5, scope: !350)
!365 = !DILocation(line: 90, column: 5, scope: !350)
!366 = !DILocation(line: 91, column: 5, scope: !350)
!367 = !DILocation(line: 93, column: 5, scope: !350)
!368 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev", scope: !11, file: !12, line: 21, type: !369, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !371, variables: !4)
!369 = !DISubroutineType(types: !370)
!370 = !{null, !25}
!371 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", scope: !11, type: !369, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!372 = !{!10}
!373 = !DILocalVariable(name: "this", arg: 1, scope: !368, type: !10, flags: DIFlagArtificial | DIFlagObjectPointer)
!374 = !DILocation(line: 0, scope: !368)
!375 = !DILocation(line: 21, column: 7, scope: !368)
!376 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev", scope: !51, file: !12, line: 40, type: !377, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !379, variables: !4)
!377 = !DISubroutineType(types: !378)
!378 = !{null, !57}
!379 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !51, type: !377, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!380 = !{!50}
!381 = !DILocalVariable(name: "this", arg: 1, scope: !376, type: !50, flags: DIFlagArtificial | DIFlagObjectPointer)
!382 = !DILocation(line: 0, scope: !376)
!383 = !DILocation(line: 40, column: 7, scope: !376)
warning: EffectiveSan assumes -O2 optimization level; got -O0
       __  __           _   _           ____
  ___ / _|/ _| ___  ___| |_(_)_   _____/ ___|  __ _ _ __
 / _ \ |_| |_ / _ \/ __| __| \ \ / / _ \___ \ / _` | '_ \
|  __/  _|  _|  __/ (__| |_| |\ V /  __/___) | (_| | | | |
 \___|_| |_|  \___|\___|\__|_| \_/ \___|____/ \__,_|_| |_|

	int8_t [+0] (-17179869184..17179869184) <703EDF97BC60677D> {8088147823597479805} <0x2758d28> = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
ADD(0x703EDF97BC60677D, 0x703EDF97BC60677D, 0) = 0x00000000B79F915E {3080687966} [-17179869184..17179869184] index=0 name: int8_t
1.000000 0 0 1
	class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad [+0] (-17179869184..17179869184) <BE824D493E66BF2E> {-4719124482555986130} <0x283e860> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: <0x2838ac8>, file: <0x2838a88>, line: 30, size: 64, elements: <0x2840450>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad:
	class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base [+0] (0..8) <3D0EC2085E57F8CA> {4399667227185903818} <0x283e7e0> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: <0x2838ac8>, file: <0x2838a88>, line: 21, size: 64, elements: <0x283d9a0>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
<0x283e860> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: <0x2838ac8>, file: <0x2838a88>, line: 30, size: 64, elements: <0x2840450>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
	int8_t * [+0] (0..8) <8D0DECDF6C6A8711> {-8282703695323691247} <0x25f3918> = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: <0x2758d28>, size: 64)
<0x283e7e0> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: <0x2838ac8>, file: <0x2838a88>, line: 21, size: 64, elements: <0x283d9a0>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
	+coerced <2317E969C295951D> {2528746356237243677}

ADD(0xBE824D493E66BF2E, 0xBE824D493E66BF2E, 0) = 0x00000000D8FB477A {3640346490} [-17179869184..17179869184] index=10 name: class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad
ADD(0xBE824D493E66BF2E, 0x3D0EC2085E57F8CA, 0) = 0x838C8F415BB59F9C {-8967635247127224420} [0..8] index=12 name: class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base
ADD(0xBE824D493E66BF2E, 0x8D0DECDF6C6A8711, 0) = 0x338FA1964E6C6DB3 {3715365884536843699} [0..8] index=3 name: int8_t *
ADD(0xBE824D493E66BF2E, 0x2317E969C295951D, 0) = 0x9D95A4205E597E70 {-7091581579296145808} [0..8] index=0 name: coerced
1.000000 0 0 4
	class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B [+0] (-17179869184..17179869184) <A76A3270F3B696FD> {-6383234061137701123} <0x2852260> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: <0x2838ac8>, file: <0x2838a88>, line: 40, size: 64, elements: <0x2852200>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B:
	class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base [+0] (0..8) <3D0EC2085E57F8CA> {4399667227185903818} <0x283e7e0> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: <0x2838ac8>, file: <0x2838a88>, line: 21, size: 64, elements: <0x283d9a0>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
<0x2852260> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: <0x2838ac8>, file: <0x2838a88>, line: 40, size: 64, elements: <0x2852200>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
	int8_t * [+0] (0..8) <8D0DECDF6C6A8711> {-8282703695323691247} <0x25f3918> = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: <0x2758d28>, size: 64)
<0x283e7e0> = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: <0x2838ac8>, file: <0x2838a88>, line: 21, size: 64, elements: <0x283d9a0>, vtableHolder: <0x283e7e0>, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
	+coerced <2317E969C295951D> {2528746356237243677}

ADD(0xA76A3270F3B696FD, 0xA76A3270F3B696FD, 0) = 0x00000000247D7FAB {612204459} [-17179869184..17179869184] index=11 name: class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B
ADD(0xA76A3270F3B696FD, 0x3D0EC2085E57F8CA, 0) = 0x9A64F0789665B64F {-7321462693487593905} [0..8] index=15 name: class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base
ADD(0xA76A3270F3B696FD, 0x8D0DECDF6C6A8711, 0) = 0x2A67DEAF83BC4460 {3055655717604967520} [0..8] index=0 name: int8_t *
ADD(0xA76A3270F3B696FD, 0x2317E969C295951D, 0) = 0x847DDB19938957A3 {-8899716385718315101} [0..8] index=3 name: coerced
1.000000 0 0 4
*** IR Dump After EffectiveSan pass ***; ModuleID = 'CWE843_Type_Confusion__char_82a.cpp'
source_filename = "CWE843_Type_Confusion__char_82a.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%EFFECTIVE_INFO_1 = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [1 x %EFFECTIVE_INFO_ENTRY] }
%TYCHE_META_CACHELINE107 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE106 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE105 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE104 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE103 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE102 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE101 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE100 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_5 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [5 x %EFFECTIVE_ENTRY] }
%TYCHE_META_CACHELINE207 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE206 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE205 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE204 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE203 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE202 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE201 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE200 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }

$_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev = comdat any

$_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !effectiveSan !0
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0
@TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [1 x i8] zeroinitializer
@TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_0_SEC_6_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_0_SEC_5_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_0_SEC_4_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_0_SEC_3_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_0_SEC_2_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_0_SEC_1_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp, i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }
@EFFECTIVE_STRING = private unnamed_addr constant [73 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad\00"
@EFFECTIVE_STRING.4 = private unnamed_addr constant [74 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base\00"
@EFFECTIVE_STRING.5 = private unnamed_addr constant [9 x i8] c"int8_t *\00"
@EFFECTIVE_INFO_a481e2de8ae4613074fac0bfec5c40a = weak constant %EFFECTIVE_INFO { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @EFFECTIVE_STRING.5, i32 0, i32 0), i32 8, i32 0, i32 0, %EFFECTIVE_INFO* null, [0 x %EFFECTIVE_INFO_ENTRY] zeroinitializer }
@EFFECTIVE_INFO_aecd8e1151429c21caf8575e08c20e3d = weak constant %EFFECTIVE_INFO_1 { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @EFFECTIVE_STRING.4, i32 0, i32 0), i32 8, i32 1, i32 0, %EFFECTIVE_INFO* null, [1 x %EFFECTIVE_INFO_ENTRY] [%EFFECTIVE_INFO_ENTRY { %EFFECTIVE_INFO* @EFFECTIVE_INFO_a481e2de8ae4613074fac0bfec5c40a, i32 0, i64 0, i64 8 }] }
@EFFECTIVE_INFO_22b8af0b6b106b352ebf663e494d82be = weak constant %EFFECTIVE_INFO_1 { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @EFFECTIVE_STRING, i32 0, i32 0), i32 8, i32 1, i32 0, %EFFECTIVE_INFO* null, [1 x %EFFECTIVE_INFO_ENTRY] [%EFFECTIVE_INFO_ENTRY { %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_aecd8e1151429c21caf8575e08c20e3d to %EFFECTIVE_INFO*), i32 1, i64 0, i64 8 }] }
@TYCHE_TYPE_ENTRY_coerced_11355162494413405808_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [8 x i8] c"coerced\00"
@"TYCHE_TYPE_ENTRY_int8_t *_3715365884536843699_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [9 x i8] c"int8_t *\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad_3640346490_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [73 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_9479108826582327196_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [74 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base\00"
@TYCHE_META_SECTION_TID_1 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE107* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_1_SEC_6_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE106* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_1_SEC_5_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE105* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_1_SEC_4_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE104* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_1_SEC_3_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE103* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_1_SEC_2_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE102* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_1_SEC_1_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE101* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_1_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE100* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_22b8af0b6b106b352ebf663e494d82be = weak constant %EFFECTIVE_TYPE_5 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_1_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp, i64 -4719124482555986130, i64 -4719124482555986130, i32 8, i32 8, i32 0, i32 1340864923, i64 1152921504606846976, i64 15, %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_22b8af0b6b106b352ebf663e494d82be to %EFFECTIVE_INFO*), i64 8088147823597479805, i32 5, [5 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @TYCHE_TYPE_ENTRY_coerced_11355162494413405808_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 0, i64 -7091581579296145808, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"TYCHE_TYPE_ENTRY_int8_t *_3715365884536843699_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 3715365884536843699, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad_3640346490_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 3640346490, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_9479108826582327196_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 -8967635247127224420, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }
@EFFECTIVE_STRING.6 = private unnamed_addr constant [77 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B\00"
@EFFECTIVE_INFO_ed7de85436334e9afd96b6f370326aa7 = weak constant %EFFECTIVE_INFO_1 { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @EFFECTIVE_STRING.6, i32 0, i32 0), i32 8, i32 1, i32 0, %EFFECTIVE_INFO* null, [1 x %EFFECTIVE_INFO_ENTRY] [%EFFECTIVE_INFO_ENTRY { %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_aecd8e1151429c21caf8575e08c20e3d to %EFFECTIVE_INFO*), i32 1, i64 0, i64 8 }] }
@"TYCHE_TYPE_ENTRY_int8_t *_3055655717604967520_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [9 x i8] c"int8_t *\00"
@TYCHE_TYPE_ENTRY_coerced_9547027687991236515_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [8 x i8] c"coerced\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B_612204459_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [77 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_11125281380221957711_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [74 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base\00"
@TYCHE_META_SECTION_TID_2 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE207* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_2_SEC_6_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE206* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_2_SEC_5_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE205* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_2_SEC_4_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE204* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_2_SEC_3_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE203* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_2_SEC_2_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE202* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_2_SEC_1_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE201* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_2_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE200* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_ed7de85436334e9afd96b6f370326aa7 = weak constant %EFFECTIVE_TYPE_5 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_2_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp, i64 -6383234061137701123, i64 -6383234061137701123, i32 8, i32 8, i32 0, i32 1340864923, i64 1152921504606846976, i64 15, %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_ed7de85436334e9afd96b6f370326aa7 to %EFFECTIVE_INFO*), i64 8088147823597479805, i32 5, [5 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"TYCHE_TYPE_ENTRY_int8_t *_3055655717604967520_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 3055655717604967520, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @TYCHE_TYPE_ENTRY_coerced_9547027687991236515_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 0, i64 -8899716385718315101, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B_612204459_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 612204459, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_11125281380221957711_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 -7321462693487593905, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #2

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #4

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}

; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}

; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #9, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #9, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}

; Function Attrs: nounwind
declare void @srand(i32) #6

; Function Attrs: nounwind
declare i64 @time(i64*) #6

declare void @printLine(i8*) #7

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!294, !295}
!llvm.ident = !{!296}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !59)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82a.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !7, !8, !0, !9, !26, !10, !34, !35, !36, !24, !40, !41, !43, !42, !44, !45, !1, !50, !58}
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !13, file: !12, line: 21, size: 64, elements: !14, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!12 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!13 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !12, line: 18)
!14 = !{!15, !21}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !12, file: !12, baseType: !16, size: 64, flags: DIFlagArtificial)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !18, size: 64)
!18 = !DISubroutineType(types: !19)
!19 = !{!20}
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !11, file: !12, line: 25, type: !22, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !11, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!22 = !DISubroutineType(types: !23)
!23 = !{!24, !25, !0}
!24 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!27 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !13, file: !12, line: 30, size: 64, elements: !28, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!28 = !{!29, !30}
!29 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !27, baseType: !11, flags: DIFlagPublic)
!30 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !27, file: !12, line: 33, type: !31, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !27, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!31 = !DISubroutineType(types: !32)
!32 = !{!24, !33, !0}
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DISubroutineType(types: !38)
!38 = !{!39, !10, !0}
!39 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!43 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DISubroutineType(types: !49)
!49 = !{!20, null}
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64)
!51 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !13, file: !12, line: 40, size: 64, elements: !52, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!52 = !{!53, !54}
!53 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !51, baseType: !11, flags: DIFlagPublic)
!54 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !51, file: !12, line: 43, type: !55, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !51, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!55 = !DISubroutineType(types: !56)
!56 = !{!24, !57, !0}
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!59 = !{!60, !67, !73, !79, !83, !88, !95, !99, !103, !116, !120, !124, !128, !132, !136, !140, !144, !148, !152, !160, !164, !168, !170, !174, !178, !183, !187, !191, !193, !201, !205, !213, !215, !219, !223, !227, !231, !236, !241, !246, !247, !248, !249, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293}
!60 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !63, line: 52)
!61 = !DINamespace(name: "std", scope: null, file: !62, line: 236)
!62 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!63 = !DISubprogram(name: "abs", scope: !64, file: !64, line: 837, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!64 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!65 = !DISubroutineType(types: !66)
!66 = !{!20, !20}
!67 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !68, line: 127)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !64, line: 62, baseType: !69)
!69 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 58, size: 64, elements: !70, identifier: "_ZTS5div_t")
!70 = !{!71, !72}
!71 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !69, file: !64, line: 60, baseType: !20, size: 32)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !69, file: !64, line: 61, baseType: !20, size: 32, offset: 32)
!73 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !74, line: 128)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !64, line: 70, baseType: !75)
!75 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 66, size: 128, elements: !76, identifier: "_ZTS6ldiv_t")
!76 = !{!77, !78}
!77 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !75, file: !64, line: 68, baseType: !43, size: 64)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !75, file: !64, line: 69, baseType: !43, size: 64, offset: 64)
!79 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !80, line: 130)
!80 = !DISubprogram(name: "abort", scope: !64, file: !64, line: 588, type: !81, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!81 = !DISubroutineType(types: !82)
!82 = !{null}
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !84, line: 134)
!84 = !DISubprogram(name: "atexit", scope: !64, file: !64, line: 592, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!85 = !DISubroutineType(types: !86)
!86 = !{!20, !87}
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64)
!88 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !89, line: 140)
!89 = !DISubprogram(name: "atof", scope: !64, file: !64, line: 101, type: !90, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!90 = !DISubroutineType(types: !91)
!91 = !{!92, !93}
!92 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !96, line: 141)
!96 = !DISubprogram(name: "atoi", scope: !64, file: !64, line: 104, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!20, !93}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !100, line: 142)
!100 = !DISubprogram(name: "atol", scope: !64, file: !64, line: 107, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{!43, !93}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !104, line: 143)
!104 = !DISubprogram(name: "bsearch", scope: !64, file: !64, line: 817, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!0, !107, !107, !109, !109, !112}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!109 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !110, line: 62, baseType: !111)
!110 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!111 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !64, line: 805, baseType: !113)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !114, size: 64)
!114 = !DISubroutineType(types: !115)
!115 = !{!20, !107, !107}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !117, line: 144)
!117 = !DISubprogram(name: "calloc", scope: !64, file: !64, line: 541, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!0, !109, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !121, line: 145)
!121 = !DISubprogram(name: "div", scope: !64, file: !64, line: 849, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!68, !20, !20}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !125, line: 146)
!125 = !DISubprogram(name: "exit", scope: !64, file: !64, line: 614, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !20}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !129, line: 147)
!129 = !DISubprogram(name: "free", scope: !64, file: !64, line: 563, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !0}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !133, line: 148)
!133 = !DISubprogram(name: "getenv", scope: !64, file: !64, line: 631, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!8, !93}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !137, line: 149)
!137 = !DISubprogram(name: "labs", scope: !64, file: !64, line: 838, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!43, !43}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !141, line: 150)
!141 = !DISubprogram(name: "ldiv", scope: !64, file: !64, line: 851, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{!74, !43, !43}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !145, line: 151)
!145 = !DISubprogram(name: "malloc", scope: !64, file: !64, line: 539, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{!0, !109}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !149, line: 153)
!149 = !DISubprogram(name: "mblen", scope: !64, file: !64, line: 919, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!20, !93, !109}
!152 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !153, line: 154)
!153 = !DISubprogram(name: "mbstowcs", scope: !64, file: !64, line: 930, type: !154, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!154 = !DISubroutineType(types: !155)
!155 = !{!109, !156, !159, !109}
!156 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !157)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !93)
!160 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !161, line: 155)
!161 = !DISubprogram(name: "mbtowc", scope: !64, file: !64, line: 922, type: !162, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!162 = !DISubroutineType(types: !163)
!163 = !{!20, !156, !159, !109}
!164 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !165, line: 157)
!165 = !DISubprogram(name: "qsort", scope: !64, file: !64, line: 827, type: !166, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!166 = !DISubroutineType(types: !167)
!167 = !{null, !0, !109, !109, !112}
!168 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !169, line: 163)
!169 = !DISubprogram(name: "rand", scope: !64, file: !64, line: 453, type: !18, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!170 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !171, line: 164)
!171 = !DISubprogram(name: "realloc", scope: !64, file: !64, line: 549, type: !172, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!172 = !DISubroutineType(types: !173)
!173 = !{!0, !0, !109}
!174 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !175, line: 165)
!175 = !DISubprogram(name: "srand", scope: !64, file: !64, line: 455, type: !176, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!176 = !DISubroutineType(types: !177)
!177 = !{null, !6}
!178 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !179, line: 166)
!179 = !DISubprogram(name: "strtod", scope: !64, file: !64, line: 117, type: !180, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!180 = !DISubroutineType(types: !181)
!181 = !{!92, !159, !182}
!182 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !42)
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !184, line: 167)
!184 = !DISubprogram(name: "strtol", scope: !64, file: !64, line: 176, type: !185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!185 = !DISubroutineType(types: !186)
!186 = !{!43, !159, !182, !20}
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !188, line: 168)
!188 = !DISubprogram(name: "strtoul", scope: !64, file: !64, line: 180, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!111, !159, !182, !20}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !192, line: 169)
!192 = !DISubprogram(name: "system", scope: !64, file: !64, line: 781, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !194, line: 171)
!194 = !DISubprogram(name: "wcstombs", scope: !64, file: !64, line: 933, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!109, !197, !198, !109}
!197 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !8)
!198 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !199)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !158)
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !202, line: 172)
!202 = !DISubprogram(name: "wctomb", scope: !64, file: !64, line: 926, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!20, !8, !158}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !207, line: 200)
!206 = !DINamespace(name: "__gnu_cxx", scope: null, file: !62, line: 262)
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !64, line: 80, baseType: !208)
!208 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 76, size: 128, elements: !209, identifier: "_ZTS7lldiv_t")
!209 = !{!210, !212}
!210 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !208, file: !64, line: 78, baseType: !211, size: 64)
!211 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !208, file: !64, line: 79, baseType: !211, size: 64, offset: 64)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !214, line: 206)
!214 = !DISubprogram(name: "_Exit", scope: !64, file: !64, line: 626, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !216, line: 210)
!216 = !DISubprogram(name: "llabs", scope: !64, file: !64, line: 841, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!211, !211}
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !220, line: 216)
!220 = !DISubprogram(name: "lldiv", scope: !64, file: !64, line: 855, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!207, !211, !211}
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !224, line: 227)
!224 = !DISubprogram(name: "atoll", scope: !64, file: !64, line: 112, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!211, !93}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !228, line: 228)
!228 = !DISubprogram(name: "strtoll", scope: !64, file: !64, line: 200, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!211, !159, !182, !20}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !232, line: 229)
!232 = !DISubprogram(name: "strtoull", scope: !64, file: !64, line: 205, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!235, !159, !182, !20}
!235 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !237, line: 231)
!237 = !DISubprogram(name: "strtof", scope: !64, file: !64, line: 123, type: !238, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!238 = !DISubroutineType(types: !239)
!239 = !{!240, !159, !182}
!240 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !242, line: 232)
!242 = !DISubprogram(name: "strtold", scope: !64, file: !64, line: 126, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!245, !159, !182}
!245 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !207, line: 240)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !214, line: 242)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !216, line: 244)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !250, line: 245)
!250 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !206, file: !251, line: 213, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !220, line: 246)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !224, line: 248)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !237, line: 249)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !228, line: 250)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !232, line: 251)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !242, line: 252)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !80, line: 38)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !84, line: 39)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 40)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !68, line: 51)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !74, line: 52)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !264, line: 54)
!264 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !61, file: !265, line: 102, type: !266, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!266 = !DISubroutineType(types: !267)
!267 = !{!268, !268}
!268 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !89, line: 55)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !96, line: 56)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 57)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 58)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 59)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !250, line: 60)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 61)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !133, line: 62)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 63)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 64)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 65)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !149, line: 67)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !153, line: 68)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !161, line: 69)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !165, line: 71)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !169, line: 72)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !171, line: 73)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !175, line: 74)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !179, line: 75)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !184, line: 76)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !188, line: 77)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !192, line: 78)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !194, line: 80)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !202, line: 81)
!293 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !2, entity: !13, line: 77)
!294 = !{i32 2, !"Dwarf Version", i32 4}
!295 = !{i32 2, !"Debug Info Version", i32 3}
!296 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!297 = distinct !DISubprogram(name: "bad", linkageName: "_ZN30CWE843_Type_Confusion__char_823badEv", scope: !13, file: !3, line: 25, type: !81, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!298 = !DILocalVariable(name: "data", scope: !297, file: !3, line: 27, type: !0)
!299 = !DIExpression()
!300 = !DILocation(line: 27, column: 12, scope: !297)
!301 = !DILocation(line: 29, column: 10, scope: !297)
!302 = !DILocalVariable(name: "charBuffer", scope: !303, file: !3, line: 32, type: !1)
!303 = distinct !DILexicalBlock(scope: !297, file: !3, line: 30, column: 5)
!304 = !DILocation(line: 32, column: 14, scope: !303)
!305 = !DILocation(line: 33, column: 14, scope: !303)
!306 = !DILocalVariable(name: "baseObject", scope: !297, file: !3, line: 35, type: !10)
!307 = !DILocation(line: 35, column: 42, scope: !297)
!308 = !DILocation(line: 35, column: 55, scope: !297)
!309 = !{!"35", !"55", !"42391272", !"3368523464000242366", !"2501942056580049717", !"35", !"55", !"42124016", !"42211824", !"2", !"_Znwm", !"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad", !"_ZN30CWE843_Type_Confusion__char_823badEv"}
!310 = !DILocation(line: 35, column: 59, scope: !311)
!311 = !DILexicalBlockFile(scope: !297, file: !3, discriminator: 1)
!312 = !DILocation(line: 36, column: 5, scope: !297)
!313 = !DILocation(line: 36, column: 17, scope: !297)
!314 = !DILocation(line: 36, column: 24, scope: !297)
!315 = !DILocation(line: 37, column: 12, scope: !297)
!316 = !DILocation(line: 37, column: 5, scope: !297)
!317 = !DILocation(line: 37, column: 5, scope: !311)
!318 = !{!"37", !"5", !"0", !"0", !"0", !"37", !"5", !"42205712", !"42223200", !"18446744073709551615", !"_ZdlPv", !"FREE", !"_ZN30CWE843_Type_Confusion__char_823badEv"}
!319 = !DILocation(line: 38, column: 1, scope: !297)
!320 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev", scope: !27, file: !12, line: 30, type: !321, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !323, variables: !4)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !33}
!323 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", scope: !27, type: !321, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!324 = !{!26}
!325 = !DILocalVariable(name: "this", arg: 1, scope: !320, type: !26, flags: DIFlagArtificial | DIFlagObjectPointer)
!326 = !DILocation(line: 0, scope: !320)
!327 = !DILocation(line: 30, column: 7, scope: !320)
!328 = distinct !DISubprogram(name: "good", linkageName: "_ZN30CWE843_Type_Confusion__char_824goodEv", scope: !13, file: !3, line: 60, type: !81, isLocal: false, isDefinition: true, scopeLine: 61, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!329 = !DILocation(line: 62, column: 5, scope: !328)
!330 = !DILocation(line: 63, column: 1, scope: !328)
!331 = distinct !DISubprogram(name: "goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv", scope: !13, file: !3, line: 45, type: !81, isLocal: true, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!332 = !DILocalVariable(name: "data", scope: !331, file: !3, line: 47, type: !0)
!333 = !DILocation(line: 47, column: 12, scope: !331)
!334 = !DILocation(line: 49, column: 10, scope: !331)
!335 = !DILocalVariable(name: "intBuffer", scope: !336, file: !3, line: 52, type: !20)
!336 = distinct !DILexicalBlock(scope: !331, file: !3, line: 50, column: 5)
!337 = !DILocation(line: 52, column: 13, scope: !336)
!338 = !DILocation(line: 53, column: 16, scope: !336)
!339 = !DILocation(line: 53, column: 14, scope: !336)
!340 = !DILocalVariable(name: "baseObject", scope: !331, file: !3, line: 55, type: !10)
!341 = !DILocation(line: 55, column: 42, scope: !331)
!342 = !DILocation(line: 55, column: 55, scope: !331)
!343 = !{!"55", !"55", !"42346824", !"18272993694778026663", !"17113089607461981850", !"55", !"55", !"42269552", !"42279312", !"3", !"_Znwm", !"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B", !"_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv"}
!344 = !DILocation(line: 55, column: 59, scope: !345)
!345 = !DILexicalBlockFile(scope: !331, file: !3, discriminator: 1)
!346 = !DILocation(line: 56, column: 5, scope: !331)
!347 = !DILocation(line: 56, column: 17, scope: !331)
!348 = !DILocation(line: 56, column: 24, scope: !331)
!349 = !DILocation(line: 57, column: 12, scope: !331)
!350 = !DILocation(line: 57, column: 5, scope: !331)
!351 = !DILocation(line: 57, column: 5, scope: !345)
!352 = !{!"57", !"5", !"0", !"0", !"0", !"57", !"5", !"42282624", !"42287072", !"18446744073709551615", !"_ZdlPv", !"FREE", !"_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv"}
!353 = !DILocation(line: 58, column: 1, scope: !331)
!354 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 79, type: !355, isLocal: false, isDefinition: true, scopeLine: 80, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!355 = !DISubroutineType(types: !356)
!356 = !{!20, !20, !42}
!357 = !{null, !42}
!358 = !DILocalVariable(name: "argc", arg: 1, scope: !354, file: !3, line: 79, type: !20)
!359 = !DILocation(line: 79, column: 14, scope: !354)
!360 = !DILocalVariable(name: "argv", arg: 2, scope: !354, file: !3, line: 79, type: !42)
!361 = !DILocation(line: 79, column: 27, scope: !354)
!362 = !DILocation(line: 82, column: 22, scope: !354)
!363 = !DILocation(line: 82, column: 5, scope: !364)
!364 = !DILexicalBlockFile(scope: !354, file: !3, discriminator: 1)
!365 = !DILocation(line: 84, column: 5, scope: !354)
!366 = !DILocation(line: 85, column: 5, scope: !354)
!367 = !DILocation(line: 86, column: 5, scope: !354)
!368 = !DILocation(line: 89, column: 5, scope: !354)
!369 = !DILocation(line: 90, column: 5, scope: !354)
!370 = !DILocation(line: 91, column: 5, scope: !354)
!371 = !DILocation(line: 93, column: 5, scope: !354)
!372 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev", scope: !11, file: !12, line: 21, type: !373, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !375, variables: !4)
!373 = !DISubroutineType(types: !374)
!374 = !{null, !25}
!375 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", scope: !11, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!376 = !{!10}
!377 = !DILocalVariable(name: "this", arg: 1, scope: !372, type: !10, flags: DIFlagArtificial | DIFlagObjectPointer)
!378 = !DILocation(line: 0, scope: !372)
!379 = !DILocation(line: 21, column: 7, scope: !372)
!380 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev", scope: !51, file: !12, line: 40, type: !381, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !383, variables: !4)
!381 = !DISubroutineType(types: !382)
!382 = !{null, !57}
!383 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !51, type: !381, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!384 = !{!50}
!385 = !DILocalVariable(name: "this", arg: 1, scope: !380, type: !50, flags: DIFlagArtificial | DIFlagObjectPointer)
!386 = !DILocation(line: 0, scope: !380)
!387 = !DILocation(line: 40, column: 7, scope: !380)
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #8, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #8, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #8, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #8, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #8, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #8, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #8, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #8, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #8, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #8, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'CWE843_Type_Confusion__char_82a.cpp'
source_filename = "CWE843_Type_Confusion__char_82a.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%EFFECTIVE_INFO_1 = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [1 x %EFFECTIVE_INFO_ENTRY] }
%TYCHE_META_CACHELINE107 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE106 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE105 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE104 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE103 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE102 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE101 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE100 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_5 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [5 x %EFFECTIVE_ENTRY] }
%TYCHE_META_CACHELINE207 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE206 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE205 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE204 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE203 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE202 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE201 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE200 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }

$_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev = comdat any

$_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev = comdat any

$_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@.str = private unnamed_addr constant [18 x i8] c"Calling good()...\00", align 1, !effectiveSan !0
@.str.1 = private unnamed_addr constant [16 x i8] c"Finished good()\00", align 1, !effectiveSan !0
@.str.2 = private unnamed_addr constant [17 x i8] c"Calling bad()...\00", align 1, !effectiveSan !0
@.str.3 = private unnamed_addr constant [15 x i8] c"Finished bad()\00", align 1, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0
@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = external unnamed_addr constant { [3 x i8*] }, !effectiveSan !0
@TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [1 x i8] zeroinitializer
@TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_0_SEC_6_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_0_SEC_5_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_0_SEC_4_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_0_SEC_3_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_0_SEC_2_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_0_SEC_1_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp, i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }
@EFFECTIVE_STRING = private unnamed_addr constant [73 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad\00"
@EFFECTIVE_STRING.4 = private unnamed_addr constant [74 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base\00"
@EFFECTIVE_STRING.5 = private unnamed_addr constant [9 x i8] c"int8_t *\00"
@EFFECTIVE_INFO_a481e2de8ae4613074fac0bfec5c40a = weak constant %EFFECTIVE_INFO { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @EFFECTIVE_STRING.5, i32 0, i32 0), i32 8, i32 0, i32 0, %EFFECTIVE_INFO* null, [0 x %EFFECTIVE_INFO_ENTRY] zeroinitializer }
@EFFECTIVE_INFO_aecd8e1151429c21caf8575e08c20e3d = weak constant %EFFECTIVE_INFO_1 { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @EFFECTIVE_STRING.4, i32 0, i32 0), i32 8, i32 1, i32 0, %EFFECTIVE_INFO* null, [1 x %EFFECTIVE_INFO_ENTRY] [%EFFECTIVE_INFO_ENTRY { %EFFECTIVE_INFO* @EFFECTIVE_INFO_a481e2de8ae4613074fac0bfec5c40a, i32 0, i64 0, i64 8 }] }
@EFFECTIVE_INFO_22b8af0b6b106b352ebf663e494d82be = weak constant %EFFECTIVE_INFO_1 { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @EFFECTIVE_STRING, i32 0, i32 0), i32 8, i32 1, i32 0, %EFFECTIVE_INFO* null, [1 x %EFFECTIVE_INFO_ENTRY] [%EFFECTIVE_INFO_ENTRY { %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_aecd8e1151429c21caf8575e08c20e3d to %EFFECTIVE_INFO*), i32 1, i64 0, i64 8 }] }
@TYCHE_TYPE_ENTRY_coerced_11355162494413405808_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [8 x i8] c"coerced\00"
@"TYCHE_TYPE_ENTRY_int8_t *_3715365884536843699_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [9 x i8] c"int8_t *\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad_3640346490_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [73 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_9479108826582327196_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [74 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base\00"
@TYCHE_META_SECTION_TID_1 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE107* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_1_SEC_6_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE106* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_1_SEC_5_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE105* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_1_SEC_4_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE104* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_1_SEC_3_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE103* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_1_SEC_2_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE102* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_1_SEC_1_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE101* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_1_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE100* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_22b8af0b6b106b352ebf663e494d82be = weak constant %EFFECTIVE_TYPE_5 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_1_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp, i64 -4719124482555986130, i64 -4719124482555986130, i32 8, i32 8, i32 0, i32 1340864923, i64 1152921504606846976, i64 15, %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_22b8af0b6b106b352ebf663e494d82be to %EFFECTIVE_INFO*), i64 8088147823597479805, i32 5, [5 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @TYCHE_TYPE_ENTRY_coerced_11355162494413405808_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 0, i64 -7091581579296145808, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"TYCHE_TYPE_ENTRY_int8_t *_3715365884536843699_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 3715365884536843699, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad_3640346490_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 3640346490, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_9479108826582327196_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 -8967635247127224420, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }
@EFFECTIVE_STRING.6 = private unnamed_addr constant [77 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B\00"
@EFFECTIVE_INFO_ed7de85436334e9afd96b6f370326aa7 = weak constant %EFFECTIVE_INFO_1 { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @EFFECTIVE_STRING.6, i32 0, i32 0), i32 8, i32 1, i32 0, %EFFECTIVE_INFO* null, [1 x %EFFECTIVE_INFO_ENTRY] [%EFFECTIVE_INFO_ENTRY { %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_aecd8e1151429c21caf8575e08c20e3d to %EFFECTIVE_INFO*), i32 1, i64 0, i64 8 }] }
@"TYCHE_TYPE_ENTRY_int8_t *_3055655717604967520_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [9 x i8] c"int8_t *\00"
@TYCHE_TYPE_ENTRY_coerced_9547027687991236515_FILE_CWE843_Type_Confusion__char_82a.cpp = private unnamed_addr constant [8 x i8] c"coerced\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B_612204459_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [77 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B\00"
@"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_11125281380221957711_FILE_CWE843_Type_Confusion__char_82a.cpp" = private unnamed_addr constant [74 x i8] c"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base\00"
@TYCHE_META_SECTION_TID_2 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE207* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_2_SEC_6_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE206* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_2_SEC_5_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE205* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_2_SEC_4_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE204* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_2_SEC_3_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE203* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_2_SEC_2_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE202* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_2_SEC_1_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE201* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_2_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE200* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_ed7de85436334e9afd96b6f370326aa7 = weak constant %EFFECTIVE_TYPE_5 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_2_SEC_0_FILE_CWE843_Type_Confusion__char_82a.cpp, i64 -6383234061137701123, i64 -6383234061137701123, i32 8, i32 8, i32 0, i32 1340864923, i64 1152921504606846976, i64 15, %EFFECTIVE_INFO* bitcast (%EFFECTIVE_INFO_1* @EFFECTIVE_INFO_ed7de85436334e9afd96b6f370326aa7 to %EFFECTIVE_INFO*), i64 8088147823597479805, i32 5, [5 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"TYCHE_TYPE_ENTRY_int8_t *_3055655717604967520_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 3055655717604967520, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @TYCHE_TYPE_ENTRY_coerced_9547027687991236515_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 0, i64 -8899716385718315101, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B_612204459_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 612204459, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"TYCHE_TYPE_ENTRY_class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base_11125281380221957711_FILE_CWE843_Type_Confusion__char_82a.cpp", i32 0, i32 0), i64 0, i64 -7321462693487593905, i64 0, <2 x i64> <i64 0, i64 8> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82a.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nobuiltin
declare noalias i8* @_Znwm(i64) #2

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) #4

; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}

; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #8, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #9, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}

; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #9, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #9, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}

; Function Attrs: nounwind
declare void @srand(i32) #6

; Function Attrs: nounwind
declare i64 @time(i64*) #6

declare void @printLine(i8*) #7

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #9, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nobuiltin "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline norecurse uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!294, !295}
!llvm.ident = !{!296}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !59)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82a.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !7, !8, !0, !9, !26, !10, !34, !35, !36, !24, !40, !41, !43, !42, !44, !45, !1, !50, !58}
!6 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !13, file: !12, line: 21, size: 64, elements: !14, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!12 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!13 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !12, line: 18)
!14 = !{!15, !21}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !12, file: !12, baseType: !16, size: 64, flags: DIFlagArtificial)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !18, size: 64)
!18 = !DISubroutineType(types: !19)
!19 = !{!20}
!20 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!21 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !11, file: !12, line: 25, type: !22, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !11, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!22 = !DISubroutineType(types: !23)
!23 = !{!24, !25, !0}
!24 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!25 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!26 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64)
!27 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !13, file: !12, line: 30, size: 64, elements: !28, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!28 = !{!29, !30}
!29 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !27, baseType: !11, flags: DIFlagPublic)
!30 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !27, file: !12, line: 33, type: !31, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !27, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!31 = !DISubroutineType(types: !32)
!32 = !{!24, !33, !0}
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !27, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!37 = !DISubroutineType(types: !38)
!38 = !{!39, !10, !0}
!39 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!40 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!43 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64)
!46 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64)
!48 = !DISubroutineType(types: !49)
!49 = !{!20, null}
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64)
!51 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !13, file: !12, line: 40, size: 64, elements: !52, vtableHolder: !11, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!52 = !{!53, !54}
!53 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !51, baseType: !11, flags: DIFlagPublic)
!54 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !51, file: !12, line: 43, type: !55, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !51, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!55 = !DISubroutineType(types: !56)
!56 = !{!24, !57, !0}
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !51, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!58 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!59 = !{!60, !67, !73, !79, !83, !88, !95, !99, !103, !116, !120, !124, !128, !132, !136, !140, !144, !148, !152, !160, !164, !168, !170, !174, !178, !183, !187, !191, !193, !201, !205, !213, !215, !219, !223, !227, !231, !236, !241, !246, !247, !248, !249, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293}
!60 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !63, line: 52)
!61 = !DINamespace(name: "std", scope: null, file: !62, line: 236)
!62 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!63 = !DISubprogram(name: "abs", scope: !64, file: !64, line: 837, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!64 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!65 = !DISubroutineType(types: !66)
!66 = !{!20, !20}
!67 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !68, line: 127)
!68 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !64, line: 62, baseType: !69)
!69 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 58, size: 64, elements: !70, identifier: "_ZTS5div_t")
!70 = !{!71, !72}
!71 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !69, file: !64, line: 60, baseType: !20, size: 32)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !69, file: !64, line: 61, baseType: !20, size: 32, offset: 32)
!73 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !74, line: 128)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !64, line: 70, baseType: !75)
!75 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 66, size: 128, elements: !76, identifier: "_ZTS6ldiv_t")
!76 = !{!77, !78}
!77 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !75, file: !64, line: 68, baseType: !43, size: 64)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !75, file: !64, line: 69, baseType: !43, size: 64, offset: 64)
!79 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !80, line: 130)
!80 = !DISubprogram(name: "abort", scope: !64, file: !64, line: 588, type: !81, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!81 = !DISubroutineType(types: !82)
!82 = !{null}
!83 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !84, line: 134)
!84 = !DISubprogram(name: "atexit", scope: !64, file: !64, line: 592, type: !85, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!85 = !DISubroutineType(types: !86)
!86 = !{!20, !87}
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64)
!88 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !89, line: 140)
!89 = !DISubprogram(name: "atof", scope: !64, file: !64, line: 101, type: !90, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!90 = !DISubroutineType(types: !91)
!91 = !{!92, !93}
!92 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !96, line: 141)
!96 = !DISubprogram(name: "atoi", scope: !64, file: !64, line: 104, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!20, !93}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !100, line: 142)
!100 = !DISubprogram(name: "atol", scope: !64, file: !64, line: 107, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{!43, !93}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !104, line: 143)
!104 = !DISubprogram(name: "bsearch", scope: !64, file: !64, line: 817, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{!0, !107, !107, !109, !109, !112}
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!109 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !110, line: 62, baseType: !111)
!110 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!111 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !64, line: 805, baseType: !113)
!113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !114, size: 64)
!114 = !DISubroutineType(types: !115)
!115 = !{!20, !107, !107}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !117, line: 144)
!117 = !DISubprogram(name: "calloc", scope: !64, file: !64, line: 541, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!0, !109, !109}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !121, line: 145)
!121 = !DISubprogram(name: "div", scope: !64, file: !64, line: 849, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!68, !20, !20}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !125, line: 146)
!125 = !DISubprogram(name: "exit", scope: !64, file: !64, line: 614, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{null, !20}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !129, line: 147)
!129 = !DISubprogram(name: "free", scope: !64, file: !64, line: 563, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{null, !0}
!132 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !133, line: 148)
!133 = !DISubprogram(name: "getenv", scope: !64, file: !64, line: 631, type: !134, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!134 = !DISubroutineType(types: !135)
!135 = !{!8, !93}
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !137, line: 149)
!137 = !DISubprogram(name: "labs", scope: !64, file: !64, line: 838, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!43, !43}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !141, line: 150)
!141 = !DISubprogram(name: "ldiv", scope: !64, file: !64, line: 851, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{!74, !43, !43}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !145, line: 151)
!145 = !DISubprogram(name: "malloc", scope: !64, file: !64, line: 539, type: !146, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DISubroutineType(types: !147)
!147 = !{!0, !109}
!148 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !149, line: 153)
!149 = !DISubprogram(name: "mblen", scope: !64, file: !64, line: 919, type: !150, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!150 = !DISubroutineType(types: !151)
!151 = !{!20, !93, !109}
!152 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !153, line: 154)
!153 = !DISubprogram(name: "mbstowcs", scope: !64, file: !64, line: 930, type: !154, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!154 = !DISubroutineType(types: !155)
!155 = !{!109, !156, !159, !109}
!156 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !157)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !93)
!160 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !161, line: 155)
!161 = !DISubprogram(name: "mbtowc", scope: !64, file: !64, line: 922, type: !162, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!162 = !DISubroutineType(types: !163)
!163 = !{!20, !156, !159, !109}
!164 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !165, line: 157)
!165 = !DISubprogram(name: "qsort", scope: !64, file: !64, line: 827, type: !166, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!166 = !DISubroutineType(types: !167)
!167 = !{null, !0, !109, !109, !112}
!168 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !169, line: 163)
!169 = !DISubprogram(name: "rand", scope: !64, file: !64, line: 453, type: !18, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!170 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !171, line: 164)
!171 = !DISubprogram(name: "realloc", scope: !64, file: !64, line: 549, type: !172, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!172 = !DISubroutineType(types: !173)
!173 = !{!0, !0, !109}
!174 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !175, line: 165)
!175 = !DISubprogram(name: "srand", scope: !64, file: !64, line: 455, type: !176, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!176 = !DISubroutineType(types: !177)
!177 = !{null, !6}
!178 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !179, line: 166)
!179 = !DISubprogram(name: "strtod", scope: !64, file: !64, line: 117, type: !180, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!180 = !DISubroutineType(types: !181)
!181 = !{!92, !159, !182}
!182 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !42)
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !184, line: 167)
!184 = !DISubprogram(name: "strtol", scope: !64, file: !64, line: 176, type: !185, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!185 = !DISubroutineType(types: !186)
!186 = !{!43, !159, !182, !20}
!187 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !188, line: 168)
!188 = !DISubprogram(name: "strtoul", scope: !64, file: !64, line: 180, type: !189, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!189 = !DISubroutineType(types: !190)
!190 = !{!111, !159, !182, !20}
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !192, line: 169)
!192 = !DISubprogram(name: "system", scope: !64, file: !64, line: 781, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !194, line: 171)
!194 = !DISubprogram(name: "wcstombs", scope: !64, file: !64, line: 933, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!109, !197, !198, !109}
!197 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !8)
!198 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !199)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !158)
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !202, line: 172)
!202 = !DISubprogram(name: "wctomb", scope: !64, file: !64, line: 926, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!20, !8, !158}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !207, line: 200)
!206 = !DINamespace(name: "__gnu_cxx", scope: null, file: !62, line: 262)
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !64, line: 80, baseType: !208)
!208 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !64, line: 76, size: 128, elements: !209, identifier: "_ZTS7lldiv_t")
!209 = !{!210, !212}
!210 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !208, file: !64, line: 78, baseType: !211, size: 64)
!211 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !208, file: !64, line: 79, baseType: !211, size: 64, offset: 64)
!213 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !214, line: 206)
!214 = !DISubprogram(name: "_Exit", scope: !64, file: !64, line: 626, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!215 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !216, line: 210)
!216 = !DISubprogram(name: "llabs", scope: !64, file: !64, line: 841, type: !217, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!217 = !DISubroutineType(types: !218)
!218 = !{!211, !211}
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !220, line: 216)
!220 = !DISubprogram(name: "lldiv", scope: !64, file: !64, line: 855, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!207, !211, !211}
!223 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !224, line: 227)
!224 = !DISubprogram(name: "atoll", scope: !64, file: !64, line: 112, type: !225, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!225 = !DISubroutineType(types: !226)
!226 = !{!211, !93}
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !228, line: 228)
!228 = !DISubprogram(name: "strtoll", scope: !64, file: !64, line: 200, type: !229, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DISubroutineType(types: !230)
!230 = !{!211, !159, !182, !20}
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !232, line: 229)
!232 = !DISubprogram(name: "strtoull", scope: !64, file: !64, line: 205, type: !233, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!233 = !DISubroutineType(types: !234)
!234 = !{!235, !159, !182, !20}
!235 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !237, line: 231)
!237 = !DISubprogram(name: "strtof", scope: !64, file: !64, line: 123, type: !238, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!238 = !DISubroutineType(types: !239)
!239 = !{!240, !159, !182}
!240 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !206, entity: !242, line: 232)
!242 = !DISubprogram(name: "strtold", scope: !64, file: !64, line: 126, type: !243, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DISubroutineType(types: !244)
!244 = !{!245, !159, !182}
!245 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!246 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !207, line: 240)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !214, line: 242)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !216, line: 244)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !250, line: 245)
!250 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !206, file: !251, line: 213, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!251 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !220, line: 246)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !224, line: 248)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !237, line: 249)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !228, line: 250)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !232, line: 251)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !61, entity: !242, line: 252)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !80, line: 38)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !84, line: 39)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 40)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !68, line: 51)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !74, line: 52)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !264, line: 54)
!264 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !61, file: !265, line: 102, type: !266, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!265 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!266 = !DISubroutineType(types: !267)
!267 = !{!268, !268}
!268 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !89, line: 55)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !96, line: 56)
!271 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 57)
!272 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 58)
!273 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 59)
!274 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !250, line: 60)
!275 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 61)
!276 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !133, line: 62)
!277 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 63)
!278 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 64)
!279 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 65)
!280 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !149, line: 67)
!281 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !153, line: 68)
!282 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !161, line: 69)
!283 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !165, line: 71)
!284 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !169, line: 72)
!285 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !171, line: 73)
!286 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !175, line: 74)
!287 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !179, line: 75)
!288 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !184, line: 76)
!289 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !188, line: 77)
!290 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !192, line: 78)
!291 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !194, line: 80)
!292 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !202, line: 81)
!293 = !DIImportedEntity(tag: DW_TAG_imported_module, scope: !2, entity: !13, line: 77)
!294 = !{i32 2, !"Dwarf Version", i32 4}
!295 = !{i32 2, !"Debug Info Version", i32 3}
!296 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!297 = distinct !DISubprogram(name: "bad", linkageName: "_ZN30CWE843_Type_Confusion__char_823badEv", scope: !13, file: !3, line: 25, type: !81, isLocal: false, isDefinition: true, scopeLine: 26, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!298 = !DILocalVariable(name: "data", scope: !297, file: !3, line: 27, type: !0)
!299 = !DIExpression()
!300 = !DILocation(line: 27, column: 12, scope: !297)
!301 = !DILocation(line: 29, column: 10, scope: !297)
!302 = !DILocalVariable(name: "charBuffer", scope: !303, file: !3, line: 32, type: !1)
!303 = distinct !DILexicalBlock(scope: !297, file: !3, line: 30, column: 5)
!304 = !DILocation(line: 32, column: 14, scope: !303)
!305 = !DILocation(line: 33, column: 14, scope: !303)
!306 = !DILocalVariable(name: "baseObject", scope: !297, file: !3, line: 35, type: !10)
!307 = !DILocation(line: 35, column: 42, scope: !297)
!308 = !DILocation(line: 35, column: 55, scope: !297)
!309 = !{!"35", !"55", !"42391272", !"3368523464000242366", !"2501942056580049717", !"35", !"55", !"42124016", !"42211824", !"2", !"_Znwm", !"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad", !"_ZN30CWE843_Type_Confusion__char_823badEv"}
!310 = !DILocation(line: 35, column: 59, scope: !311)
!311 = !DILexicalBlockFile(scope: !297, file: !3, discriminator: 1)
!312 = !DILocation(line: 36, column: 5, scope: !297)
!313 = !DILocation(line: 36, column: 17, scope: !297)
!314 = !DILocation(line: 36, column: 24, scope: !297)
!315 = !DILocation(line: 37, column: 12, scope: !297)
!316 = !DILocation(line: 37, column: 5, scope: !297)
!317 = !DILocation(line: 37, column: 5, scope: !311)
!318 = !{!"37", !"5", !"0", !"0", !"0", !"37", !"5", !"42205712", !"42223200", !"18446744073709551615", !"_ZdlPv", !"FREE", !"_ZN30CWE843_Type_Confusion__char_823badEv"}
!319 = !DILocation(line: 38, column: 1, scope: !297)
!320 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev", scope: !27, file: !12, line: 30, type: !321, isLocal: false, isDefinition: true, scopeLine: 30, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !323, variables: !4)
!321 = !DISubroutineType(types: !322)
!322 = !{null, !33}
!323 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_bad", scope: !27, type: !321, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!324 = !{!26}
!325 = !DILocalVariable(name: "this", arg: 1, scope: !320, type: !26, flags: DIFlagArtificial | DIFlagObjectPointer)
!326 = !DILocation(line: 0, scope: !320)
!327 = !DILocation(line: 30, column: 7, scope: !320)
!328 = distinct !DISubprogram(name: "good", linkageName: "_ZN30CWE843_Type_Confusion__char_824goodEv", scope: !13, file: !3, line: 60, type: !81, isLocal: false, isDefinition: true, scopeLine: 61, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!329 = !DILocation(line: 62, column: 5, scope: !328)
!330 = !DILocation(line: 63, column: 1, scope: !328)
!331 = distinct !DISubprogram(name: "goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv", scope: !13, file: !3, line: 45, type: !81, isLocal: true, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!332 = !DILocalVariable(name: "data", scope: !331, file: !3, line: 47, type: !0)
!333 = !DILocation(line: 47, column: 12, scope: !331)
!334 = !DILocation(line: 49, column: 10, scope: !331)
!335 = !DILocalVariable(name: "intBuffer", scope: !336, file: !3, line: 52, type: !20)
!336 = distinct !DILexicalBlock(scope: !331, file: !3, line: 50, column: 5)
!337 = !DILocation(line: 52, column: 13, scope: !336)
!338 = !DILocation(line: 53, column: 16, scope: !336)
!339 = !DILocation(line: 53, column: 14, scope: !336)
!340 = !DILocalVariable(name: "baseObject", scope: !331, file: !3, line: 55, type: !10)
!341 = !DILocation(line: 55, column: 42, scope: !331)
!342 = !DILocation(line: 55, column: 55, scope: !331)
!343 = !{!"55", !"55", !"42346824", !"18272993694778026663", !"17113089607461981850", !"55", !"55", !"42269552", !"42279312", !"3", !"_Znwm", !"class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B", !"_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv"}
!344 = !DILocation(line: 55, column: 59, scope: !345)
!345 = !DILexicalBlockFile(scope: !331, file: !3, discriminator: 1)
!346 = !DILocation(line: 56, column: 5, scope: !331)
!347 = !DILocation(line: 56, column: 17, scope: !331)
!348 = !DILocation(line: 56, column: 24, scope: !331)
!349 = !DILocation(line: 57, column: 12, scope: !331)
!350 = !DILocation(line: 57, column: 5, scope: !331)
!351 = !DILocation(line: 57, column: 5, scope: !345)
!352 = !{!"57", !"5", !"0", !"0", !"0", !"57", !"5", !"42282624", !"42287072", !"18446744073709551615", !"_ZdlPv", !"FREE", !"_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv"}
!353 = !DILocation(line: 58, column: 1, scope: !331)
!354 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 79, type: !355, isLocal: false, isDefinition: true, scopeLine: 80, flags: DIFlagPrototyped, isOptimized: false, unit: !2, variables: !4)
!355 = !DISubroutineType(types: !356)
!356 = !{!20, !20, !42}
!357 = !{null, !42}
!358 = !DILocalVariable(name: "argc", arg: 1, scope: !354, file: !3, line: 79, type: !20)
!359 = !DILocation(line: 79, column: 14, scope: !354)
!360 = !DILocalVariable(name: "argv", arg: 2, scope: !354, file: !3, line: 79, type: !42)
!361 = !DILocation(line: 79, column: 27, scope: !354)
!362 = !DILocation(line: 82, column: 22, scope: !354)
!363 = !DILocation(line: 82, column: 5, scope: !364)
!364 = !DILexicalBlockFile(scope: !354, file: !3, discriminator: 1)
!365 = !DILocation(line: 84, column: 5, scope: !354)
!366 = !DILocation(line: 85, column: 5, scope: !354)
!367 = !DILocation(line: 86, column: 5, scope: !354)
!368 = !DILocation(line: 89, column: 5, scope: !354)
!369 = !DILocation(line: 90, column: 5, scope: !354)
!370 = !DILocation(line: 91, column: 5, scope: !354)
!371 = !DILocation(line: 93, column: 5, scope: !354)
!372 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev", scope: !11, file: !12, line: 21, type: !373, isLocal: false, isDefinition: true, scopeLine: 21, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !375, variables: !4)
!373 = !DISubroutineType(types: !374)
!374 = !{null, !25}
!375 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_base", scope: !11, type: !373, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!376 = !{!10}
!377 = !DILocalVariable(name: "this", arg: 1, scope: !372, type: !10, flags: DIFlagArtificial | DIFlagObjectPointer)
!378 = !DILocation(line: 0, scope: !372)
!379 = !DILocation(line: 21, column: 7, scope: !372)
!380 = distinct !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev", scope: !51, file: !12, line: 40, type: !381, isLocal: false, isDefinition: true, scopeLine: 40, flags: DIFlagArtificial | DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !383, variables: !4)
!381 = !DISubroutineType(types: !382)
!382 = !{null, !57}
!383 = !DISubprogram(name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !51, type: !381, isLocal: false, isDefinition: false, flags: DIFlagPublic | DIFlagArtificial | DIFlagPrototyped, isOptimized: false)
!384 = !{!50}
!385 = !DILocalVariable(name: "this", arg: 1, scope: !380, type: !50, flags: DIFlagArtificial | DIFlagObjectPointer)
!386 = !DILocation(line: 0, scope: !380)
!387 = !DILocation(line: 40, column: 7, scope: !380)
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_823badEv() #0 !dbg !297 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i8, align 1, !effectiveSan !0
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !298, metadata !299), !dbg !300
  store i8* null, i8** %1, align 8, !dbg !301
  call void @llvm.dbg.declare(metadata i8* %2, metadata !302, metadata !299), !dbg !304
  store i8 97, i8* %2, align 1, !dbg !304
  store i8* %2, i8** %1, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !306, metadata !299), !dbg !307
  %4 = call i8* @_Znwm(i64 8) #8, !dbg !308, !effectiveSan !26, !TYCHE_MD !309
  %5 = bitcast i8* %4 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, !dbg !308, !effectiveSan !26
  call void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5) #9, !dbg !310
  %6 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !308, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %6, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !307
  %7 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !312, !effectiveSan !10
  %8 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !313, !effectiveSan !34
  %9 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %8, align 8, !dbg !313, !effectiveSan !35
  %10 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %9, i64 0, !dbg !313
  %11 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, align 8, !dbg !313, !effectiveSan !36
  %12 = load i8*, i8** %1, align 8, !dbg !314, !effectiveSan !0
  %13 = call zeroext i1 %11(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, i8* %12), !dbg !313, !effectiveSan !24
  %14 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !315, !effectiveSan !10
  %15 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14, null, !dbg !316
  br i1 %15, label %18, label %16, !dbg !316

; <label>:16:                                     ; preds = %0
  %17 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %14 to i8*, !dbg !317, !effectiveSan !0
  call void @_ZdlPv(i8* %17) #10, !dbg !317, !TYCHE_MD !318
  br label %18, !dbg !317

; <label>:18:                                     ; preds = %16, %0
  ret void, !dbg !319
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=1, align=1, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg21<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg21 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %vreg21, %noreg, !"charBuffer", <!299>; GR64:%vreg21 line no:32 Node Type ID: []
	MOV8mi <fi#1>, 1, %noreg, 0, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg21; mem:ST8[%1] GR64:%vreg21 dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%8] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%10] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Predecessors according to CFG: BB#0
	%vreg23<def> = COPY %vreg1; GR64:%vreg23,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = COPY %vreg23; GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=1, align=1, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg21<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg21 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %vreg21, %noreg, !"charBuffer", <!299>; GR64:%vreg21 line no:32 Node Type ID: []
	MOV8mi <fi#1>, 1, %noreg, 0, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg21; mem:ST8[%1] GR64:%vreg21 dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%8] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%10] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Predecessors according to CFG: BB#0
	%vreg23<def> = COPY %vreg1; GR64:%vreg23,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = COPY %vreg23; GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=1, align=1, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg21<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg21 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %vreg21, %noreg, !"charBuffer", <!299>; GR64:%vreg21 line no:32 Node Type ID: []
	MOV8mi <fi#1>, 1, %noreg, 0, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg21; mem:ST8[%1] GR64:%vreg21 dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%8] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%10] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Predecessors according to CFG: BB#0
	%vreg23<def> = COPY %vreg1; GR64:%vreg23,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = COPY %vreg23; GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=1, align=1, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg21<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg21 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %vreg21, %noreg, !"charBuffer", <!299>; GR64:%vreg21 line no:32 Node Type ID: []
	MOV8mi <fi#1>, 1, %noreg, 0, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg21; mem:ST8[%1] GR64:%vreg21 dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%8] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%10] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Predecessors according to CFG: BB#0
	%vreg23<def> = COPY %vreg1; GR64:%vreg23,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = COPY %vreg23; GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%RCX<def> = SUBREG_TO_REG 0, %EAX<kill>, sub_32bit Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri64 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%RDI<def> = SUBREG_TO_REG 0, %EAX<kill>, sub_32bit; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = COPY %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = COPY %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = COPY %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_823badEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=1, align=1, at location [SP-17]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -9, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:29:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"charBuffer", <!299>; line no:32 Node Type ID: []
	MOV8mi %RBP, 1, %noreg, -9, %noreg, 97; mem:ST1[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:32:14 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:33:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:35:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:36:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%8] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%10] dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:36:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:36:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:37:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %16
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %18
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:38:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_823badEv.

0x28c8120: i64,ch,glue = CopyFromReg 0x28c7c20; Register:i64 %physreg35; 0x28c7c20:1 Node TypeID: [ 1#35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
Start: X86DAGToDAGISel Phase! OpCode: 47 12 0x28c8120: i64,ch,glue = CopyFromReg 0x28c7c20; Register:i64 %physreg35; 0x28c7c20:1 Node TypeID: [ 1#35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
0x28c7c20: ch,glue = callseq_end 0x28c7d60; TargetConstant:i64<0>; TargetConstant:i64<0>; 0x28c7d60:1 Node TypeID: [ 0#]
0x28c7d60: ch,glue = <<Unknown Node #229>> 0x28c7b80; TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c7b80:1 Node TypeID: [ 0#]
SelectCodeCommon Phase! OpCode: 47 0x28c8120: i64,ch,glue = CopyFromReg 0x28c7c20; Register:i64 %physreg35; 0x28c7c20:1 Node TypeID: [ 1#35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
End: X86DAGToDAGISel Phase! OpCode: 47 -1 0x28c8120: i64,ch,glue = CopyFromReg 0x28c7c20; Register:i64 %physreg35; 0x28c7c20:1 Node TypeID: [ 1#35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
SelectCodeCommon Phase! OpCode: 229 0x28c7d60: ch,glue = <<Unknown Node #229>> 0x28c7b80; TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c7b80:1 Node TypeID: [ 1#35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
End: X86DAGToDAGISel Phase! OpCode: 65088 -1 0x28c7d60: ch,glue = <<Unknown Machine Node #65088>> TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c7b80; 0x28c7b80:1 Node TypeID: [ 1#35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
Instr Emitter Phase: Node OpCode: 65088 35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#0x28c7d60: ch,glue = <<Unknown Machine Node #65088>> TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c7b80; 0x28c7b80:1 Node TypeID: [ 1#35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
Instr Emitter Phase: Node OpCode: 65088 0x28c7b80: ch,glue = <<Unknown Machine Node #65088>> TargetGlobalAddress:i64<void (i8*)* @_ZdlPv> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c8120; 0x28c8120:1 Node TypeID: [ 0#]
ASM Printer Phase: 
_Znwm 42781176
CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:35:55 Node Type ID: [35#55#42391272#3368523464000242366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#]
MI Type ID: 35#55#42391272#33685234640002*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*) unnamed_addr #3 comdat align 2 !dbg !320 !effectiveSanArgs !324 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !44
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, metadata !325, metadata !299), !dbg !326
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %2, align 8, !effectiveSan !26
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !327, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !327
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %3 to i32 (...)***, !dbg !327, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !327
  ret void, !dbg !327
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg4<def> = COPY %vreg3; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg4<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:30:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badC2Ev.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define void @_ZN30CWE843_Type_Confusion__char_824goodEv() #0 !dbg !328 !effectiveSanArgs !4 {
  call void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv(), !dbg !329
  ret void, !dbg !330
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: IsSSA, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness

BB#0: derived from LLVM BB %0
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:62:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:63:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_824goodEv.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #9, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #8, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define internal void @_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv() #0 !dbg !331 !effectiveSanArgs !4 {
  %1 = alloca i8*, align 8, !effectiveSan !7
  %2 = alloca i32, align 4, !effectiveSan !40
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  call void @llvm.dbg.declare(metadata i8** %1, metadata !332, metadata !299), !dbg !333
  store i8* null, i8** %1, align 8, !dbg !334
  call void @llvm.dbg.declare(metadata i32* %2, metadata !335, metadata !299), !dbg !337
  store i32 8, i32* %2, align 4, !dbg !337
  %4 = bitcast i32* %2 to i8*, !dbg !338, !effectiveSan !0
  store i8* %4, i8** %1, align 8, !dbg !339
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, metadata !340, metadata !299), !dbg !341
  %5 = call i8* @_Znwm(i64 8) #9, !dbg !342, !effectiveSan !50, !TYCHE_MD !343
  %6 = bitcast i8* %5 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, !dbg !342, !effectiveSan !50
  call void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6) #8, !dbg !344
  %7 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %6 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !342, !effectiveSan !10
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %7, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !341
  %8 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !346, !effectiveSan !10
  %9 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8 to i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)***, !dbg !347, !effectiveSan !34
  %10 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)**, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*** %9, align 8, !dbg !347, !effectiveSan !35
  %11 = getelementptr inbounds i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %10, i64 0, !dbg !347
  %12 = load i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)*, i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, i8*)** %11, align 8, !dbg !347, !effectiveSan !36
  %13 = load i8*, i8** %1, align 8, !dbg !348, !effectiveSan !0
  %14 = call zeroext i1 %12(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %8, i8* %13), !dbg !347, !effectiveSan !24
  %15 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %3, align 8, !dbg !349, !effectiveSan !10
  %16 = icmp eq %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15, null, !dbg !350
  br i1 %16, label %19, label %17, !dbg !350

; <label>:17:                                     ; preds = %0
  %18 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %15 to i8*, !dbg !351, !effectiveSan !0
  call void @_ZdlPv(i8* %18) #10, !dbg !351, !TYCHE_MD !352
  br label %19, !dbg !351

; <label>:19:                                     ; preds = %17, %0
  ret void, !dbg !353
}
42366#2501942056580049717#35#55#42124016#42211824#2#42211824#42124016#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad#_ZN30CWE843_Type_Confusion__char_823badEv#
MI Type ID Location (Inlined): [35,55]
ASM Printer Phase: 
_ZdlPv 42798288
CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:37:5 Node Type ID: []
MI Type ID: 
MI Type ID Location (Inlined): [37,5]
0x28c8260: i64,ch,glue = CopyFromReg 0x28d8cc0; Register:i64 %physreg35; 0x28d8cc0:1 Node TypeID: [ 1#55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
Start: X86DAGToDAGISel Phase! OpCode: 47 12 0x28c8260: i64,ch,glue = CopyFromReg 0x28d8cc0; Register:i64 %physreg35; 0x28d8cc0:1 Node TypeID: [ 1#55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
0x28d8cc0: ch,glue = callseq_end 0x28c8940; TargetConstant:i64<0>; TargetConstant:i64<0>; 0x28c8940:1 Node TypeID: [ 0#]
0x28c8940: ch,glue = <<Unknown Node #229>> 0x28c86c0; TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c86c0:1 Node TypeID: [ 0#]
SelectCodeCommon Phase! OpCode: 47 0x28c8260: i64,ch,glue = CopyFromReg 0x28d8cc0; Register:i64 %physreg35; 0x28d8cc0:1 Node TypeID: [ 1#55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
End: X86DAGToDAGISel Phase! OpCode: 47 -1 0x28c8260: i64,ch,glue = CopyFromReg 0x28d8cc0; Register:i64 %physreg35; 0x28d8cc0:1 Node TypeID: [ 1#55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
SelectCodeCommon Phase! OpCode: 229 0x28c8940: ch,glue = <<Unknown Node #229>> 0x28c86c0; TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c86c0:1 Node TypeID: [ 1#55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
End: X86DAGToDAGISel Phase! OpCode: 65088 -1 0x28c8940: ch,glue = <<Unknown Machine Node #65088>> TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c86c0; 0x28c86c0:1 Node TypeID: [ 1#55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
Instr Emitter Phase: Node OpCode: 65088 55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#0x28c8940: ch,glue = <<Unknown Machine Node #65088>> TargetGlobalAddress:i64<i8* (i64)* @_Znwm> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c86c0; 0x28c86c0:1 Node TypeID: [ 1#55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
Instr Emitter Phase: Node OpCode: 65088 0x28c86c0: ch,glue = <<Unknown Machine Node #65088>> TargetGlobalAddress:i64<void (i8*)* @_ZdlP# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg22<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg22 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %vreg22, %noreg, !"intBuffer", <!299>; GR64:%vreg22 line no:52 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	%vreg23<def> = COPY %vreg22; GR64:%vreg23,%vreg22 dbg:CWE843_Type_Confusion__char_82a.cpp:53:16 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg23; mem:ST8[%1] GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%9] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%11] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Predecessors according to CFG: BB#0
	%vreg25<def> = COPY %vreg1; GR64:%vreg25,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = COPY %vreg25; GR64:%vreg25 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg22<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg22 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %vreg22, %noreg, !"intBuffer", <!299>; GR64:%vreg22 line no:52 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	%vreg23<def> = COPY %vreg22; GR64:%vreg23,%vreg22 dbg:CWE843_Type_Confusion__char_82a.cpp:53:16 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg23; mem:ST8[%1] GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%9] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%11] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Predecessors according to CFG: BB#0
	%vreg25<def> = COPY %vreg1; GR64:%vreg25,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = COPY %vreg25; GR64:%vreg25 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg22<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg22 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %vreg22, %noreg, !"intBuffer", <!299>; GR64:%vreg22 line no:52 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	%vreg23<def> = COPY %vreg22; GR64:%vreg23,%vreg22 dbg:CWE843_Type_Confusion__char_82a.cpp:53:16 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg23; mem:ST8[%1] GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%9] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%11] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Predecessors according to CFG: BB#0
	%vreg25<def> = COPY %vreg1; GR64:%vreg25,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = COPY %vreg25; GR64:%vreg25 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]

BB#0: derived from LLVM BB %0
	%vreg16<def> = MOV32ri 8; GR32:%vreg16 Node Type ID: []
	%vreg17<def> = SUBREG_TO_REG 0, %vreg16, sub_32bit; GR64:%vreg17 GR32:%vreg16 Node Type ID: []
	%vreg22<def> = LEA64r <fi#1>, 1, %noreg, 0, %noreg; GR64:%vreg22 Node Type ID: []
	MOV64mi32 <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %vreg22, %noreg, !"intBuffer", <!299>; GR64:%vreg22 line no:52 Node Type ID: []
	MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	%vreg23<def> = COPY %vreg22; GR64:%vreg23,%vreg22 dbg:CWE843_Type_Confusion__char_82a.cpp:53:16 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg23; mem:ST8[%1] GR64:%vreg23 dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg18<def> = MOV32ri64 8; GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg19<def> = SUBREG_TO_REG 0, %vreg18<kill>, sub_32bit; GR64:%vreg19 GR32:%vreg18 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%RDI<def> = COPY %vreg19; GR64:%vreg19 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg20<def> = COPY %RAX; GR64:%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg14<def> = COPY %vreg20; GR64:%vreg14,%vreg20 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%vreg15<def> = COPY %vreg14; GR64:%vreg15,%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%vreg13<def> = COPY %vreg15; GR64:%vreg13,%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg13; mem:ST8[%3] GR64:%vreg13 dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%vreg9<def> = MOV64rm %vreg10, 1, %noreg, 0, %noreg; mem:LD8[%9] GR64:%vreg9,%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg8<def> = MOV64rm %vreg9, 1, %noreg, 0, %noreg; mem:LD8[%11] GR64:%vreg8,%vreg9 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg6<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%1] GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RDI<def> = COPY %vreg10; GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %vreg8, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSI<imp-use>, %AL<imp-def>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg5<def> = COPY %AL; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%vreg1<def> = MOV64rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD8[%3] GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %vreg1, 0, %EFLAGS<imp-def>; GR64:%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Predecessors according to CFG: BB#0
	%vreg25<def> = COPY %vreg1; GR64:%vreg25,%vreg1 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = COPY %vreg25; GR64:%vreg25 dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Predecessors according to CFG: BB#0 BB#1
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%RCX<def> = SUBREG_TO_REG 0, %EAX<kill>, sub_32bit Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri64 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%RDI<def> = SUBREG_TO_REG 0, %EAX<kill>, sub_32bit; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = COPY %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = COPY %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = COPY %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=8, align=8, at location [SP-32]
  fi#3: size=8, align=8, at location [SP-40]
  fi#4: size=8, align=8, at location [SP-48]
  fi#5: size=1, align=1, at location [SP-49]
  fi#6: size=8, align=8, at location [SP-64]

BB#0: derived from LLVM BB %0
    Live Ins: %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32ri 8 Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	%RDX<def> = LEA64r %RBP, 1, %noreg, -12, %noreg Node Type ID: []
	MOV64mi32 %RBP, 1, %noreg, -8, %noreg, 0; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:49:10 Node Type ID: []
	DBG_VALUE %RDX, %noreg, !"intBuffer", <!299>; line no:52 Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -12, %noreg, 8; mem:ST4[%2] dbg:CWE843_Type_Confusion__char_82a.cpp:52:13 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDX<kill>; mem:ST8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:53:14 Node Type ID: []
	%EAX<def> = MOV32ri 8; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -32, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
	%RDI<def> = MOV64rr %RAX; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -40, %noreg, %RAX<kill>; mem:ST8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:59 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -40, %noreg; mem:LD8[FixedStack4] dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RAX<kill>; mem:ST8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:55:42 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:56:5 Node Type ID: []
	%RCX<def> = MOV64rm %RAX, 1, %noreg, 0, %noreg; mem:LD8[%9] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RCX<kill>, 1, %noreg, 0, %noreg; mem:LD8[%11] dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%1] dbg:CWE843_Type_Confusion__char_82a.cpp:56:24 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	CALL64r %RCX<kill>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSI<imp-use,kill>, %AL<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:56:17 Node Type ID: []
	%RCX<def> = MOV64rm %RBP, 1, %noreg, -24, %noreg; mem:LD8[%3] dbg:CWE843_Type_Confusion__char_82a.cpp:57:12 Node Type ID: []
	CMP64ri8 %RCX, 0, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV8mr %RBP, 1, %noreg, -41, %noreg, %AL<kill>; mem:ST1[FixedStack5] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -56, %noreg, %RCX<kill>; mem:ST8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	JE_1 <BB#2>, %EFLAGS<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2 BB#1

BB#1: derived from LLVM BB %17
    Live Ins: %RBP
    Predecessors according to CFG: BB#0
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -56, %noreg; mem:LD8[FixedStack6] dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	%RDI<def> = MOV64rr %RAX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
    Successors according to CFG: BB#2

BB#2: derived from LLVM BB %19
    Live Ins: %RBP
    Predecessors according to CFG: BB#0 BB#1
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 64, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []
	RETQ; dbg:CWE843_Type_Confusion__char_82a.cpp:58:1 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_82L7goodG2BEv.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #8, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #8, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline norecurse uwtable
define i32 @main(i32, i8**) #5 !dbg !354 !effectiveSanArgs !357 {
  %3 = alloca i32, align 4, !effectiveSan !40
  %4 = alloca i32, align 4, !effectiveSan !40
  %5 = alloca i8**, align 8, !effectiveSan !41
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !358, metadata !299), !dbg !359
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !360, metadata !299), !dbg !361
  %6 = call i64 @time(i64* null) #8, !dbg !362, !effectiveSan !43
  %7 = trunc i64 %6 to i32, !dbg !362
  call void @srand(i32 %7) #8, !dbg !363
  call void @printLine(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0)), !dbg !365
  call void @_ZN30CWE843_Type_Confusion__char_824goodEv(), !dbg !366
  call void @printLine(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)), !dbg !367
  call void @printLine(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0)), !dbg !368
  call void @_ZN30CWE843_Type_Confusion__char_823badEv(), !dbg !369
  call void @printLine(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i32 0, i32 0)), !dbg !370
  ret i32 0, !dbg !371
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %EDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg12<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg12 Node Type ID: []
	%vreg13<def> = SUBREG_TO_REG 0, %vreg12, sub_32bit; GR64:%vreg13 GR32:%vreg12 Node Type ID: []
	MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%4] GR32:%vreg1 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%5] GR64:%vreg3 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg14<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg15<def> = SUBREG_TO_REG 0, %vreg14<kill>, sub_32bit; GR64:%vreg15 GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg16<def> = COPY %RAX; GR64:%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg10<def> = COPY %vreg16; GR64:%vreg10,%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg11<def> = COPY %vreg10:sub_32bit<kill>; GR32:%vreg11 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%EDI<def> = COPY %vreg11; GR32:%vreg11 dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%vreg8<def> = MOV64ri <ga:@.str>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg8; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.1>; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%vreg6<def> = MOV64ri <ga:@.str.2>; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg5<def> = MOV64ri <ga:@.str.3>; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%RDI<def> = COPY %vreg5; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg4 Node Type ID: []
	%EAX<def> = COPY %vreg4; GR32:%vreg4 dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %EDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg12<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg12 Node Type ID: []
	%vreg13<def> = SUBREG_TO_REG 0, %vreg12, sub_32bit; GR64:%vreg13 GR32:%vreg12 Node Type ID: []
	MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%4] GR32:%vreg1 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%5] GR64:%vreg3 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg14<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg15<def> = SUBREG_TO_REG 0, %vreg14<kill>, sub_32bit; GR64:%vreg15 GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg16<def> = COPY %RAX; GR64:%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg10<def> = COPY %vreg16; GR64:%vreg10,%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg11<def> = COPY %vreg10:sub_32bit<kill>; GR32:%vreg11 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%EDI<def> = COPY %vreg11; GR32:%vreg11 dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%vreg8<def> = MOV64ri <ga:@.str>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg8; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.1>; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%vreg6<def> = MOV64ri <ga:@.str.2>; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg5<def> = MOV64ri <ga:@.str.3>; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%RDI<def> = COPY %vreg5; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg4 Node Type ID: []
	%EAX<def> = COPY %vreg4; GR32:%vreg4 dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %EDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg12<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg12 Node Type ID: []
	%vreg13<def> = SUBREG_TO_REG 0, %vreg12, sub_32bit; GR64:%vreg13 GR32:%vreg12 Node Type ID: []
	MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%4] GR32:%vreg1 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%5] GR64:%vreg3 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg14<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg15<def> = SUBREG_TO_REG 0, %vreg14<kill>, sub_32bit; GR64:%vreg15 GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg16<def> = COPY %RAX; GR64:%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg10<def> = COPY %vreg16; GR64:%vreg10,%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg11<def> = COPY %vreg10:sub_32bit<kill>; GR32:%vreg11 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%EDI<def> = COPY %vreg11; GR32:%vreg11 dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%vreg8<def> = MOV64ri <ga:@.str>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg8; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.1>; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%vreg6<def> = MOV64ri <ga:@.str.2>; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg5<def> = MOV64ri <ga:@.str.3>; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%RDI<def> = COPY %vreg5; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg4 Node Type ID: []
	%EAX<def> = COPY %vreg4; GR32:%vreg4 dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=8, align=8, at location [SP+8]
Function Live Ins: %EDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %EDI; GR32:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR32:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	%vreg12<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg12 Node Type ID: []
	%vreg13<def> = SUBREG_TO_REG 0, %vreg12, sub_32bit; GR64:%vreg13 GR32:%vreg12 Node Type ID: []
	MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%4] GR32:%vreg1 Node Type ID: []
	MOV64mr <fi#2>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%5] GR64:%vreg3 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg14<def> = MOV32r0 %EFLAGS<imp-def,dead>; GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg15<def> = SUBREG_TO_REG 0, %vreg14<kill>, sub_32bit; GR64:%vreg15 GR32:%vreg14 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%RDI<def> = COPY %vreg15; GR64:%vreg15 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg16<def> = COPY %RAX; GR64:%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg10<def> = COPY %vreg16; GR64:%vreg10,%vreg16 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%vreg11<def> = COPY %vreg10:sub_32bit<kill>; GR32:%vreg11 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%EDI<def> = COPY %vreg11; GR32:%vreg11 dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%vreg8<def> = MOV64ri <ga:@.str>; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	%RDI<def> = COPY %vreg8; GR64:%vreg8 dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%vreg7<def> = MOV64ri <ga:@.str.1>; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = COPY %vreg7; GR64:%vreg7 dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%vreg6<def> = MOV64ri <ga:@.str.2>; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	%RDI<def> = COPY %vreg6; GR64:%vreg6 dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg5<def> = MOV64ri <ga:@.str.3>; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%RDI<def> = COPY %vreg5; GR64:%vreg5 dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%vreg4<def> = MOV32r0 %EFLAGS<imp-def>; GR32:%vreg4 Node Type ID: []
	%EAX<def> = COPY %vreg4; GR32:%vreg4 dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def> Node Type ID: []
	%RCX<def> = SUBREG_TO_REG 0, %EAX<kill>, sub_32bit Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%RDI<def> = SUBREG_TO_REG 0, %EAX<kill>, sub_32bit; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = COPY %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = COPY %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def> = MOV32r0 %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = MOV32rr %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = MOV32rr %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = MOV32rr %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = MOV32rr %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = MOV32rr %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = MOV32rr %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]
  fi#1: size=4, align=4, at location [SP-16]
  fi#2: size=8, align=8, at location [SP-24]
  fi#3: size=8, align=8, at location [SP-32]
Function Live Ins: %EDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %EDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%ECX<def> = MOV32rr %EAX<kill>, %RCX<imp-def> Node Type ID: []
	MOV32mi %RBP, 1, %noreg, -4, %noreg, 0; mem:ST4[%3] Node Type ID: []
	MOV32mr %RBP, 1, %noreg, -8, %noreg, %EDI<kill>; mem:ST4[%4] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%5] Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def,dead>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EAX<kill>, %RDI<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -24, %noreg, %RCX<kill>; mem:ST8[FixedStack3] dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	CALL64pcrel32 <ga:@time>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDX<def> = MOV32rr %EAX, %RAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:22 Node Type ID: []
	%EDI<def> = MOV32rr %EDX<kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	CALL64pcrel32 <ga:@srand>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:82:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:84:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_824goodEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:85:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.1>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:86:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.2>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:89:5 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_823badEv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:90:5 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@.str.3>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	CALL64pcrel32 <ga:@printLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:91:5 Node Type ID: []
	%EAX<def,tied1> = XOR32rr %EAX<undef,tied0>, %EAX<undef>, %EFLAGS<imp-def> Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 32, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82a.cpp:93:5 Node Type ID: []

# End machine code for function main.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*) unnamed_addr #3 comdat align 2 !dbg !372 !effectiveSanArgs !376 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, align 8, !effectiveSan !9
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, metadata !377, metadata !299), !dbg !378
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"** %2, align 8, !effectiveSan !10
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %3 to i32 (...)***, !dbg !379, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %4, align 8, !dbg !379
  ret void, !dbg !379
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%4] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%4] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%4] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%vreg4<def> = COPY %vreg3; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg4<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%4] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	%RAX<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RAX<def,tied1> = ADD64ri8 %RAX<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	MOV64mr %RDI<kill>, 1, %noreg, 0, %noreg, %RAX<kill>; mem:ST8[%4] dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:21:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev.

*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define linkonce_odr void @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*) unnamed_addr #3 comdat align 2 !dbg !380 !effectiveSanArgs !384 {
  %2 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !58
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, metadata !385, metadata !299), !dbg !386
  %3 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %2, align 8, !effectiveSan !50
  %4 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"*, !dbg !387, !effectiveSan !10
  call void @_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base"* %4) #8, !dbg !387
  %5 = bitcast %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %3 to i32 (...)***, !dbg !387, !effectiveSan !45
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [3 x i8*] }, { [3 x i8*] }* @_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %5, align 8, !dbg !387
  ret void, !dbg !387
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg3<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0

BB#0: derived from LLVM BB %1
    Live Ins: %RDI
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	DBG_VALUE <fi#0>, 0, !"this", <!299>; line no:0 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%2] GR64:%vreg1 Node Type ID: []
	%vreg2<def> = MOV64rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD8[%2](dereferenceable) GR64:%vreg2 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = COPY %vreg2; GR64:%vreg2 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg3<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; GR64:%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg4<def> = COPY %vreg3; GR64:%vreg4,%vreg3 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%vreg4<def,tied1> = ADD64ri8 %vreg4<tied0>, 16, %EFLAGS<imp-def,dead>; GR64:%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %vreg2, 1, %noreg, 0, %noreg, %vreg4<kill>; mem:ST8[%5] GR64:%vreg2,%vreg4 dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI

BB#0: derived from LLVM BB %1
    Live Ins: %RDI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	DBG_VALUE %RBP, -8, !"this", <!299>; line no:0 indirect Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%2] Node Type ID: []
	%RDI<def> = MOV64rm %RBP, 1, %noreg, -8, %noreg; mem:LD8[%2](dereferenceable) Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RDI; mem:ST8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	CALL64pcrel32 <ga:@_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseC2Ev>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def> = MOV64ri <ga:@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RDI<def,tied1> = ADD64ri8 %RDI<tied0>, 16, %EFLAGS<imp-def,dead>; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RAX<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[FixedStack1] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	MOV64mr %RAX<kill>, 1, %noreg, 0, %noreg, %RDI<kill>; mem:ST8[%5] dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []
	RETQ; dbg:./CWE843_Type_Confusion__char_82.h:40:7 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BC2Ev.

3 warnings generated.
v> 0; Register:i64 %physreg39; RegisterMask:Untyped; 0x28c8260; 0x28c8260:1 Node TypeID: [ 0#]
ASM Printer Phase: 
_Znwm 42840680
CALL64pcrel32 <ga:@_Znwm>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>, %RAX<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:55:55 Node Type ID: [55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#]
MI Type ID: 55#55#42346824#18272993694778026663#17113089607461981850#55#55#42269552#42279312#3#42279312#42269552#_Znwm#class CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B#_ZN30CWE843_Type_Confusion__char_82L7goodG2BEv#
MI Type ID Location (Inlined): [55,55]
ASM Printer Phase: 
_ZdlPv 42844800
CALL64pcrel32 <ga:@_ZdlPv>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %RDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82a.cpp:57:5 Node Type ID: []
MI Type ID: 
MI Type ID Location (Inlined): [57,5]
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Force set function attributes ***; ModuleID = 'CWE843_Type_Confusion__char_82_bad.cpp'
source_filename = "CWE843_Type_Confusion__char_82_bad.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant [71 x i8] c"N30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_bad.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !14, file: !13, line: 30, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !13, line: 33, type: !29, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 56, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
declare void @printIntLine(i32) #2
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'CWE843_Type_Confusion__char_82_bad.cpp'
source_filename = "CWE843_Type_Confusion__char_82_bad.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant [71 x i8] c"N30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_bad.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !14, file: !13, line: 30, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !13, line: 33, type: !29, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 56, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
warning: EffectiveSan assumes -O2 optimization level; got -O0
       __  __           _   _           ____
  ___ / _|/ _| ___  ___| |_(_)_   _____/ ___|  __ _ _ __
 / _ \ |_| |_ / _ \/ __| __| \ \ / / _ \___ \ / _` | '_ \
|  __/  _|  _|  __/ (__| |_| |\ V /  __/___) | (_| | | | |
 \___|_| |_|  \___|\___|\__|_| \_/ \___|____/ \__,_|_| |_|

	int8_t [+0] (-17179869184..17179869184) <703EDF97BC60677D> {8088147823597479805} <0xc1d778> = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
ADD(0x703EDF97BC60677D, 0x703EDF97BC60677D, 0) = 0x00000000B79F915E {3080687966} [-17179869184..17179869184] index=0 name: int8_t
1.000000 0 0 1
*** IR Dump After EffectiveSan pass ***; ModuleID = 'CWE843_Type_Confusion__char_82_bad.cpp'
source_filename = "CWE843_Type_Confusion__char_82_bad.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant [71 x i8] c"N30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1
@TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_bad.cpp = private unnamed_addr constant [1 x i8] zeroinitializer
@TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_bad.cpp = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_0_SEC_6_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_0_SEC_5_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_0_SEC_4_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_0_SEC_3_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_0_SEC_2_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_0_SEC_1_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_bad.cpp, i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_bad.cpp, i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_bad.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_bad.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !14, file: !13, line: 30, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !13, line: 33, type: !29, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 56, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'CWE843_Type_Confusion__char_82_bad.cpp'
source_filename = "CWE843_Type_Confusion__char_82_bad.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant [71 x i8] c"N30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1
@TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_bad.cpp = private unnamed_addr constant [1 x i8] zeroinitializer
@TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_bad.cpp = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_0_SEC_6_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_0_SEC_5_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_0_SEC_4_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_0_SEC_3_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_0_SEC_2_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_0_SEC_1_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_bad.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_bad.cpp, i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_bad.cpp, i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_bad.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_bad.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_bad", scope: !14, file: !13, line: 30, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_badE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !13, line: 33, type: !29, isLocal: false, isDefinition: false, scopeLine: 33, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 56, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_bad"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg4<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg4<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg4<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def> = COPY %vreg4; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg5<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_bad.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8234CWE843_Type_Confusion__char_82_bad6actionEPv.

1 warning generated.
*** IR Dump After Add DWARF path discriminators ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Force set function attributes ***; ModuleID = 'CWE843_Type_Confusion__char_82_goodG2B.cpp'
source_filename = "CWE843_Type_Confusion__char_82_goodG2B.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant [75 x i8] c"N30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_goodG2B.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !14, file: !13, line: 40, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !13, line: 43, type: !29, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 60, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After Inliner for always_inline functions ***
declare void @printIntLine(i32) #2
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Inliner for always_inline functions ***
; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1
*** IR Dump After Inliner for always_inline functions ***
Printing <null> Function
*** IR Dump After A No-Op Barrier Pass ***; ModuleID = 'CWE843_Type_Confusion__char_82_goodG2B.cpp'
source_filename = "CWE843_Type_Confusion__char_82_goodG2B.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant [75 x i8] c"N30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_goodG2B.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !14, file: !13, line: 40, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !13, line: 43, type: !29, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 60, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
warning: EffectiveSan assumes -O2 optimization level; got -O0
       __  __           _   _           ____
  ___ / _|/ _| ___  ___| |_(_)_   _____/ ___|  __ _ _ __
 / _ \ |_| |_ / _ \/ __| __| \ \ / / _ \___ \ / _` | '_ \
|  __/  _|  _|  __/ (__| |_| |\ V /  __/___) | (_| | | | |
 \___|_| |_|  \___|\___|\__|_| \_/ \___|____/ \__,_|_| |_|

	int8_t [+0] (-17179869184..17179869184) <703EDF97BC60677D> {8088147823597479805} <0x11005c8> = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
ADD(0x703EDF97BC60677D, 0x703EDF97BC60677D, 0) = 0x00000000B79F915E {3080687966} [-17179869184..17179869184] index=0 name: int8_t
1.000000 0 0 1
*** IR Dump After EffectiveSan pass ***; ModuleID = 'CWE843_Type_Confusion__char_82_goodG2B.cpp'
source_filename = "CWE843_Type_Confusion__char_82_goodG2B.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant [75 x i8] c"N30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1
@TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = private unnamed_addr constant [1 x i8] zeroinitializer
@TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_0_SEC_6_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_0_SEC_5_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_0_SEC_4_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_0_SEC_3_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_0_SEC_2_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_0_SEC_1_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp, i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp, i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_goodG2B.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !14, file: !13, line: 40, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !13, line: 43, type: !29, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 60, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Inserts calls to mcount-like functions ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Rewrite Symbols ***; ModuleID = 'CWE843_Type_Confusion__char_82_goodG2B.cpp'
source_filename = "CWE843_Type_Confusion__char_82_goodG2B.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%TYCHE_META_CACHELINE = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE007 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE006 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE005 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE004 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE003 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE002 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE001 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%TYCHE_META_CACHELINE000 = type <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %TYCHE_META_CACHELINE* }>
%EFFECTIVE_TYPE_2 = type { [1 x %TYCHE_META_CACHELINE]*, i64, i64, i32, i32, i32, i32, i64, i64, %EFFECTIVE_INFO*, i64, i32, [2 x %EFFECTIVE_ENTRY] }
%EFFECTIVE_INFO = type { i8*, i32, i32, i32, %EFFECTIVE_INFO*, [0 x %EFFECTIVE_INFO_ENTRY] }
%EFFECTIVE_INFO_ENTRY = type { %EFFECTIVE_INFO*, i32, i64, i64 }
%EFFECTIVE_ENTRY = type { i8*, i64, i64, i64, <2 x i64> }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B" = type { %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" }
%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_base" = type { i32 (...)** }

$_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

$_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = comdat any

@_ZTVN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = unnamed_addr constant { [3 x i8*] } { [3 x i8*] [i8* null, i8* bitcast ({ i8*, i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE to i8*), i8* bitcast (i1 (%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*)* @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv to i8*)] }, align 8, !effectiveSan !0
@_ZTVN10__cxxabiv120__si_class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant [75 x i8] c"N30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE\00", !effectiveSan !1
@_ZTVN10__cxxabiv117__class_type_infoE = external global i8*
@_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant [72 x i8] c"N30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE\00", comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE = linkonce_odr constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE, i32 0, i32 0) }, comdat, !effectiveSan !1
@_ZTIN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE = constant { i8*, i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv120__si_class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([75 x i8], [75 x i8]* @_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE, i32 0, i32 0), i8* bitcast ({ i8*, i8* }* @_ZTIN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE to i8*) }, !effectiveSan !1
@TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = private unnamed_addr constant [1 x i8] zeroinitializer
@TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = private unnamed_addr constant [7 x i8] c"int8_t\00"
@TYCHE_META_SECTION_TID_0 = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE007* null }>], section "tyche_symbols_section_7", align 64
@TYCHE_META_SECTION_TID_0_SEC_6_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE006* null }>], section "tyche_symbols_section_6", align 64
@TYCHE_META_SECTION_TID_0_SEC_5_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE005* null }>], section "tyche_symbols_section_5", align 64
@TYCHE_META_SECTION_TID_0_SEC_4_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE004* null }>], section "tyche_symbols_section_4", align 64
@TYCHE_META_SECTION_TID_0_SEC_3_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE003* null }>], section "tyche_symbols_section_3", align 64
@TYCHE_META_SECTION_TID_0_SEC_2_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE002* null }>], section "tyche_symbols_section_2", align 64
@TYCHE_META_SECTION_TID_0_SEC_1_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE001* null }>], section "tyche_symbols_section_1", align 64
@TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp = weak constant [1 x %TYCHE_META_CACHELINE] [%TYCHE_META_CACHELINE <{ i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, %TYCHE_META_CACHELINE000* null }>], section "tyche_symbols_section_0", align 64
@EFFECTIVE_TYPE_INT8 = weak constant %EFFECTIVE_TYPE_2 { [1 x %TYCHE_META_CACHELINE]* @TYCHE_META_SECTION_TID_0_SEC_0_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp, i64 8088147823597479805, i64 8088147823597479805, i32 1, i32 1, i32 0, i32 1340864923, i64 -9223372036854775808, i64 1, %EFFECTIVE_INFO* null, i64 8088147823597479805, i32 2, [2 x %EFFECTIVE_ENTRY] [%EFFECTIVE_ENTRY { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @TYCHE_TYPE_ENTRY_int8_t_3080687966_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp, i32 0, i32 0), i64 0, i64 3080687966, i64 0, <2 x i64> <i64 -17179869184, i64 17179869184> }, %EFFECTIVE_ENTRY { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @TYCHE_TYPE_ENTRY_NULL_FILE_CWE843_Type_Confusion__char_82_goodG2B.cpp, i32 0, i32 0), i64 -1, i64 -1, i64 0, <2 x i64> zeroinitializer }] }

; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare void @printIntLine(i32) #2

attributes #0 = { noinline uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!271, !272}
!llvm.ident = !{!273}

!0 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !3, producer: "clang version 4.0.1 (tags/RELEASE_401/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, imports: !33)
!3 = !DIFile(filename: "CWE843_Type_Confusion__char_82_goodG2B.cpp", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!4 = !{}
!5 = !{!6, !8, !10, !32, !11, !0, !7, !1}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!12 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_goodG2B", scope: !14, file: !13, line: 40, size: 64, elements: !15, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2BE")
!13 = !DIFile(filename: "./CWE843_Type_Confusion__char_82.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!14 = !DINamespace(name: "CWE843_Type_Confusion__char_82", scope: null, file: !13, line: 18)
!15 = !{!16, !28}
!16 = !DIDerivedType(tag: DW_TAG_inheritance, scope: !12, baseType: !17, flags: DIFlagPublic)
!17 = distinct !DICompositeType(tag: DW_TAG_class_type, name: "CWE843_Type_Confusion__char_82_base", scope: !14, file: !13, line: 21, size: 64, elements: !18, vtableHolder: !17, identifier: "_ZTSN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_baseE")
!18 = !{!19, !24}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "_vptr$CWE843_Type_Confusion__char_82_base", scope: !13, file: !13, baseType: !20, size: 64, flags: DIFlagArtificial)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, name: "__vtbl_ptr_type", baseType: !22, size: 64)
!22 = !DISubroutineType(types: !23)
!23 = !{!7}
!24 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8235CWE843_Type_Confusion__char_82_base6actionEPv", scope: !17, file: !13, line: 25, type: !25, isLocal: false, isDefinition: false, scopeLine: 25, containingType: !17, virtuality: DW_VIRTUALITY_pure_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!25 = !DISubroutineType(types: !26)
!26 = !{!9, !27, !0}
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!28 = !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !13, line: 43, type: !29, isLocal: false, isDefinition: false, scopeLine: 43, containingType: !12, virtuality: DW_VIRTUALITY_virtual, virtualIndex: 0, flags: DIFlagPublic | DIFlagPrototyped, isOptimized: false)
!29 = !DISubroutineType(types: !30)
!30 = !{!9, !31, !0}
!31 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, flags: DIFlagArtificial | DIFlagObjectPointer)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !0, size: 64)
!33 = !{!34, !41, !47, !54, !58, !63, !70, !74, !78, !91, !95, !99, !103, !107, !112, !116, !120, !124, !128, !136, !140, !144, !146, !150, !155, !161, !165, !169, !171, !179, !183, !191, !193, !197, !201, !205, !209, !214, !219, !224, !225, !226, !227, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270}
!34 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !37, line: 52)
!35 = !DINamespace(name: "std", scope: null, file: !36, line: 236)
!36 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/x86_64-linux-gnu/c++/8/bits/c++config.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!37 = !DISubprogram(name: "abs", scope: !38, file: !38, line: 837, type: !39, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!38 = !DIFile(filename: "/usr/include/stdlib.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!39 = !DISubroutineType(types: !40)
!40 = !{!7, !7}
!41 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !42, line: 127)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "div_t", file: !38, line: 62, baseType: !43)
!43 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 58, size: 64, elements: !44, identifier: "_ZTS5div_t")
!44 = !{!45, !46}
!45 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !43, file: !38, line: 60, baseType: !7, size: 32)
!46 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !43, file: !38, line: 61, baseType: !7, size: 32, offset: 32)
!47 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !48, line: 128)
!48 = !DIDerivedType(tag: DW_TAG_typedef, name: "ldiv_t", file: !38, line: 70, baseType: !49)
!49 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 66, size: 128, elements: !50, identifier: "_ZTS6ldiv_t")
!50 = !{!51, !53}
!51 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !49, file: !38, line: 68, baseType: !52, size: 64)
!52 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!53 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !49, file: !38, line: 69, baseType: !52, size: 64, offset: 64)
!54 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !55, line: 130)
!55 = !DISubprogram(name: "abort", scope: !38, file: !38, line: 588, type: !56, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!56 = !DISubroutineType(types: !57)
!57 = !{null}
!58 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !59, line: 134)
!59 = !DISubprogram(name: "atexit", scope: !38, file: !38, line: 592, type: !60, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!60 = !DISubroutineType(types: !61)
!61 = !{!7, !62}
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64)
!63 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !64, line: 140)
!64 = !DISubprogram(name: "atof", scope: !38, file: !38, line: 101, type: !65, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!65 = !DISubroutineType(types: !66)
!66 = !{!67, !68}
!67 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!68 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1)
!70 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !71, line: 141)
!71 = !DISubprogram(name: "atoi", scope: !38, file: !38, line: 104, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!72 = !DISubroutineType(types: !73)
!73 = !{!7, !68}
!74 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !75, line: 142)
!75 = !DISubprogram(name: "atol", scope: !38, file: !38, line: 107, type: !76, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!76 = !DISubroutineType(types: !77)
!77 = !{!52, !68}
!78 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !79, line: 143)
!79 = !DISubprogram(name: "bsearch", scope: !38, file: !38, line: 817, type: !80, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!80 = !DISubroutineType(types: !81)
!81 = !{!0, !82, !82, !84, !84, !87}
!82 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!83 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!84 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !85, line: 62, baseType: !86)
!85 = !DIFile(filename: "/home/dante/EffectiveSan/build/bin/../lib/clang/4.0.1/include/stddef.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!86 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !38, line: 805, baseType: !88)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DISubroutineType(types: !90)
!90 = !{!7, !82, !82}
!91 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !92, line: 144)
!92 = !DISubprogram(name: "calloc", scope: !38, file: !38, line: 541, type: !93, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!93 = !DISubroutineType(types: !94)
!94 = !{!0, !84, !84}
!95 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !96, line: 145)
!96 = !DISubprogram(name: "div", scope: !38, file: !38, line: 849, type: !97, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!97 = !DISubroutineType(types: !98)
!98 = !{!42, !7, !7}
!99 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !100, line: 146)
!100 = !DISubprogram(name: "exit", scope: !38, file: !38, line: 614, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!101 = !DISubroutineType(types: !102)
!102 = !{null, !7}
!103 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !104, line: 147)
!104 = !DISubprogram(name: "free", scope: !38, file: !38, line: 563, type: !105, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!105 = !DISubroutineType(types: !106)
!106 = !{null, !0}
!107 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !108, line: 148)
!108 = !DISubprogram(name: "getenv", scope: !38, file: !38, line: 631, type: !109, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!109 = !DISubroutineType(types: !110)
!110 = !{!111, !68}
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1, size: 64)
!112 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !113, line: 149)
!113 = !DISubprogram(name: "labs", scope: !38, file: !38, line: 838, type: !114, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!114 = !DISubroutineType(types: !115)
!115 = !{!52, !52}
!116 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !117, line: 150)
!117 = !DISubprogram(name: "ldiv", scope: !38, file: !38, line: 851, type: !118, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!118 = !DISubroutineType(types: !119)
!119 = !{!48, !52, !52}
!120 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !121, line: 151)
!121 = !DISubprogram(name: "malloc", scope: !38, file: !38, line: 539, type: !122, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!122 = !DISubroutineType(types: !123)
!123 = !{!0, !84}
!124 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !125, line: 153)
!125 = !DISubprogram(name: "mblen", scope: !38, file: !38, line: 919, type: !126, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!126 = !DISubroutineType(types: !127)
!127 = !{!7, !68, !84}
!128 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !129, line: 154)
!129 = !DISubprogram(name: "mbstowcs", scope: !38, file: !38, line: 930, type: !130, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!130 = !DISubroutineType(types: !131)
!131 = !{!84, !132, !135, !84}
!132 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !133)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = !DIBasicType(name: "wchar_t", size: 32, encoding: DW_ATE_signed)
!135 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !68)
!136 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !137, line: 155)
!137 = !DISubprogram(name: "mbtowc", scope: !38, file: !38, line: 922, type: !138, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!138 = !DISubroutineType(types: !139)
!139 = !{!7, !132, !135, !84}
!140 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !141, line: 157)
!141 = !DISubprogram(name: "qsort", scope: !38, file: !38, line: 827, type: !142, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!142 = !DISubroutineType(types: !143)
!143 = !{null, !0, !84, !84, !87}
!144 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !145, line: 163)
!145 = !DISubprogram(name: "rand", scope: !38, file: !38, line: 453, type: !22, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!146 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !147, line: 164)
!147 = !DISubprogram(name: "realloc", scope: !38, file: !38, line: 549, type: !148, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!148 = !DISubroutineType(types: !149)
!149 = !{!0, !0, !84}
!150 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !151, line: 165)
!151 = !DISubprogram(name: "srand", scope: !38, file: !38, line: 455, type: !152, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154}
!154 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!155 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !156, line: 166)
!156 = !DISubprogram(name: "strtod", scope: !38, file: !38, line: 117, type: !157, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!157 = !DISubroutineType(types: !158)
!158 = !{!67, !135, !159}
!159 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !160)
!160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!161 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !162, line: 167)
!162 = !DISubprogram(name: "strtol", scope: !38, file: !38, line: 176, type: !163, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!163 = !DISubroutineType(types: !164)
!164 = !{!52, !135, !159, !7}
!165 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !166, line: 168)
!166 = !DISubprogram(name: "strtoul", scope: !38, file: !38, line: 180, type: !167, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!167 = !DISubroutineType(types: !168)
!168 = !{!86, !135, !159, !7}
!169 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !170, line: 169)
!170 = !DISubprogram(name: "system", scope: !38, file: !38, line: 781, type: !72, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!171 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !172, line: 171)
!172 = !DISubprogram(name: "wcstombs", scope: !38, file: !38, line: 933, type: !173, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!173 = !DISubroutineType(types: !174)
!174 = !{!84, !175, !176, !84}
!175 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !111)
!176 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !177)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !134)
!179 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !180, line: 172)
!180 = !DISubprogram(name: "wctomb", scope: !38, file: !38, line: 926, type: !181, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!181 = !DISubroutineType(types: !182)
!182 = !{!7, !111, !134}
!183 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !185, line: 200)
!184 = !DINamespace(name: "__gnu_cxx", scope: null, file: !36, line: 262)
!185 = !DIDerivedType(tag: DW_TAG_typedef, name: "lldiv_t", file: !38, line: 80, baseType: !186)
!186 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !38, line: 76, size: 128, elements: !187, identifier: "_ZTS7lldiv_t")
!187 = !{!188, !190}
!188 = !DIDerivedType(tag: DW_TAG_member, name: "quot", scope: !186, file: !38, line: 78, baseType: !189, size: 64)
!189 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rem", scope: !186, file: !38, line: 79, baseType: !189, size: 64, offset: 64)
!191 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !192, line: 206)
!192 = !DISubprogram(name: "_Exit", scope: !38, file: !38, line: 626, type: !101, isLocal: false, isDefinition: false, flags: DIFlagPrototyped | DIFlagNoReturn, isOptimized: false)
!193 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !194, line: 210)
!194 = !DISubprogram(name: "llabs", scope: !38, file: !38, line: 841, type: !195, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!195 = !DISubroutineType(types: !196)
!196 = !{!189, !189}
!197 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !198, line: 216)
!198 = !DISubprogram(name: "lldiv", scope: !38, file: !38, line: 855, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!199 = !DISubroutineType(types: !200)
!200 = !{!185, !189, !189}
!201 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !202, line: 227)
!202 = !DISubprogram(name: "atoll", scope: !38, file: !38, line: 112, type: !203, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!203 = !DISubroutineType(types: !204)
!204 = !{!189, !68}
!205 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !206, line: 228)
!206 = !DISubprogram(name: "strtoll", scope: !38, file: !38, line: 200, type: !207, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!207 = !DISubroutineType(types: !208)
!208 = !{!189, !135, !159, !7}
!209 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !210, line: 229)
!210 = !DISubprogram(name: "strtoull", scope: !38, file: !38, line: 205, type: !211, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!211 = !DISubroutineType(types: !212)
!212 = !{!213, !135, !159, !7}
!213 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!214 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !215, line: 231)
!215 = !DISubprogram(name: "strtof", scope: !38, file: !38, line: 123, type: !216, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!216 = !DISubroutineType(types: !217)
!217 = !{!218, !135, !159}
!218 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!219 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !184, entity: !220, line: 232)
!220 = !DISubprogram(name: "strtold", scope: !38, file: !38, line: 126, type: !221, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!221 = !DISubroutineType(types: !222)
!222 = !{!223, !135, !159}
!223 = !DIBasicType(name: "long double", size: 128, encoding: DW_ATE_float)
!224 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !185, line: 240)
!225 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !192, line: 242)
!226 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !194, line: 244)
!227 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !228, line: 245)
!228 = !DISubprogram(name: "div", linkageName: "_ZN9__gnu_cxx3divExx", scope: !184, file: !229, line: 213, type: !199, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!229 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/cstdlib", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!230 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !198, line: 246)
!231 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !202, line: 248)
!232 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !215, line: 249)
!233 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !206, line: 250)
!234 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !210, line: 251)
!235 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !35, entity: !220, line: 252)
!236 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !55, line: 38)
!237 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !59, line: 39)
!238 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !100, line: 40)
!239 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !42, line: 51)
!240 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !48, line: 52)
!241 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !242, line: 54)
!242 = !DISubprogram(name: "abs", linkageName: "_ZSt3absg", scope: !35, file: !243, line: 102, type: !244, isLocal: false, isDefinition: false, flags: DIFlagPrototyped, isOptimized: false)
!243 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/8/../../../../include/c++/8/bits/std_abs.h", directory: "/home/dante/Microbenchmarks/Juliet/CWE843_Type_Confusion/CWE843_Type_Confusion__char_82")
!244 = !DISubroutineType(types: !245)
!245 = !{!246, !246}
!246 = !DIBasicType(name: "__float128", size: 128, encoding: DW_ATE_float)
!247 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !64, line: 55)
!248 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !71, line: 56)
!249 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !75, line: 57)
!250 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !79, line: 58)
!251 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !92, line: 59)
!252 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !228, line: 60)
!253 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !104, line: 61)
!254 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !108, line: 62)
!255 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !113, line: 63)
!256 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !117, line: 64)
!257 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !121, line: 65)
!258 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !125, line: 67)
!259 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !129, line: 68)
!260 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !137, line: 69)
!261 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !141, line: 71)
!262 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !145, line: 72)
!263 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !147, line: 73)
!264 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !151, line: 74)
!265 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !156, line: 75)
!266 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !162, line: 76)
!267 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !166, line: 77)
!268 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !170, line: 78)
!269 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !172, line: 80)
!270 = !DIImportedEntity(tag: DW_TAG_imported_declaration, scope: !2, entity: !180, line: 81)
!271 = !{i32 2, !"Dwarf Version", i32 4}
!272 = !{i32 2, !"Debug Info Version", i32 3}
!273 = !{!"clang version 4.0.1 (tags/RELEASE_401/final)"}
!274 = distinct !DISubprogram(name: "action", linkageName: "_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv", scope: !12, file: !3, line: 24, type: !29, isLocal: false, isDefinition: true, scopeLine: 25, flags: DIFlagPrototyped, isOptimized: false, unit: !2, declaration: !28, variables: !4)
!275 = !{!11, !0}
!276 = !DILocalVariable(name: "this", arg: 1, scope: !274, type: !11, flags: DIFlagArtificial | DIFlagObjectPointer)
!277 = !DIExpression()
!278 = !DILocation(line: 0, scope: !274)
!279 = !DILocalVariable(name: "data", arg: 2, scope: !274, file: !3, line: 24, type: !0)
!280 = !DILocation(line: 24, column: 60, scope: !274)
!281 = !DILocation(line: 27, column: 26, scope: !274)
!282 = !DILocation(line: 27, column: 20, scope: !274)
!283 = !DILocation(line: 27, column: 18, scope: !274)
!284 = !DILocation(line: 27, column: 5, scope: !274)
!285 = !DILocation(line: 28, column: 5, scope: !274)
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline uwtable
define zeroext i1 @_ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv(%"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, i8*) unnamed_addr #0 align 2 !dbg !274 !effectiveSanArgs !275 {
  %3 = alloca %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, align 8, !effectiveSan !10
  %4 = alloca i8*, align 8, !effectiveSan !32
  store %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"* %0, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8
  call void @llvm.dbg.declare(metadata %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, metadata !276, metadata !277), !dbg !278
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !279, metadata !277), !dbg !280
  %5 = load %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"*, %"class.CWE843_Type_Confusion__char_82::CWE843_Type_Confusion__char_82_goodG2B"** %3, align 8, !effectiveSan !11
  %6 = load i8*, i8** %4, align 8, !dbg !281, !effectiveSan !0
  %7 = bitcast i8* %6 to i32*, !dbg !282, !effectiveSan !6
  %8 = load i32, i32* %7, align 4, !dbg !283, !effectiveSan !7
  call void @printIntLine(i32 %8), !dbg !284
  ret i1 true, !dbg !285
}
# *** IR Dump After Expand ISel Pseudo-instructions ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg4<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg4<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg4<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=8, align=8, at location [SP+8]
  fi#1: size=8, align=8, at location [SP+8]
Function Live Ins: %RDI in %vreg0, %RSI in %vreg2

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI
	%vreg2<def> = COPY %RSI; GR64:%vreg2 Node Type ID: []
	%vreg0<def> = COPY %RDI; GR64:%vreg0 Node Type ID: []
	%vreg1<def> = COPY %vreg0<kill>; GR64:%vreg1,%vreg0 Node Type ID: []
	%vreg3<def> = COPY %vreg2<kill>; GR64:%vreg3,%vreg2 Node Type ID: []
	MOV64mr <fi#0>, 1, %noreg, 0, %noreg, %vreg1; mem:ST8[%3] GR64:%vreg1 Node Type ID: []
	MOV64mr <fi#1>, 1, %noreg, 0, %noreg, %vreg3; mem:ST8[%4] GR64:%vreg3 Node Type ID: []
	%vreg10<def> = MOV64rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD8[%4] GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%vreg9<def> = MOV32rm %vreg10, 1, %noreg, 0, %noreg; mem:LD4[%7] GR32:%vreg9 GR64:%vreg10 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	ADJCALLSTACKDOWN64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%EDI<def> = COPY %vreg9; GR32:%vreg9 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def,dead>, %EFLAGS<imp-def,dead>, %RSP<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%vreg4<def> = MOV8ri 1; GR8:%vreg4 Node Type ID: []
	%vreg5<def> = COPY %vreg4; GR8:%vreg5,%vreg4 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%vreg5<def,tied1> = AND8ri %vreg5<tied0>, 1, %EFLAGS<imp-def>; GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%vreg6<def> = MOVZX32rr8 %vreg5; GR32:%vreg6 GR8:%vreg5 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = COPY %vreg6; GR32:%vreg6 dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=8, align=8, at location [SP-16]
  fi#1: size=8, align=8, at location [SP-24]
Function Live Ins: %RDI, %RSI

BB#0: derived from LLVM BB %2
    Live Ins: %RDI %RSI %RBP
	PUSH64r %RBP<kill>, %RSP<imp-def>, %RSP<imp-use>; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RBP<def> = MOV64rr %RSP; flags: FrameSetup Node Type ID: []
	CFI_INSTRUCTION <call frame instruction> Node Type ID: []
	%RSP<def,tied1> = SUB64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameSetup Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -8, %noreg, %RDI<kill>; mem:ST8[%3] Node Type ID: []
	MOV64mr %RBP, 1, %noreg, -16, %noreg, %RSI<kill>; mem:ST8[%4] Node Type ID: []
	%RSI<def> = MOV64rm %RBP, 1, %noreg, -16, %noreg; mem:LD8[%4] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:26 Node Type ID: []
	%EDI<def> = MOV32rm %RSI<kill>, 1, %noreg, 0, %noreg; mem:LD4[%7] dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:18 Node Type ID: []
	CALL64pcrel32 <ga:@printIntLine>, <regmask %BH %BL %BP %BPL %BX %EBP %EBX %RBP %RBX %R12 %R13 %R14 %R15 %R12B %R13B %R14B %R15B %R12D %R13D %R14D %R15D %R12W %R13W %R14W %R15W>, %RSP<imp-use>, %EDI<imp-use,kill>, %RSP<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:27:5 Node Type ID: []
	%AL<def> = MOV8ri 1 Node Type ID: []
	%AL<def,tied1> = AND8ri %AL<tied0>, 1, %EFLAGS<imp-def>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%EAX<def> = MOVZX32rr8 %AL<kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RSP<def,tied1> = ADD64ri8 %RSP<tied0>, 16, %EFLAGS<imp-def,dead>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	%RBP<def> = POP64r %RSP<imp-def>, %RSP<imp-use>; flags: FrameDestroy dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []
	RETQ %EAX<imp-use,kill>; dbg:CWE843_Type_Confusion__char_82_goodG2B.cpp:28:5 Node Type ID: []

# End machine code for function _ZN30CWE843_Type_Confusion__char_8238CWE843_Type_Confusion__char_82_goodG2B6actionEPv.

1 warning generated.
